
AC-401.elf:     file format elf32-littlearm
AC-401.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
0x70000001 off    0x00016a78 vaddr 0x08006a78 paddr 0x08006a78 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00006a80 memsz 0x00006a80 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08006a80 align 2**16
         filesz 0x00000898 memsz 0x00000898 flags rw-
    LOAD off    0x00020898 vaddr 0x20000898 paddr 0x20000898 align 2**16
         filesz 0x00000000 memsz 0x0000039c flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   000003d0  08000000  08000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .inits        00000028  080003d0  080003d0  000103d0  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data         00000898  20000000  08006a80  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  3 .data_CCMRAM  00000000  10000000  10000000  00020898  2**2  CONTENTS
  4 .bss          0000029c  20000898  20000898  00020898  2**2  ALLOC
  5 .text         00006678  08000400  08000400  00010400  2**6  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .ARM.exidx    00000008  08006a78  08006a78  00016a78  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .noinit       00000000  20000b34  20000b34  00020898  2**2  CONTENTS
  8 ._check_stack 00000100  20000b34  20000b34  00020898  2**2  ALLOC
  9 .comment      0000006e  00000000  00000000  00020898  2**0  CONTENTS, READONLY
 10 .ARM.attributes 00000031  00000000  00000000  00020906  2**0  CONTENTS, READONLY
 11 .debug_aranges 00000588  00000000  00000000  00020937  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00006411  00000000  00000000  00020ebf  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015e2  00000000  00000000  000272d0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000386e  00000000  00000000  000288b2  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001aa0  00000000  00000000  0002c120  2**2  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00048df5  00000000  00000000  0002dbc0  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00002f0e  00000000  00000000  000769b5  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000528  00000000  00000000  000798c3  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0000c69c  00000000  00000000  00079deb  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080003d0 l    d  .inits	00000000 .inits
20000000 l    d  .data	00000000 .data
10000000 l    d  .data_CCMRAM	00000000 .data_CCMRAM
20000898 l    d  .bss	00000000 .bss
08000400 l    d  .text	00000000 .text
08006a78 l    d  .ARM.exidx	00000000 .ARM.exidx
20000b34 l    d  .noinit	00000000 .noinit
20000b34 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 _startup.c
20000898 l     O .bss	00000004 __bss_begin_guard
20000894 l     O .data	00000004 __data_end_guard
20000b30 l     O .bss	00000004 __bss_end_guard
20000000 l     O .data	00000004 __data_begin_guard
00000000 l    df *ABS*	00000000 exception_handlers.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 tasks.c
08000d60 l     F .text	00000034 prvResetNextTaskUnblockTime
20000a48 l     O .bss	00000004 pxDelayedTaskList
20000a4c l     O .bss	00000004 uxPendedTicks
20000a50 l     O .bss	0000008c pxReadyTasksLists
20000adc l     O .bss	00000004 uxSchedulerSuspended
20000ae4 l     O .bss	00000004 xNumOfOverflows
20000ae8 l     O .bss	00000004 xTickCount
20000aec l     O .bss	00000004 pxOverflowDelayedTaskList
20000018 l     O .data	00000004 xNextTaskUnblockTime
20000af0 l     O .bss	00000004 uxTopReadyPriority
20000af4 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000020 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 locale.c
2000085c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 _sbrk.c
2000089c l     O .bss	00000004 current_heap_end.4422
00000000 l    df *ABS*	00000000 _syscalls.c
08000444 l     F .text	00000012 get_errno
08000458 l     F .text	00000014 error
0800046c l     F .text	00000010 checkerror
0800047c l     F .text	0000003c findslot
200008a0 l     O .bss	00000004 monitor_stdout
200008a4 l     O .bss	00000004 monitor_stdin
200008a8 l     O .bss	00000028 argv_buf.6128
200008d0 l     O .bss	00000004 monitor_stderr
200008d4 l     O .bss	00000050 args_buf.6127
20000924 l     O .bss	000000a0 openfiles
00000000 l    df *ABS*	00000000 Trace.c
200009c4 l     O .bss	00000080 buf.5558
00000000 l    df *ABS*	00000000 trace_impl.c
0800091c l     F .text	00000070 _trace_write_semihosting_stdout
20000a44 l     O .bss	00000004 handle.5936
00000000 l    df *ABS*	00000000 _initialize_hardware.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 port.c
08000ca4 l       .text	00000000 pxCurrentTCBConst2
08000d00 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 findfp.c
08000f58 l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 vfprintf.c
080068fc l     O .text	00000010 blanks.7007
08006950 l     O .text	00000010 zeroes.7008
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004200 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
0800697c l     O .text	0000000c p05.5402
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
080003f8 l       .inits	00000000 __fini_array_end
20000b34 l       .noinit	00000000 _end_noinit
080003f8 l       .inits	00000000 __fini_array_start
080003f8 l       .inits	00000000 __init_array_end
080003f8 l       .inits	00000000 __preinit_array_end
080003f8 l       .inits	00000000 __init_array_start
080003f8 l       .inits	00000000 __preinit_array_start
080003cc  w    F .isr_vector	00000002 RTC_Alarm_IRQHandler
080003cc  w    F .isr_vector	00000002 HASH_RNG_IRQHandler
080003cc  w    F .isr_vector	00000002 EXTI2_IRQHandler
080003cc  w    F .isr_vector	00000002 TIM8_CC_IRQHandler
080009a4 g     F .text	000000f0 dumpExceptionStack
08005a60 g     F .text	00000024 _isatty_r
080062ec g     F .text	00000012 .hidden __aeabi_dcmple
080017f8 g     F .text	00000064 _puts_r
08006228 g     F .text	0000007a .hidden __cmpdf2
08002524 g     F .text	0000002c _lseek_r
080003b4  w    F .isr_vector	00000004 DebugMon_Handler
08006228 g     F .text	0000007a .hidden __eqdf2
20000000 g       .data	00000000 __data_start__
08005d98 g     F .text	0000005a .hidden __floatdidf
2001fc00 g       *ABS*	00000000 _Heap_Limit
080003f8 g       .inits	00000000 __bss_regions_array_end
080003cc  w    F .isr_vector	00000002 TIM1_CC_IRQHandler
080018ec g     F .text	00000020 __sseek
08001048 g     F .text	0000000a __sinit
080003cc  w    F .isr_vector	00000002 DMA2_Stream5_IRQHandler
080002a8  w    F .isr_vector	00000014 HardFault_Handler
08000ca8 g     F .text	00000010 ulPortSetInterruptMask
08000994  w    F .text	00000008 __initialize_hardware_early
08000000 g       *ABS*	00000000 __vectors_start__
080003cc  w    F .isr_vector	00000002 DMA1_Stream5_IRQHandler
080017f4 g     F .text	00000002 __malloc_unlock
08000f38 g     F .text	00000008 SysTick_Handler
080003cc  w    F .isr_vector	00000002 PVD_IRQHandler
080004d8 g     F .text	000000a8 initialise_monitor_handles
080003cc  w    F .isr_vector	00000002 SDIO_IRQHandler
080025f0 g     F .text	000000c6 memmove
080003cc  w    F .isr_vector	00000002 TAMP_STAMP_IRQHandler
08006a80 g       *ABS*	00000000 _sidata
08000cc0 g     F .text	00000044 PendSV_Handler
080002a4  w    F .isr_vector	00000004 NMI_Handler
08005268 g     F .text	0000004c _Balloc
08006a80 g       .ARM.exidx	00000000 __exidx_end
080003cc  w    F .isr_vector	00000002 CAN2_RX1_IRQHandler
080003cc  w    F .isr_vector	00000002 EXTI3_IRQHandler
08006218 g     F .text	0000008a .hidden __gtdf2
08000f40 g     F .text	0000000c __errno
08006a80 g       .data	00000000 __etext
20000b34 g       .noinit	00000000 _Heap_Begin
20000ae0 g     O .bss	00000004 pxCurrentTCB
080003cc  w    F .isr_vector	00000002 TIM8_TRG_COM_TIM14_IRQHandler
080003cc  w    F .isr_vector	00000002 TIM1_UP_TIM10_IRQHandler
08005a38 g     F .text	00000028 _fstat_r
20000b2c g     O .bss	00000004 errno
08006a80 g       .data	00000000 _etext
20000898 g       .bss	00000000 _sbss
080062b4 g     F .text	00000010 .hidden __aeabi_cdcmple
2001fc00 g       *ABS*	00000000 __Main_Stack_Limit
080003cc  w    F .isr_vector	00000002 TIM8_UP_TIM13_IRQHandler
080003cc  w    F .isr_vector	00000002 I2C3_ER_IRQHandler
080008ec g     F .text	00000030 trace_printf
08001620 g     F .text	00000134 memcpy
080062a4 g     F .text	00000020 .hidden __aeabi_cdrcmple
08000f4c g     F .text	0000000c _cleanup_r
08002ac4 g     F .text	00001678 _svfprintf_r
08005d28 g     F .text	00000022 .hidden __floatsidf
08006220 g     F .text	00000082 .hidden __ltdf2
08000d04 g     F .text	00000020 xPortSysTickHandler
080003cc  w    F .isr_vector	00000002 EXTI0_IRQHandler
080003cc  w    F .isr_vector	00000002 I2C2_EV_IRQHandler
08006378 g     F .text	00000000 .hidden __aeabi_uldivmod
20000b34 g       .noinit	00000000 _noinit
0800185c g     F .text	00000010 puts
080003cc  w    F .isr_vector	00000002 DMA1_Stream2_IRQHandler
080003cc  w    F .isr_vector	00000002 CAN1_RX0_IRQHandler
080003cc  w    F .isr_vector	00000002 FPU_IRQHandler
20000014 g     O .data	00000004 SystemCoreClock
08005884 g     F .text	00000054 __fpclassifyd
080003cc  w    F .isr_vector	00000002 OTG_HS_WKUP_IRQHandler
08000898  w    F .text	0000001a _fstat
08006988 g     O .text	000000c8 __mprec_tens
08000368  w    F .isr_vector	00000014 UsageFault_Handler
08001d50 g     F .text	00000020 vsnprintf
08000d24 g     F .text	00000018 vListInsertEnd
080003cc  w    F .isr_vector	00000002 CAN2_SCE_IRQHandler
20000b00 g     O .bss	00000004 __malloc_top_pad
080003cc  w    F .isr_vector	00000002 DMA2_Stream2_IRQHandler
0800084c g     F .text	0000004a _swistat
20000898 g       .bss	00000000 __bss_start__
08005d08 g     F .text	0000001e .hidden __aeabi_ui2d
08005180 g     F .text	00000008 _localeconv_r
080053e4 g     F .text	00000012 __i2b
08002224 g     F .text	00000300 __sfvwrite_r
20000000 g       .data	00000000 _sdata
080003cc  w    F .isr_vector	00000002 SPI1_IRQHandler
080063a8 g     F .text	000002e2 .hidden __udivmoddi4
08005a84 g     F .text	00000000 .hidden __aeabi_drsub
0800186c g     F .text	00000024 _sbrk_r
080003cc  w    F .isr_vector	00000002 TIM6_DAC_IRQHandler
080026b8 g     F .text	0000002c _read_r
080003cc  w    F .isr_vector	00000002 TIM1_BRK_TIM9_IRQHandler
080003cc  w    F .isr_vector	00000002 DCMI_IRQHandler
080062d8 g     F .text	00000012 .hidden __aeabi_dcmplt
08001dc0 g     F .text	00000084 _fclose_r
080003cc  w    F .isr_vector	00000002 CAN2_RX0_IRQHandler
08000cb8 g     F .text	00000006 vPortClearInterruptMask
20000afc g     O .bss	00000004 __malloc_max_sbrked_mem
08005d4c g     F .text	0000003a .hidden __extendsfdf2
08006048 g     F .text	000001d0 .hidden __aeabi_ddiv
08005a90 g     F .text	00000276 .hidden __adddf3
08006a78 g       .ARM.exidx	00000000 __exidx_start
08005df4 g     F .text	00000254 .hidden __aeabi_dmul
080003cc  w    F .isr_vector	00000002 DMA2_Stream3_IRQHandler
080008b4 g     F .text	00000038 _isatty
080026e4 g     F .text	000003de _realloc_r
00000400 g       *ABS*	00000000 __Main_Stack_Size
080002bc  w    F .isr_vector	00000060 HardFault_Handler_C
08006a50 g     O .text	00000028 __mprec_bigtens
08005d08 g     F .text	0000001e .hidden __floatunsidf
08000400 g     F .text	00000044 _sbrk
08005678 g     F .text	0000003e __mcmp
080003cc  w    F .isr_vector	00000002 USART6_IRQHandler
08000580 g     F .text	000000e0 __initialize_args
08000334  w    F .isr_vector	00000034 BusFault_Handler_C
080003cc  w    F .isr_vector	00000002 USART3_IRQHandler
20000b34 g       .bss	00000000 _ebss
0800029c g     F .isr_vector	00000006 Reset_Handler
08005348 g     F .text	00000040 __hi0bits
080003cc  w    F .isr_vector	00000002 CAN1_RX1_IRQHandler
08006328 g     F .text	0000004e .hidden __fixdfsi
080003cc  w    F .isr_vector	00000002 UART5_IRQHandler
0800099c  w    F .text	00000008 __initialize_hardware
080003cc  w    F .isr_vector	00000002 DMA2_Stream0_IRQHandler
080003cc  w    F .isr_vector	00000002 TIM4_IRQHandler
08005a90 g     F .text	00000276 .hidden __aeabi_dadd
08006220 g     F .text	00000082 .hidden __ledf2
08005528 g     F .text	000000a0 __pow5mult
08005d88 g     F .text	0000006a .hidden __aeabi_ul2d
080003cc  w    F .isr_vector	00000002 I2C1_EV_IRQHandler
080003cc  w    F .isr_vector	00000002 DMA1_Stream6_IRQHandler
080003d0 g       .inits	00000000 __data_regions_array_start
20000898 g       .data	00000000 __data_end__
08006314 g     F .text	00000012 .hidden __aeabi_dcmpgt
080003cc  w    F .isr_vector	00000002 DMA1_Stream1_IRQHandler
080003cc  w    F .isr_vector	00000002 UART4_IRQHandler
08001054 g     F .text	00000002 __sfp_lock_acquire
08002550 g     F .text	00000000 memchr
20000b34 g       .bss	00000000 __bss_end__
08002054 g     F .text	000001d0 _free_r
0800098c g     F .text	00000008 trace_write
080003cc  w    F .isr_vector	00000002 TIM3_IRQHandler
080003cc  w    F .isr_vector	00000002 RCC_IRQHandler
08006300 g     F .text	00000012 .hidden __aeabi_dcmpge
080003cc  w    F .isr_vector	00000002 TIM8_BRK_TIM12_IRQHandler
08005a8c g     F .text	0000027a .hidden __aeabi_dsub
080003cc  w    F .isr_vector	00000002 Default_Handler
20000858 g     O .data	00000004 __malloc_sbrk_base
08000188  w    F .isr_vector	00000114 _start
20000004 g     O .data	00000010 AHBPrescTable
08005d88 g     F .text	0000006a .hidden __floatundidf
08000774 g     F .text	00000008 _lseek
080055c8 g     F .text	000000ae __lshift
080058d8 g     F .text	00000100 __ssprint_r
08000d3c g     F .text	00000024 uxListRemove
080003cc  w    F .isr_vector	00000002 EXTI15_10_IRQHandler
00000100 g       *ABS*	00000000 _Minimum_Stack_Size
080003cc  w    F .isr_vector	00000002 ADC_IRQHandler
080053f8 g     F .text	00000130 __multiply
20000b04 g     O .bss	00000028 __malloc_current_mallinfo
080057cc g     F .text	000000b6 __d2b
08000eb0 g     F .text	00000088 vTaskSwitchContext
080003cc  w    F .isr_vector	00000002 DMA1_Stream7_IRQHandler
080003cc  w    F .isr_vector	00000002 TIM7_IRQHandler
08001d9c g     F .text	00000024 _close_r
080003cc  w    F .isr_vector	00000002 CAN2_TX_IRQHandler
08005d28 g     F .text	00000022 .hidden __aeabi_i2d
080003cc  w    F .isr_vector	00000002 TIM5_IRQHandler
080003cc  w    F .isr_vector	00000002 DMA2_Stream7_IRQHandler
080003cc  w    F .isr_vector	00000002 I2C3_EV_IRQHandler
0800037c  w    F .isr_vector	00000034 UsageFault_Handler_C
0800413c g     F .text	000000c4 __swsetup_r
0800668c  w    F .text	00000002 .hidden __aeabi_ldiv0
080003cc  w    F .isr_vector	00000002 EXTI9_5_IRQHandler
08006048 g     F .text	000001d0 .hidden __divdf3
080003cc  w    F .isr_vector	00000002 RTC_WKUP_IRQHandler
2000044c g     O .data	00000408 __malloc_av_
08001cdc g     F .text	00000074 _vsnprintf_r
08005df4 g     F .text	00000254 .hidden __muldf3
08001890 g     F .text	00000022 __sread
080003cc  w    F .isr_vector	00000002 ETH_WKUP_IRQHandler
080017f0 g     F .text	00000002 __malloc_lock
08001f8c g     F .text	0000002c _fflush_r
080059d8 g     F .text	0000005e _calloc_r
080003cc  w    F .isr_vector	00000002 SPI2_IRQHandler
080003cc  w    F .isr_vector	00000002 OTG_HS_EP1_IN_IRQHandler
08001754 g     F .text	0000009a memset
0800031c  w    F .isr_vector	00000004 MemManage_Handler
08000c74 g     F .text	00000010 main
20000af8 g     O .bss	00000004 __malloc_max_total_mem
080003cc  w    F .isr_vector	00000002 DMA1_Stream0_IRQHandler
080003cc  w    F .isr_vector	00000002 CAN1_TX_IRQHandler
08000c84 g     F .text	00000024 SVC_Handler
0800190c g     F .text	00000008 __sclose
08004328 g     F .text	00000e56 _dtoa_r
080010b0 g     F .text	00000570 _malloc_r
08005d98 g     F .text	0000005a .hidden __aeabi_l2d
0800077c g     F .text	00000020 _swiwrite
080003cc  w    F .isr_vector	00000002 EXTI4_IRQHandler
08001fb8 g     F .text	0000009c _malloc_trim_r
08001928 g     F .text	000002dc strcmp
08000b90 g     F .text	00000040 SystemInit
08006228 g     F .text	0000007a .hidden __nedf2
080006b8 g     F .text	000000bc _swilseek
08001d70 g     F .text	0000002c _write_r
080003cc  w    F .isr_vector	00000002 FSMC_IRQHandler
080003cc  w    F .isr_vector	00000002 ETH_IRQHandler
08000a94 g     F .text	000000fc isSemihosting
20000448 g     O .data	00000004 _impure_ptr
080007e0 g     F .text	0000001e _swiclose
08001e44 g     F .text	00000148 __sflush_r
080003cc  w    F .isr_vector	00000002 OTG_HS_EP1_OUT_IRQHandler
080003cc  w    F .isr_vector	00000002 WWDG_IRQHandler
080003e8 g       .inits	00000000 __data_regions_array_end
080003cc  w    F .isr_vector	00000002 TIM2_IRQHandler
08000000 g     O .isr_vector	00000188 __isr_vectors
080003cc  w    F .isr_vector	00000002 OTG_FS_WKUP_IRQHandler
08000d94 g     F .text	0000011c xTaskIncrementTick
080003cc  w    F .isr_vector	00000002 TIM1_TRG_COM_TIM11_IRQHandler
080003cc  w    F .isr_vector	00000002 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
20020000 g       .isr_vector	00000000 __stack
080003cc  w    F .isr_vector	00000002 EXTI1_IRQHandler
080062c4 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800079c g     F .text	00000044 _write
20000898 g       .data	00000000 _edata
080003cc  w    F .isr_vector	00000002 USART2_IRQHandler
080018b4 g     F .text	00000038 __swrite
20000854 g     O .data	00000004 __malloc_trim_threshold
0800105c g     F .text	00000052 _fwalk_reent
08000bd0 g     F .text	000000a4 SystemCoreClockUpdate
080056b8 g     F .text	00000114 __mdiff
08006328 g     F .text	0000004e .hidden __aeabi_d2iz
2000001c g     O .data	00000004 __ctype_ptr__
080003cc  w    F .isr_vector	00000002 I2C2_ER_IRQHandler
08001058 g     F .text	00000002 __sfp_lock_release
080003cc  w    F .isr_vector	00000002 DMA2_Stream1_IRQHandler
080067f4 g     O .text	00000101 _ctype_
080003e8 g       .inits	00000000 __bss_regions_array_start
08000680 g     F .text	00000036 _read
0800668c  w    F .text	00000002 .hidden __aeabi_idiv0
080003cc  w    F .isr_vector	00000002 CAN1_SCE_IRQHandler
080003cc  w    F .isr_vector	00000002 FLASH_IRQHandler
080004b8 g     F .text	00000020 _exit
080003cc  w    F .isr_vector	00000002 DMA2_Stream4_IRQHandler
08000320  w    F .isr_vector	00000014 BusFault_Handler
080003cc  w    F .isr_vector	00000002 USART1_IRQHandler
08005188 g     F .text	000000e0 __smakebuf_r
08001c00 g     F .text	000000dc strlen
080003cc  w    F .isr_vector	00000002 OTG_FS_IRQHandler
080003cc  w    F .isr_vector	00000002 SPI3_IRQHandler
080062b4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08006218 g     F .text	0000008a .hidden __gedf2
080003cc  w    F .isr_vector	00000002 DMA1_Stream4_IRQHandler
080003cc  w    F .isr_vector	00000002 I2C1_ER_IRQHandler
08005d4c g     F .text	0000003a .hidden __aeabi_f2d
08005a8c g     F .text	0000027a .hidden __subdf3
08005388 g     F .text	0000005a __lo0bits
080003cc  w    F .isr_vector	00000002 DMA2_Stream6_IRQHandler
080003cc  w    F .isr_vector	00000002 DMA1_Stream3_IRQHandler
08000660 g     F .text	00000020 _swiread
08000800 g     F .text	0000004c _close
080052c8 g     F .text	00000080 __multadd
080052b4 g     F .text	00000012 _Bfree



Disassembly of section .isr_vector:

08000000 <__isr_vectors>:
 8000000:	00 00 02 20 9d 02 00 08 a5 02 00 08 a9 02 00 08     ... ............
 8000010:	1d 03 00 08 21 03 00 08 69 03 00 08 00 00 00 00     ....!...i.......
	...
 800002c:	85 0c 00 08 b5 03 00 08 00 00 00 00 c1 0c 00 08     ................
 800003c:	39 0f 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     9...............
 800004c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800005c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800006c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800007c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800008c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800009c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 80000ac:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 80000bc:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 80000cc:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 80000dc:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 80000ec:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 80000fc:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800010c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800011c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800012c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800013c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800014c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800015c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800016c:	cd 03 00 08 cd 03 00 08 cd 03 00 08 cd 03 00 08     ................
 800017c:	00 00 00 00 cd 03 00 08 cd 03 00 08                 ............

08000188 <_start>:
_start():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:224
// For the call to work, and for the call to __initialize_hardware_early()
// to work, the reset stack must point to a valid internal RAM area.

void __attribute__ ((section(".after_vectors"),noreturn,weak))
_start (void)
{
 8000188:	b500      	push	{lr}
 800018a:	b083      	sub	sp, #12
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:235
  // enabled and require an early sequence to disable it.
  //
  // Also useful on platform with external RAM, that need to be
  // initialised before filling the BSS section.

  __initialize_hardware_early ();
 800018c:	f000 fc02 	bl	8000994 <__initialize_hardware_early>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:241

  // Use Old Style DATA and BSS section initialisation,
  // that will manage a single BSS sections.

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __data_begin_guard = DATA_GUARD_BAD_VALUE;
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <_start+0xcc>)
 8000192:	4a31      	ldr	r2, [pc, #196]	; (8000258 <_start+0xd0>)
 8000194:	6013      	str	r3, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:242
  __data_end_guard = DATA_GUARD_BAD_VALUE;
 8000196:	4a31      	ldr	r2, [pc, #196]	; (800025c <_start+0xd4>)
 8000198:	6013      	str	r3, [r2, #0]
__initialize_data():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:122
__initialize_data (unsigned int* from, unsigned int* region_begin,
		   unsigned int* region_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
 800019a:	4b31      	ldr	r3, [pc, #196]	; (8000260 <_start+0xd8>)
_start():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:242
  // Use Old Style DATA and BSS section initialisation,
  // that will manage a single BSS sections.

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __data_begin_guard = DATA_GUARD_BAD_VALUE;
  __data_end_guard = DATA_GUARD_BAD_VALUE;
 800019c:	4a31      	ldr	r2, [pc, #196]	; (8000264 <_start+0xdc>)
 800019e:	e003      	b.n	80001a8 <_start+0x20>
__initialize_data():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:124
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
  while (p < region_end)
    *p++ = *from++;
 80001a0:	6811      	ldr	r1, [r2, #0]
 80001a2:	6019      	str	r1, [r3, #0]
 80001a4:	3304      	adds	r3, #4
 80001a6:	3204      	adds	r2, #4
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:123
		   unsigned int* region_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
  while (p < region_end)
 80001a8:	492f      	ldr	r1, [pc, #188]	; (8000268 <_start+0xe0>)
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d3f8      	bcc.n	80001a0 <_start+0x18>
_start():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:264
    }

#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__data_begin_guard != DATA_BEGIN_GUARD_VALUE)
 80001ae:	4b2a      	ldr	r3, [pc, #168]	; (8000258 <_start+0xd0>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b2e      	ldr	r3, [pc, #184]	; (800026c <_start+0xe4>)
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d104      	bne.n	80001c2 <_start+0x3a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:265
      || (__data_end_guard != DATA_END_GUARD_VALUE))
 80001b8:	4b28      	ldr	r3, [pc, #160]	; (800025c <_start+0xd4>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	4b2c      	ldr	r3, [pc, #176]	; (8000270 <_start+0xe8>)
 80001be:	429a      	cmp	r2, r3
 80001c0:	d000      	beq.n	80001c4 <_start+0x3c>
 80001c2:	e7fe      	b.n	80001c2 <_start+0x3a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:273
	;
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __bss_begin_guard = BSS_GUARD_BAD_VALUE;
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <_start+0xcc>)
 80001c6:	4a2b      	ldr	r2, [pc, #172]	; (8000274 <_start+0xec>)
 80001c8:	6013      	str	r3, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:274
  __bss_end_guard = BSS_GUARD_BAD_VALUE;
 80001ca:	4a2b      	ldr	r2, [pc, #172]	; (8000278 <_start+0xf0>)
 80001cc:	6013      	str	r3, [r2, #0]
__initialize_bss():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:133
__attribute__((always_inline))
__initialize_bss (unsigned int* region_begin, unsigned int* region_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
 80001ce:	4b2b      	ldr	r3, [pc, #172]	; (800027c <_start+0xf4>)
 80001d0:	e002      	b.n	80001d8 <_start+0x50>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:135
  while (p < region_end)
    *p++ = 0;
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	3304      	adds	r3, #4
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:134
__initialize_bss (unsigned int* region_begin, unsigned int* region_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
  while (p < region_end)
 80001d8:	4a29      	ldr	r2, [pc, #164]	; (8000280 <_start+0xf8>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d3f9      	bcc.n	80001d2 <_start+0x4a>
_start():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:293
      __initialize_bss (region_begin, region_end);
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__bss_begin_guard != 0) || (__bss_end_guard != 0))
 80001de:	4b25      	ldr	r3, [pc, #148]	; (8000274 <_start+0xec>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b913      	cbnz	r3, 80001ea <_start+0x62>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:293 (discriminator 1)
 80001e4:	4b24      	ldr	r3, [pc, #144]	; (8000278 <_start+0xf0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	b103      	cbz	r3, 80001ec <_start+0x64>
 80001ea:	e7fe      	b.n	80001ea <_start+0x62>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:302
    }
#endif

  // Hook to continue the initialisations. Usually compute and store the
  // clock frequency in the global CMSIS variable, cleared above.
  __initialize_hardware ();
 80001ec:	f000 fbd6 	bl	800099c <__initialize_hardware>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:307

  // Get the argc/argv (useful in semihosting configurations).
  int argc;
  char** argv;
  __initialize_args (&argc, &argv);
 80001f0:	4669      	mov	r1, sp
 80001f2:	a801      	add	r0, sp, #4
 80001f4:	f000 f9c4 	bl	8000580 <__initialize_args>
__run_init_array():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:160
__run_init_array (void)
{
  int count;
  int i;

  count = __preinit_array_end - __preinit_array_start;
 80001f8:	4c22      	ldr	r4, [pc, #136]	; (8000284 <_start+0xfc>)
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <_start+0x100>)
 80001fc:	1b1c      	subs	r4, r3, r4
 80001fe:	10a4      	asrs	r4, r4, #2
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:161
  for (i = 0; i < count; i++)
 8000200:	2500      	movs	r5, #0
 8000202:	e004      	b.n	800020e <_start+0x86>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:162
    __preinit_array_start[i] ();
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <_start+0xfc>)
 8000206:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800020a:	4798      	blx	r3
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:161
{
  int count;
  int i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 800020c:	3501      	adds	r5, #1
 800020e:	42ac      	cmp	r4, r5
 8000210:	dcf8      	bgt.n	8000204 <_start+0x7c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:169
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init(); // DO NOT ENABE THIS!

  count = __init_array_end - __init_array_start;
 8000212:	4c1e      	ldr	r4, [pc, #120]	; (800028c <_start+0x104>)
 8000214:	4b1e      	ldr	r3, [pc, #120]	; (8000290 <_start+0x108>)
 8000216:	1b1c      	subs	r4, r3, r4
 8000218:	10a4      	asrs	r4, r4, #2
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:170
  for (i = 0; i < count; i++)
 800021a:	2500      	movs	r5, #0
 800021c:	e004      	b.n	8000228 <_start+0xa0>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:171
    __init_array_start[i] ();
 800021e:	4b1b      	ldr	r3, [pc, #108]	; (800028c <_start+0x104>)
 8000220:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8000224:	4798      	blx	r3
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:170
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init(); // DO NOT ENABE THIS!

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8000226:	3501      	adds	r5, #1
 8000228:	42ac      	cmp	r4, r5
 800022a:	dcf8      	bgt.n	800021e <_start+0x96>
_start():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:314
  // Call the standard library initialisation (mandatory for C++ to
  // execute the constructors for the static objects).
  __run_init_array ();

  // Call the main entry point, and save the exit code.
  int code = main (argc, argv);
 800022c:	9900      	ldr	r1, [sp, #0]
 800022e:	9801      	ldr	r0, [sp, #4]
 8000230:	f000 fd20 	bl	8000c74 <main>
 8000234:	4605      	mov	r5, r0
__run_fini_array():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:182
__run_fini_array (void)
{
  int count;
  int i;

  count = __fini_array_end - __fini_array_start;
 8000236:	4c17      	ldr	r4, [pc, #92]	; (8000294 <_start+0x10c>)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <_start+0x110>)
 800023a:	1b1c      	subs	r4, r3, r4
 800023c:	10a4      	asrs	r4, r4, #2
 800023e:	e004      	b.n	800024a <_start+0xc2>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:184
  for (i = count; i > 0; i--)
    __fini_array_start[i - 1] ();
 8000240:	3c01      	subs	r4, #1
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <_start+0x10c>)
 8000244:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000248:	4798      	blx	r3
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:183
{
  int count;
  int i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 800024a:	2c00      	cmp	r4, #0
 800024c:	dcf8      	bgt.n	8000240 <_start+0xb8>
_start():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_startup.c:319
  int code = main (argc, argv);

  // Run the C++ static destructors.
  __run_fini_array ();

  _exit (code);
 800024e:	4628      	mov	r0, r5
 8000250:	f000 f932 	bl	80004b8 <_exit>
 8000254:	cadebaba 	.word	0xcadebaba
 8000258:	20000000 	.word	0x20000000
 800025c:	20000894 	.word	0x20000894
 8000260:	20000000 	.word	0x20000000
 8000264:	08006a80 	.word	0x08006a80
 8000268:	20000898 	.word	0x20000898
 800026c:	12345678 	.word	0x12345678
 8000270:	98765432 	.word	0x98765432
 8000274:	20000898 	.word	0x20000898
 8000278:	20000b30 	.word	0x20000b30
 800027c:	20000898 	.word	0x20000898
 8000280:	20000b34 	.word	0x20000b34
 8000284:	080003f8 	.word	0x080003f8
 8000288:	080003f8 	.word	0x080003f8
 800028c:	080003f8 	.word	0x080003f8
 8000290:	080003f8 	.word	0x080003f8
 8000294:	080003f8 	.word	0x080003f8
 8000298:	080003f8 	.word	0x080003f8

0800029c <Reset_Handler>:
Reset_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:31

// The DEBUG version is not naked, but has a proper stack frame,
// to allow setting breakpoints at Reset_Handler.
void __attribute__ ((section(".after_vectors"),noreturn))
Reset_Handler (void)
{
 800029c:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:32
  _start ();
 800029e:	f7ff ff73 	bl	8000188 <_start>
 80002a2:	bf00      	nop

080002a4 <NMI_Handler>:
NMI_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:57

void __attribute__ ((section(".after_vectors"),weak))
NMI_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80002a4:	be00      	bkpt	0x0000
 80002a6:	e7fe      	b.n	80002a6 <NMI_Handler+0x2>

080002a8 <HardFault_Handler>:
HardFault_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:328
// Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).

void __attribute__ ((section(".after_vectors"),weak,naked))
HardFault_Handler (void)
{
  asm volatile(
 80002a8:	f01e 0f04 	tst.w	lr, #4
 80002ac:	bf0c      	ite	eq
 80002ae:	f3ef 8008 	mrseq	r0, MSP
 80002b2:	f3ef 8009 	mrsne	r0, PSP
 80002b6:	4671      	mov	r1, lr
 80002b8:	4a41      	ldr	r2, [pc, #260]	; (80003c0 <DebugMon_Handler+0xc>)
 80002ba:	4710      	bx	r2

080002bc <HardFault_Handler_C>:
HardFault_Handler_C():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:346
}

void __attribute__ ((section(".after_vectors"),weak,used))
HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                     uint32_t lr __attribute__((unused)))
{
 80002bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002c0:	b082      	sub	sp, #8
 80002c2:	4604      	mov	r4, r0
 80002c4:	4688      	mov	r8, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:348
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <HardFault_Handler_C+0x58>)
 80002c8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:349
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 80002ca:	6b9f      	ldr	r7, [r3, #56]	; 0x38
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:350
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 80002cc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:360
  // If the BKPT instruction is executed with C_DEBUGEN == 0 and MON_EN == 0,
  // it will cause the processor to enter a HardFault exception, with DEBUGEVT
  // in the Hard Fault Status register (HFSR) set to 1, and BKPT in the
  // Debug Fault Status register (DFSR) also set to 1.

  if (((SCB->DFSR & SCB_DFSR_BKPT_Msk) != 0)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	f013 0f02 	tst.w	r3, #2
 80002d4:	d00d      	beq.n	80002f2 <HardFault_Handler_C+0x36>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:361
      && ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0))
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <HardFault_Handler_C+0x58>)
 80002d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002da:	2b00      	cmp	r3, #0
 80002dc:	da09      	bge.n	80002f2 <HardFault_Handler_C+0x36>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:363
    {
      if (isSemihosting (frame, 0xBE00 + (AngelSWI & 0xFF)))
 80002de:	f64b 61ab 	movw	r1, #48811	; 0xbeab
 80002e2:	f000 fbd7 	bl	8000a94 <isSemihosting>
 80002e6:	b120      	cbz	r0, 80002f2 <HardFault_Handler_C+0x36>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:366
        {
          // Clear the exception cause in exception status.
          SCB->HFSR = SCB_HFSR_DEBUGEVT_Msk;
 80002e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HardFault_Handler_C+0x58>)
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:369

          // Continue after the BKPT
          return;
 80002f0:	e00c      	b.n	800030c <HardFault_Handler_C+0x50>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:376
    }

#endif

#if defined(TRACE)
  trace_printf ("[HardFault]\n");
 80002f2:	4809      	ldr	r0, [pc, #36]	; (8000318 <HardFault_Handler_C+0x5c>)
 80002f4:	f000 fafa 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:377
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 80002f8:	f8cd 8000 	str.w	r8, [sp]
 80002fc:	463b      	mov	r3, r7
 80002fe:	4632      	mov	r2, r6
 8000300:	4629      	mov	r1, r5
 8000302:	4620      	mov	r0, r4
 8000304:	f000 fb4e 	bl	80009a4 <dumpExceptionStack>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:381
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8000308:	be00      	bkpt	0x0000
 800030a:	e7fe      	b.n	800030a <HardFault_Handler_C+0x4e>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:386
#endif
  while (1)
    {
    }
}
 800030c:	b002      	add	sp, #8
 800030e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000312:	bf00      	nop
 8000314:	e000ed00 	.word	0xe000ed00
 8000318:	080067b8 	.word	0x080067b8

0800031c <MemManage_Handler>:
MemManage_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:452

void __attribute__ ((section(".after_vectors"),weak))
MemManage_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 800031c:	be00      	bkpt	0x0000
 800031e:	e7fe      	b.n	800031e <MemManage_Handler+0x2>

08000320 <BusFault_Handler>:
BusFault_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:462
}

void __attribute__ ((section(".after_vectors"),weak,naked))
BusFault_Handler (void)
{
  asm volatile(
 8000320:	f01e 0f04 	tst.w	lr, #4
 8000324:	bf0c      	ite	eq
 8000326:	f3ef 8008 	mrseq	r0, MSP
 800032a:	f3ef 8009 	mrsne	r0, PSP
 800032e:	4671      	mov	r1, lr
 8000330:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <DebugMon_Handler+0x10>)
 8000332:	4710      	bx	r2

08000334 <BusFault_Handler_C>:
BusFault_Handler_C():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:480
}

void __attribute__ ((section(".after_vectors"),weak,used))
BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                    uint32_t lr __attribute__((unused)))
{
 8000334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	4604      	mov	r4, r0
 800033c:	4688      	mov	r8, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:482
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <BusFault_Handler_C+0x2c>)
 8000340:	6b5e      	ldr	r6, [r3, #52]	; 0x34
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:483
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 8000342:	6b9f      	ldr	r7, [r3, #56]	; 0x38
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:484
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 8000344:	6a9d      	ldr	r5, [r3, #40]	; 0x28
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:486

  trace_printf ("[BusFault]\n");
 8000346:	4807      	ldr	r0, [pc, #28]	; (8000364 <BusFault_Handler_C+0x30>)
 8000348:	f000 fad0 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:487
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 800034c:	f8cd 8000 	str.w	r8, [sp]
 8000350:	463b      	mov	r3, r7
 8000352:	4632      	mov	r2, r6
 8000354:	4629      	mov	r1, r5
 8000356:	4620      	mov	r0, r4
 8000358:	f000 fb24 	bl	80009a4 <dumpExceptionStack>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:491
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 800035c:	be00      	bkpt	0x0000
 800035e:	e7fe      	b.n	800035e <BusFault_Handler_C+0x2a>
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	080067c8 	.word	0x080067c8

08000368 <UsageFault_Handler>:
UsageFault_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:501
}

void __attribute__ ((section(".after_vectors"),weak,naked))
UsageFault_Handler (void)
{
  asm volatile(
 8000368:	f01e 0f04 	tst.w	lr, #4
 800036c:	bf0c      	ite	eq
 800036e:	f3ef 8008 	mrseq	r0, MSP
 8000372:	f3ef 8009 	mrsne	r0, PSP
 8000376:	4671      	mov	r1, lr
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <DebugMon_Handler+0x14>)
 800037a:	4710      	bx	r2

0800037c <UsageFault_Handler_C>:
UsageFault_Handler_C():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:519
}

void __attribute__ ((section(".after_vectors"),weak,used))
UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                      uint32_t lr __attribute__((unused)))
{
 800037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000380:	b082      	sub	sp, #8
 8000382:	4604      	mov	r4, r0
 8000384:	4688      	mov	r8, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:521
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <UsageFault_Handler_C+0x2c>)
 8000388:	6b5e      	ldr	r6, [r3, #52]	; 0x34
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:522
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 800038a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:523
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 800038c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:540
    }

#endif

#if defined(TRACE)
  trace_printf ("[UsageFault]\n");
 800038e:	4807      	ldr	r0, [pc, #28]	; (80003ac <UsageFault_Handler_C+0x30>)
 8000390:	f000 faac 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:541
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 8000394:	f8cd 8000 	str.w	r8, [sp]
 8000398:	463b      	mov	r3, r7
 800039a:	4632      	mov	r2, r6
 800039c:	4629      	mov	r1, r5
 800039e:	4620      	mov	r0, r4
 80003a0:	f000 fb00 	bl	80009a4 <dumpExceptionStack>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:545
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 80003a4:	be00      	bkpt	0x0000
 80003a6:	e7fe      	b.n	80003a6 <UsageFault_Handler_C+0x2a>
 80003a8:	e000ed00 	.word	0xe000ed00
 80003ac:	080067d4 	.word	0x080067d4
SVC_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:558

void __attribute__ ((section(".after_vectors"),weak))
SVC_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80003b0:	be00      	bkpt	0x0000
 80003b2:	e7fe      	b.n	80003b2 <UsageFault_Handler_C+0x36>

080003b4 <DebugMon_Handler>:
DebugMon_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:571

void __attribute__ ((section(".after_vectors"),weak))
DebugMon_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80003b4:	be00      	bkpt	0x0000
 80003b6:	e7fe      	b.n	80003b6 <DebugMon_Handler+0x2>
PendSV_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:584

void __attribute__ ((section(".after_vectors"),weak))
PendSV_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80003b8:	be00      	bkpt	0x0000
 80003ba:	e7fe      	b.n	80003ba <DebugMon_Handler+0x6>
SysTick_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:593
    }
}

void __attribute__ ((section(".after_vectors"),weak))
SysTick_Handler (void)
{
 80003bc:	4770      	bx	lr
DebugMon_Handler():
 80003be:	0000      	.short	0x0000
 80003c0:	080002bd 	.word	0x080002bd
 80003c4:	08000335 	.word	0x08000335
 80003c8:	0800037d 	.word	0x0800037d

080003cc <ADC_IRQHandler>:
Default_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/vectors_stm32f4xx.c:1036
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
DMA1_Stream3_IRQHandler():
 80003ce:	bf00      	nop

Disassembly of section .text:

08000400 <_sbrk>:
_sbrk():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:23
// The definitions used here should be kept in sync with the
// stack definitions in the linker script.

caddr_t
_sbrk(int incr)
{
 8000400:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:30
  extern char _Heap_Limit; // Defined by the linker.

  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <_sbrk+0x38>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	b913      	cbnz	r3, 800040e <_sbrk+0xe>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:32
    {
      current_heap_end = &_Heap_Begin;
 8000408:	4a0c      	ldr	r2, [pc, #48]	; (800043c <_sbrk+0x3c>)
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <_sbrk+0x38>)
 800040c:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:35
    }

  current_block_address = current_heap_end;
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <_sbrk+0x38>)
 8000410:	681a      	ldr	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:41

  // Need to align heap to word boundary, else will get
  // hard faults on Cortex-M0. So we assume that heap starts on
  // word boundary, hence make sure we always add a multiple of
  // 4 to it.
  incr = (incr + 3) & (~3); // align value to 4
 8000412:	1cc3      	adds	r3, r0, #3
 8000414:	f023 0303 	bic.w	r3, r3, #3
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:42
  if (current_heap_end + incr > &_Heap_Limit)
 8000418:	4413      	add	r3, r2
 800041a:	4909      	ldr	r1, [pc, #36]	; (8000440 <_sbrk+0x40>)
 800041c:	428b      	cmp	r3, r1
 800041e:	d906      	bls.n	800042e <_sbrk+0x2e>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:54
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
      // Heap has overflowed
      errno = ENOMEM;
 8000420:	f000 fd8e 	bl	8000f40 <__errno>
 8000424:	230c      	movs	r3, #12
 8000426:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:55
      return (caddr_t) - 1;
 8000428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800042c:	bd08      	pop	{r3, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:59
#endif
    }

  current_heap_end += incr;
 800042e:	4902      	ldr	r1, [pc, #8]	; (8000438 <_sbrk+0x38>)
 8000430:	600b      	str	r3, [r1, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:61

  return (caddr_t) current_block_address;
 8000432:	4610      	mov	r0, r2
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_sbrk.c:62
}
 8000434:	bd08      	pop	{r3, pc}
 8000436:	bf00      	nop
 8000438:	2000089c 	.word	0x2000089c
 800043c:	20000b34 	.word	0x20000b34
 8000440:	2001fc00 	.word	0x2001fc00

08000444 <get_errno>:
get_errno():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:685
  openfiles[2].pos = 0;
}

static int
get_errno (void)
{
 8000444:	b530      	push	{r4, r5, lr}
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
static inline int
__attribute__ ((always_inline))
call_host (int reason, void* arg)
{
  int value;
  asm volatile (
 8000446:	2500      	movs	r5, #0
 8000448:	2413      	movs	r4, #19
 800044a:	4620      	mov	r0, r4
 800044c:	4629      	mov	r1, r5
 800044e:	beab      	bkpt	0x00ab
 8000450:	4604      	mov	r4, r0
get_errno():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:687
  return call_host (SEMIHOSTING_SYS_ERRNO, NULL);
}
 8000452:	4620      	mov	r0, r4
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <error>:
error():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:692

/* Set errno and return result. */
static int
error (int result)
{
 8000458:	b538      	push	{r3, r4, r5, lr}
 800045a:	4604      	mov	r4, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:693
  errno = get_errno ();
 800045c:	f000 fd70 	bl	8000f40 <__errno>
 8000460:	4605      	mov	r5, r0
 8000462:	f7ff ffef 	bl	8000444 <get_errno>
 8000466:	6028      	str	r0, [r5, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:695
  return result;
}
 8000468:	4620      	mov	r0, r4
 800046a:	bd38      	pop	{r3, r4, r5, pc}

0800046c <checkerror>:
checkerror():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:701

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
  if (result == -1)
 800046c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8000470:	d103      	bne.n	800047a <checkerror+0xe>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:700
}

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
 8000472:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:703
  if (result == -1)
    {
      return error (-1);
 8000474:	f7ff fff0 	bl	8000458 <error>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:707
    }

  return result;
}
 8000478:	bd08      	pop	{r3, pc}
 800047a:	4770      	bx	lr

0800047c <findslot>:
findslot():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:590

/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
 800047c:	b510      	push	{r4, lr}
 800047e:	4604      	mov	r4, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:591
  CHECK_INIT(_REENT);
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <findslot+0x34>)
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	b118      	cbz	r0, 800048e <findslot+0x12>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:591 (discriminator 1)
 8000486:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000488:	b90b      	cbnz	r3, 800048e <findslot+0x12>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:591 (discriminator 2)
 800048a:	f000 fddd 	bl	8001048 <__sinit>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:594

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 800048e:	2c13      	cmp	r4, #19
 8000490:	d809      	bhi.n	80004a6 <findslot+0x2a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:600
    {
      return NULL;
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <findslot+0x38>)
 8000494:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8000498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800049c:	d005      	beq.n	80004aa <findslot+0x2e>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:606
    {
      return NULL;
    }

  /* Valid. */
  return &openfiles[fd];
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <findslot+0x38>)
 80004a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80004a4:	bd10      	pop	{r4, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:596
  CHECK_INIT(_REENT);

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
    {
      return NULL;
 80004a6:	2000      	movs	r0, #0
 80004a8:	bd10      	pop	{r4, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:602
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
    {
      return NULL;
 80004aa:	2000      	movs	r0, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:607
    }

  /* Valid. */
  return &openfiles[fd];
}
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	bf00      	nop
 80004b0:	20000448 	.word	0x20000448
 80004b4:	20000924 	.word	0x20000924

080004b8 <_exit>:
_exit():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:516

// ----------------------------------------------------------------------------

void
_exit (int status)
{
 80004b8:	b500      	push	{lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:522
  /* There is only one SWI for both _exit and _kill. For _exit, call
   the SWI with the second argument set to -1, an invalid value for
   signum, so that the SWI handler can distinguish the two calls.
   Note: The RDI implementation of _kill throws away both its
   arguments.  */
  report_exception (
 80004ba:	b908      	cbnz	r0, 80004c0 <_exit+0x8>
 80004bc:	4d04      	ldr	r5, [pc, #16]	; (80004d0 <_exit+0x18>)
 80004be:	e000      	b.n	80004c2 <_exit+0xa>
 80004c0:	4d04      	ldr	r5, [pc, #16]	; (80004d4 <_exit+0x1c>)
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80 (discriminator 4)
 80004c2:	2418      	movs	r4, #24
 80004c4:	4620      	mov	r0, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	beab      	bkpt	0x00ab
 80004ca:	4604      	mov	r4, r0
 80004cc:	e7fe      	b.n	80004cc <_exit+0x14>
 80004ce:	bf00      	nop
 80004d0:	00020026 	.word	0x00020026
 80004d4:	00020023 	.word	0x00020023

080004d8 <initialise_monitor_handles>:
initialise_monitor_handles():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:634
  return i;
}

void
initialise_monitor_handles (void)
{
 80004d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004dc:	b084      	sub	sp, #16
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:649
   * different descriptor for standard error.
   */

  int volatile block[3];

  block[0] = (int) ":tt";
 80004de:	4f23      	ldr	r7, [pc, #140]	; (800056c <initialise_monitor_handles+0x94>)
 80004e0:	9701      	str	r7, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:650
  block[2] = 3; /* length of filename */
 80004e2:	2603      	movs	r6, #3
 80004e4:	9603      	str	r6, [sp, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:651
  block[1] = 0; /* mode "r" */
 80004e6:	2300      	movs	r3, #0
 80004e8:	9302      	str	r3, [sp, #8]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 80004ea:	2401      	movs	r4, #1
 80004ec:	ad01      	add	r5, sp, #4
 80004ee:	4620      	mov	r0, r4
 80004f0:	4629      	mov	r1, r5
 80004f2:	beab      	bkpt	0x00ab
 80004f4:	4680      	mov	r8, r0
initialise_monitor_handles():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:652
  monitor_stdin = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <initialise_monitor_handles+0x98>)
 80004f8:	f8c3 8000 	str.w	r8, [r3]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:654

  block[0] = (int) ":tt";
 80004fc:	9701      	str	r7, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:655
  block[2] = 3; /* length of filename */
 80004fe:	9603      	str	r6, [sp, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:656
  block[1] = 4; /* mode "w" */
 8000500:	2304      	movs	r3, #4
 8000502:	9302      	str	r3, [sp, #8]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 8000504:	4620      	mov	r0, r4
 8000506:	4629      	mov	r1, r5
 8000508:	beab      	bkpt	0x00ab
 800050a:	4680      	mov	r8, r0
initialise_monitor_handles():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:657
  monitor_stdout = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <initialise_monitor_handles+0x9c>)
 800050e:	f8c3 8000 	str.w	r8, [r3]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:659

  block[0] = (int) ":tt";
 8000512:	9701      	str	r7, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:660
  block[2] = 3; /* length of filename */
 8000514:	9603      	str	r6, [sp, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:661
  block[1] = 8; /* mode "a" */
 8000516:	2308      	movs	r3, #8
 8000518:	9302      	str	r3, [sp, #8]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 800051a:	4620      	mov	r0, r4
 800051c:	4629      	mov	r1, r5
 800051e:	beab      	bkpt	0x00ab
 8000520:	4604      	mov	r4, r0
initialise_monitor_handles():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:662
  monitor_stderr = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <initialise_monitor_handles+0xa0>)
 8000524:	601c      	str	r4, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:665

  /* If we failed to open stderr, redirect to stdout. */
  if (monitor_stderr == -1)
 8000526:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800052a:	d103      	bne.n	8000534 <initialise_monitor_handles+0x5c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:667
    {
      monitor_stderr = monitor_stdout;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <initialise_monitor_handles+0x9c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <initialise_monitor_handles+0xa0>)
 8000532:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:634 (discriminator 1)
  return i;
}

void
initialise_monitor_handles (void)
{
 8000534:	2300      	movs	r3, #0
 8000536:	e005      	b.n	8000544 <initialise_monitor_handles+0x6c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:672 (discriminator 3)
      monitor_stderr = monitor_stdout;
    }

  for (i = 0; i < MAX_OPEN_FILES; i++)
    {
      openfiles[i].handle = -1;
 8000538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <initialise_monitor_handles+0xa4>)
 800053e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:670 (discriminator 3)
  if (monitor_stderr == -1)
    {
      monitor_stderr = monitor_stdout;
    }

  for (i = 0; i < MAX_OPEN_FILES; i++)
 8000542:	3301      	adds	r3, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:670 (discriminator 1)
 8000544:	2b13      	cmp	r3, #19
 8000546:	ddf7      	ble.n	8000538 <initialise_monitor_handles+0x60>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:675
    {
      openfiles[i].handle = -1;
    }

  openfiles[0].handle = monitor_stdin;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <initialise_monitor_handles+0xa4>)
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <initialise_monitor_handles+0x98>)
 800054c:	6812      	ldr	r2, [r2, #0]
 800054e:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:676
  openfiles[0].pos = 0;
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:677
  openfiles[1].handle = monitor_stdout;
 8000554:	4907      	ldr	r1, [pc, #28]	; (8000574 <initialise_monitor_handles+0x9c>)
 8000556:	6809      	ldr	r1, [r1, #0]
 8000558:	6099      	str	r1, [r3, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:678
  openfiles[1].pos = 0;
 800055a:	60da      	str	r2, [r3, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:679
  openfiles[2].handle = monitor_stderr;
 800055c:	4906      	ldr	r1, [pc, #24]	; (8000578 <initialise_monitor_handles+0xa0>)
 800055e:	6809      	ldr	r1, [r1, #0]
 8000560:	6119      	str	r1, [r3, #16]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:680
  openfiles[2].pos = 0;
 8000562:	615a      	str	r2, [r3, #20]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:681
}
 8000564:	b004      	add	sp, #16
 8000566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800056a:	bf00      	nop
 800056c:	08006690 	.word	0x08006690
 8000570:	200008a4 	.word	0x200008a4
 8000574:	200008a0 	.word	0x200008a0
 8000578:	200008d0 	.word	0x200008d0
 800057c:	20000924 	.word	0x20000924

08000580 <__initialize_args>:
__initialize_args():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:420
  int size;
} CommandLineBlock;

void
__initialize_args (int* p_argc, char*** p_argv)
{
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	4605      	mov	r5, r0
 8000586:	460c      	mov	r4, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:433

  int argc = 0;
  int isInArgument = 0;

  CommandLineBlock cmdBlock;
  cmdBlock.pCommandLine = args_buf;
 8000588:	4b32      	ldr	r3, [pc, #200]	; (8000654 <__initialize_args+0xd4>)
 800058a:	9300      	str	r3, [sp, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:434
  cmdBlock.size = sizeof(args_buf) - 1;
 800058c:	234f      	movs	r3, #79	; 0x4f
 800058e:	9301      	str	r3, [sp, #4]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 8000590:	466f      	mov	r7, sp
 8000592:	2615      	movs	r6, #21
 8000594:	4630      	mov	r0, r6
 8000596:	4639      	mov	r1, r7
 8000598:	beab      	bkpt	0x00ab
 800059a:	4606      	mov	r6, r0
__initialize_args():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:437

  int ret = call_host (SEMIHOSTING_SYS_GET_CMDLINE, &cmdBlock);
  if (ret == 0)
 800059c:	2e00      	cmp	r6, #0
 800059e:	d146      	bne.n	800062e <__initialize_args+0xae>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:442
    {

      // In case the host send more than we can chew, limit the
      // string to our buffer.
      args_buf[ARGS_BUF_ARRAY_SIZE - 1] = '\0';
 80005a0:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <__initialize_args+0xd4>)
 80005a2:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:445

      // The command line is a null terminated string
      char* p = cmdBlock.pCommandLine;
 80005a6:	9a00      	ldr	r2, [sp, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:447

      int delim = '\0';
 80005a8:	46b6      	mov	lr, r6
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:430
  // Array of pointers to store the final argv pointers (pointing
  // in the above array).
  static char* argv_buf[ARGV_BUF_ARRAY_SIZE];

  int argc = 0;
  int isInArgument = 0;
 80005aa:	4630      	mov	r0, r6
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:450
      char* p = cmdBlock.pCommandLine;

      int delim = '\0';
      int ch;

      while ((ch = *p) != '\0')
 80005ac:	e03a      	b.n	8000624 <__initialize_args+0xa4>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:452
	{
	  if (isInArgument == 0)
 80005ae:	b9e8      	cbnz	r0, 80005ec <__initialize_args+0x6c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:454
	    {
	      if (!isblank(ch))
 80005b0:	4f29      	ldr	r7, [pc, #164]	; (8000658 <__initialize_args+0xd8>)
 80005b2:	683f      	ldr	r7, [r7, #0]
 80005b4:	fa47 f383 	sxtab	r3, r7, r3
 80005b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db03      	blt.n	80005c8 <__initialize_args+0x48>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:454 (discriminator 2)
 80005c0:	2909      	cmp	r1, #9
 80005c2:	d103      	bne.n	80005cc <__initialize_args+0x4c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:454
 80005c4:	2301      	movs	r3, #1
 80005c6:	e002      	b.n	80005ce <__initialize_args+0x4e>
 80005c8:	2301      	movs	r3, #1
 80005ca:	e000      	b.n	80005ce <__initialize_args+0x4e>
 80005cc:	2300      	movs	r3, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:454 (discriminator 6)
 80005ce:	bb43      	cbnz	r3, 8000622 <__initialize_args+0xa2>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:456
		{
		  if (argc
 80005d0:	2e08      	cmp	r6, #8
 80005d2:	dc2d      	bgt.n	8000630 <__initialize_args+0xb0>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:460
		      >= (int) ((sizeof(argv_buf) / sizeof(argv_buf[0])) - 1))
		    break;

		  if (ch == '"' || ch == '\'')
 80005d4:	2922      	cmp	r1, #34	; 0x22
 80005d6:	d001      	beq.n	80005dc <__initialize_args+0x5c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:460 (discriminator 1)
 80005d8:	2927      	cmp	r1, #39	; 0x27
 80005da:	d101      	bne.n	80005e0 <__initialize_args+0x60>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:465
		    {
		      // Remember the delimiter to search for the
		      // corresponding terminator
		      delim = ch;
		      ++p;                        // skip the delimiter
 80005dc:	3201      	adds	r2, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:464

		  if (ch == '"' || ch == '\'')
		    {
		      // Remember the delimiter to search for the
		      // corresponding terminator
		      delim = ch;
 80005de:	468e      	mov	lr, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:469
		      ++p;                        // skip the delimiter
		      ch = *p;
		    }
		  // Remember the arg beginning address
		  argv_buf[argc++] = p;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <__initialize_args+0xdc>)
 80005e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80005e6:	3601      	adds	r6, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:470
		  isInArgument = 1;
 80005e8:	2001      	movs	r0, #1
 80005ea:	e01a      	b.n	8000622 <__initialize_args+0xa2>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:473
		}
	    }
	  else if (delim != '\0')
 80005ec:	f1be 0f00 	cmp.w	lr, #0
 80005f0:	d005      	beq.n	80005fe <__initialize_args+0x7e>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:475
	    {
	      if ((ch == delim))
 80005f2:	458e      	cmp	lr, r1
 80005f4:	d115      	bne.n	8000622 <__initialize_args+0xa2>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:478
		{
		  delim = '\0';
		  *p = '\0';
 80005f6:	2000      	movs	r0, #0
 80005f8:	7010      	strb	r0, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:477
	    }
	  else if (delim != '\0')
	    {
	      if ((ch == delim))
		{
		  delim = '\0';
 80005fa:	4686      	mov	lr, r0
 80005fc:	e011      	b.n	8000622 <__initialize_args+0xa2>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:482
		  *p = '\0';
		  isInArgument = 0;
		}
	    }
	  else if (isblank(ch))
 80005fe:	4f16      	ldr	r7, [pc, #88]	; (8000658 <__initialize_args+0xd8>)
 8000600:	683f      	ldr	r7, [r7, #0]
 8000602:	fa47 f383 	sxtab	r3, r7, r3
 8000606:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db03      	blt.n	8000616 <__initialize_args+0x96>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:482 (discriminator 2)
 800060e:	2909      	cmp	r1, #9
 8000610:	d103      	bne.n	800061a <__initialize_args+0x9a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:482
 8000612:	2301      	movs	r3, #1
 8000614:	e002      	b.n	800061c <__initialize_args+0x9c>
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <__initialize_args+0x9c>
 800061a:	2300      	movs	r3, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:482 (discriminator 6)
 800061c:	b10b      	cbz	r3, 8000622 <__initialize_args+0xa2>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:485
	    {
	      delim = '\0';
	      *p = '\0';
 800061e:	2000      	movs	r0, #0
 8000620:	7010      	strb	r0, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:488
	      isInArgument = 0;
	    }
	  ++p;
 8000622:	3201      	adds	r2, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:450
      char* p = cmdBlock.pCommandLine;

      int delim = '\0';
      int ch;

      while ((ch = *p) != '\0')
 8000624:	7813      	ldrb	r3, [r2, #0]
 8000626:	b259      	sxtb	r1, r3
 8000628:	2900      	cmp	r1, #0
 800062a:	d1c0      	bne.n	80005ae <__initialize_args+0x2e>
 800062c:	e000      	b.n	8000630 <__initialize_args+0xb0>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:429

  // Array of pointers to store the final argv pointers (pointing
  // in the above array).
  static char* argv_buf[ARGV_BUF_ARRAY_SIZE];

  int argc = 0;
 800062e:	2600      	movs	r6, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:492
	    }
	  ++p;
	}
    }

  if (argc == 0)
 8000630:	b92e      	cbnz	r6, 800063e <__initialize_args+0xbe>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:495
    {
      // No args found in string, return a single empty name.
      args_buf[0] = '\0';
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <__initialize_args+0xd4>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:496
      argv_buf[0] = &args_buf[0];
 8000638:	4a08      	ldr	r2, [pc, #32]	; (800065c <__initialize_args+0xdc>)
 800063a:	6013      	str	r3, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:497
      ++argc;
 800063c:	3601      	adds	r6, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:501
    }

  // Must end the array with a null pointer.
  argv_buf[argc] = NULL;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <__initialize_args+0xdc>)
 8000640:	2200      	movs	r2, #0
 8000642:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:503

  *p_argc = argc;
 8000646:	602e      	str	r6, [r5, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:504
  *p_argv = &argv_buf[0];
 8000648:	6023      	str	r3, [r4, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:507

  // temporary here
  initialise_monitor_handles ();
 800064a:	f7ff ff45 	bl	80004d8 <initialise_monitor_handles>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:510

  return;
}
 800064e:	b003      	add	sp, #12
 8000650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000652:	bf00      	nop
 8000654:	200008d4 	.word	0x200008d4
 8000658:	2000001c 	.word	0x2000001c
 800065c:	200008a8 	.word	0x200008a8

08000660 <_swiread>:
_swiread():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:715
 ptr, is a null terminated string.
 len, is the length in bytes to read.
 Returns the number of bytes *not* written. */
int
_swiread (int fh, char* ptr, int len)
{
 8000660:	b530      	push	{r4, r5, lr}
 8000662:	b085      	sub	sp, #20
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:718
  int block[3];

  block[0] = fh;
 8000664:	9001      	str	r0, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:719
  block[1] = (int) ptr;
 8000666:	9102      	str	r1, [sp, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:720
  block[2] = len;
 8000668:	9203      	str	r2, [sp, #12]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 800066a:	ad01      	add	r5, sp, #4
 800066c:	2406      	movs	r4, #6
 800066e:	4620      	mov	r0, r4
 8000670:	4629      	mov	r1, r5
 8000672:	beab      	bkpt	0x00ab
 8000674:	4604      	mov	r4, r0
_swiread():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:722

  return checkerror (call_host (SEMIHOSTING_SYS_READ, block));
 8000676:	4620      	mov	r0, r4
 8000678:	f7ff fef8 	bl	800046c <checkerror>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:723
}
 800067c:	b005      	add	sp, #20
 800067e:	bd30      	pop	{r4, r5, pc}

08000680 <_read>:
_read():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:730
/* fd, is a valid user file handle.
 Translates the return of _swiread into
 bytes read. */
int
_read (int fd, char* ptr, int len)
{
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	460e      	mov	r6, r1
 8000684:	4615      	mov	r5, r2
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:734
  int res;
  struct fdent *pfd;

  pfd = findslot (fd);
 8000686:	f7ff fef9 	bl	800047c <findslot>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:735
  if (pfd == NULL)
 800068a:	b930      	cbnz	r0, 800069a <_read+0x1a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:737
    {
      errno = EBADF;
 800068c:	f000 fc58 	bl	8000f40 <__errno>
 8000690:	2309      	movs	r3, #9
 8000692:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:738
      return -1;
 8000694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000698:	bd70      	pop	{r4, r5, r6, pc}
 800069a:	4604      	mov	r4, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:741
    }

  res = _swiread (pfd->handle, ptr, len);
 800069c:	462a      	mov	r2, r5
 800069e:	4631      	mov	r1, r6
 80006a0:	6800      	ldr	r0, [r0, #0]
 80006a2:	f7ff ffdd 	bl	8000660 <_swiread>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:743

  if (res == -1)
 80006a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80006aa:	d003      	beq.n	80006b4 <_read+0x34>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:748
    {
      return res;
    }

  pfd->pos += len - res;
 80006ac:	1a28      	subs	r0, r5, r0
 80006ae:	6863      	ldr	r3, [r4, #4]
 80006b0:	4403      	add	r3, r0
 80006b2:	6063      	str	r3, [r4, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:753

  /* res == len is not an error,
   at least if we want feof() to work.  */
  return len - res;
}
 80006b4:	bd70      	pop	{r4, r5, r6, pc}
 80006b6:	bf00      	nop

080006b8 <_swilseek>:
_swilseek():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:758

/* fd, is a user file descriptor. */
int
_swilseek (int fd, int ptr, int dir)
{
 80006b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ba:	b083      	sub	sp, #12
 80006bc:	460c      	mov	r4, r1
 80006be:	4615      	mov	r5, r2
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:763
  int res;
  struct fdent *pfd;

  /* Valid file descriptor? */
  pfd = findslot (fd);
 80006c0:	f7ff fedc 	bl	800047c <findslot>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:764
  if (pfd == NULL)
 80006c4:	b930      	cbnz	r0, 80006d4 <_swilseek+0x1c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:766
    {
      errno = EBADF;
 80006c6:	f000 fc3b 	bl	8000f40 <__errno>
 80006ca:	2309      	movs	r3, #9
 80006cc:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:767
      return -1;
 80006ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d2:	e04d      	b.n	8000770 <_swilseek+0xb8>
 80006d4:	4606      	mov	r6, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:771
    }

  /* Valid whence? */
  if ((dir != SEEK_CUR) && (dir != SEEK_SET) && (dir != SEEK_END))
 80006d6:	2d02      	cmp	r5, #2
 80006d8:	d906      	bls.n	80006e8 <_swilseek+0x30>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:773
    {
      errno = EINVAL;
 80006da:	f000 fc31 	bl	8000f40 <__errno>
 80006de:	2316      	movs	r3, #22
 80006e0:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:774
      return -1;
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e6:	e043      	b.n	8000770 <_swilseek+0xb8>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:778
    }

  /* Convert SEEK_CUR to SEEK_SET */
  if (dir == SEEK_CUR)
 80006e8:	2d01      	cmp	r5, #1
 80006ea:	d113      	bne.n	8000714 <_swilseek+0x5c>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:780
    {
      ptr = pfd->pos + ptr;
 80006ec:	6843      	ldr	r3, [r0, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:782
      /* The resulting file offset would be negative. */
      if (ptr < 0)
 80006ee:	18e4      	adds	r4, r4, r3
 80006f0:	d50f      	bpl.n	8000712 <_swilseek+0x5a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:784
        {
          errno = EINVAL;
 80006f2:	f000 fc25 	bl	8000f40 <__errno>
 80006f6:	2316      	movs	r3, #22
 80006f8:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:785
          if ((pfd->pos > 0) && (ptr > 0))
 80006fa:	6873      	ldr	r3, [r6, #4]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	dd2c      	ble.n	800075a <_swilseek+0xa2>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:785 (discriminator 1)
 8000700:	2c00      	cmp	r4, #0
 8000702:	dd2d      	ble.n	8000760 <_swilseek+0xa8>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:787
            {
              errno = EOVERFLOW;
 8000704:	f000 fc1c 	bl	8000f40 <__errno>
 8000708:	238b      	movs	r3, #139	; 0x8b
 800070a:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:789
            }
          return -1;
 800070c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000710:	e02e      	b.n	8000770 <_swilseek+0xb8>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:791
        }
      dir = SEEK_SET;
 8000712:	2500      	movs	r5, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:795
    }

  int block[2];
  if (dir == SEEK_END)
 8000714:	2d02      	cmp	r5, #2
 8000716:	d10f      	bne.n	8000738 <_swilseek+0x80>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:797
    {
      block[0] = pfd->handle;
 8000718:	6833      	ldr	r3, [r6, #0]
 800071a:	af02      	add	r7, sp, #8
 800071c:	f847 3d08 	str.w	r3, [r7, #-8]!
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 8000720:	250c      	movs	r5, #12
 8000722:	4628      	mov	r0, r5
 8000724:	4639      	mov	r1, r7
 8000726:	beab      	bkpt	0x00ab
 8000728:	4605      	mov	r5, r0
_swilseek():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:798
      res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, block));
 800072a:	4628      	mov	r0, r5
 800072c:	f7ff fe9e 	bl	800046c <checkerror>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:799
      if (res == -1)
 8000730:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8000734:	d017      	beq.n	8000766 <_swilseek+0xae>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:803
        {
          return -1;
        }
      ptr += res;
 8000736:	4404      	add	r4, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:807
    }

  /* This code only does absolute seeks.  */
  block[0] = pfd->handle;
 8000738:	6833      	ldr	r3, [r6, #0]
 800073a:	9300      	str	r3, [sp, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:808
  block[1] = ptr;
 800073c:	9401      	str	r4, [sp, #4]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 800073e:	466f      	mov	r7, sp
 8000740:	250a      	movs	r5, #10
 8000742:	4628      	mov	r0, r5
 8000744:	4639      	mov	r1, r7
 8000746:	beab      	bkpt	0x00ab
 8000748:	4605      	mov	r5, r0
_swilseek():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:809
  res = checkerror (call_host (SEMIHOSTING_SYS_SEEK, block));
 800074a:	4628      	mov	r0, r5
 800074c:	f7ff fe8e 	bl	800046c <checkerror>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:812

  /* At this point ptr is the current file position. */
  if (res >= 0)
 8000750:	2800      	cmp	r0, #0
 8000752:	db0b      	blt.n	800076c <_swilseek+0xb4>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:814
    {
      pfd->pos = ptr;
 8000754:	6074      	str	r4, [r6, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:815
      return ptr;
 8000756:	4620      	mov	r0, r4
 8000758:	e00a      	b.n	8000770 <_swilseek+0xb8>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:789
          errno = EINVAL;
          if ((pfd->pos > 0) && (ptr > 0))
            {
              errno = EOVERFLOW;
            }
          return -1;
 800075a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800075e:	e007      	b.n	8000770 <_swilseek+0xb8>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000764:	e004      	b.n	8000770 <_swilseek+0xb8>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:801
    {
      block[0] = pfd->handle;
      res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, block));
      if (res == -1)
        {
          return -1;
 8000766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076a:	e001      	b.n	8000770 <_swilseek+0xb8>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:819
      pfd->pos = ptr;
      return ptr;
    }
  else
    {
      return -1;
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:821
    }
}
 8000770:	b003      	add	sp, #12
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000774 <_lseek>:
_lseek():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:825

int
_lseek (int fd, int ptr, int dir)
{
 8000774:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:826
  return _swilseek (fd, ptr, dir);
 8000776:	f7ff ff9f 	bl	80006b8 <_swilseek>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:827
}
 800077a:	bd08      	pop	{r3, pc}

0800077c <_swiwrite>:
_swiwrite():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:833

/* fh, is a valid internal file handle.
 Returns the number of bytes *not* written. */
int
_swiwrite (int fh, char* ptr, int len)
{
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	b085      	sub	sp, #20
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:836
  int block[3];

  block[0] = fh;
 8000780:	9001      	str	r0, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:837
  block[1] = (int) ptr;
 8000782:	9102      	str	r1, [sp, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:838
  block[2] = len;
 8000784:	9203      	str	r2, [sp, #12]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 8000786:	ad01      	add	r5, sp, #4
 8000788:	2405      	movs	r4, #5
 800078a:	4620      	mov	r0, r4
 800078c:	4629      	mov	r1, r5
 800078e:	beab      	bkpt	0x00ab
 8000790:	4604      	mov	r4, r0
_swiwrite():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:840

  return checkerror (call_host (SEMIHOSTING_SYS_WRITE, block));
 8000792:	4620      	mov	r0, r4
 8000794:	f7ff fe6a 	bl	800046c <checkerror>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:841
}
 8000798:	b005      	add	sp, #20
 800079a:	bd30      	pop	{r4, r5, pc}

0800079c <_write>:
_write():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:846

/* fd, is a user file descriptor. */
int
_write (int fd, char* ptr, int len)
{
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	460e      	mov	r6, r1
 80007a0:	4614      	mov	r4, r2
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:850
  int res;
  struct fdent *pfd;

  pfd = findslot (fd);
 80007a2:	f7ff fe6b 	bl	800047c <findslot>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:851
  if (pfd == NULL)
 80007a6:	b930      	cbnz	r0, 80007b6 <_write+0x1a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:853
    {
      errno = EBADF;
 80007a8:	f000 fbca 	bl	8000f40 <__errno>
 80007ac:	2309      	movs	r3, #9
 80007ae:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:854
      return -1;
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	4605      	mov	r5, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:857
    }

  res = _swiwrite (pfd->handle, ptr, len);
 80007b8:	4622      	mov	r2, r4
 80007ba:	4631      	mov	r1, r6
 80007bc:	6800      	ldr	r0, [r0, #0]
 80007be:	f7ff ffdd 	bl	800077c <_swiwrite>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:860

  /* Clearly an error. */
  if (res < 0)
 80007c2:	1e02      	subs	r2, r0, #0
 80007c4:	db09      	blt.n	80007da <_write+0x3e>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:865
    {
      return -1;
    }

  pfd->pos += len - res;
 80007c6:	1aa0      	subs	r0, r4, r2
 80007c8:	686b      	ldr	r3, [r5, #4]
 80007ca:	4403      	add	r3, r0
 80007cc:	606b      	str	r3, [r5, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:869

  /* We wrote 0 bytes?
   Retrieve errno just in case. */
  if ((len - res) == 0)
 80007ce:	4294      	cmp	r4, r2
 80007d0:	d105      	bne.n	80007de <_write+0x42>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:871
    {
      return error (0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fe40 	bl	8000458 <error>
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:862
  res = _swiwrite (pfd->handle, ptr, len);

  /* Clearly an error. */
  if (res < 0)
    {
      return -1;
 80007da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:875
    {
      return error (0);
    }

  return (len - res);
}
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <_swiclose>:
_swiclose():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:959
}

/* fh, is a valid internal file handle. */
int
_swiclose (int fh)
{
 80007e0:	b530      	push	{r4, r5, lr}
 80007e2:	b083      	sub	sp, #12
 80007e4:	ad02      	add	r5, sp, #8
 80007e6:	f845 0d04 	str.w	r0, [r5, #-4]!
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 80007ea:	2402      	movs	r4, #2
 80007ec:	4620      	mov	r0, r4
 80007ee:	4629      	mov	r1, r5
 80007f0:	beab      	bkpt	0x00ab
 80007f2:	4604      	mov	r4, r0
_swiclose():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:960
  return checkerror (call_host (SEMIHOSTING_SYS_CLOSE, &fh));
 80007f4:	4620      	mov	r0, r4
 80007f6:	f7ff fe39 	bl	800046c <checkerror>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:961
}
 80007fa:	b003      	add	sp, #12
 80007fc:	bd30      	pop	{r4, r5, pc}
 80007fe:	bf00      	nop

08000800 <_close>:
_close():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:966

/* fd, is a user file descriptor. */
int
_close (int fd)
{
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4604      	mov	r4, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:970
  int res;
  struct fdent *pfd;

  pfd = findslot (fd);
 8000804:	f7ff fe3a 	bl	800047c <findslot>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:971
  if (pfd == NULL)
 8000808:	b930      	cbnz	r0, 8000818 <_close+0x18>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:973
    {
      errno = EBADF;
 800080a:	f000 fb99 	bl	8000f40 <__errno>
 800080e:	2309      	movs	r3, #9
 8000810:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:974
      return -1;
 8000812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000816:	bd38      	pop	{r3, r4, r5, pc}
 8000818:	4605      	mov	r5, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:978
    }

  /* Handle stderr == stdout. */
  if ((fd == 1 || fd == 2) && (openfiles[1].handle == openfiles[2].handle))
 800081a:	3c01      	subs	r4, #1
 800081c:	2c01      	cmp	r4, #1
 800081e:	d809      	bhi.n	8000834 <_close+0x34>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:978 (discriminator 1)
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <_close+0x48>)
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	429a      	cmp	r2, r3
 8000828:	d104      	bne.n	8000834 <_close+0x34>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:980
    {
      pfd->handle = -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082e:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:981
      return 0;
 8000830:	2000      	movs	r0, #0
 8000832:	bd38      	pop	{r3, r4, r5, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:985
    }

  /* Attempt to close the handle. */
  res = _swiclose (pfd->handle);
 8000834:	6828      	ldr	r0, [r5, #0]
 8000836:	f7ff ffd3 	bl	80007e0 <_swiclose>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:988

  /* Reclaim handle? */
  if (res == 0)
 800083a:	b918      	cbnz	r0, 8000844 <_close+0x44>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:990
    {
      pfd->handle = -1;
 800083c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000840:	602a      	str	r2, [r5, #0]
 8000842:	bd38      	pop	{r3, r4, r5, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:994
    }

  return res;
}
 8000844:	bd38      	pop	{r3, r4, r5, pc}
 8000846:	bf00      	nop
 8000848:	20000924 	.word	0x20000924

0800084c <_swistat>:
_swistat():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1004
  return 1;
}

int
_swistat (int fd, struct stat* st)
{
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	460c      	mov	r4, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1008
  struct fdent *pfd;
  int res;

  pfd = findslot (fd);
 8000850:	f7ff fe14 	bl	800047c <findslot>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1009
  if (pfd == NULL)
 8000854:	b930      	cbnz	r0, 8000864 <_swistat+0x18>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1011
    {
      errno = EBADF;
 8000856:	f000 fb73 	bl	8000f40 <__errno>
 800085a:	2309      	movs	r3, #9
 800085c:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1012
      return -1;
 800085e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	4606      	mov	r6, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1017
    }

  /* Always assume a character device,
   with 1024 byte blocks. */
  st->st_mode |= S_IFCHR;
 8000866:	6863      	ldr	r3, [r4, #4]
 8000868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800086c:	6063      	str	r3, [r4, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1018
  st->st_blksize = 1024;
 800086e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000872:	62e3      	str	r3, [r4, #44]	; 0x2c
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 8000874:	250c      	movs	r5, #12
 8000876:	4628      	mov	r0, r5
 8000878:	4631      	mov	r1, r6
 800087a:	beab      	bkpt	0x00ab
 800087c:	4605      	mov	r5, r0
_swistat():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1019
  res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, &pfd->handle));
 800087e:	4628      	mov	r0, r5
 8000880:	f7ff fdf4 	bl	800046c <checkerror>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1020
  if (res == -1)
 8000884:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8000888:	d002      	beq.n	8000890 <_swistat+0x44>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1026
    {
      return -1;
    }

  /* Return the file size. */
  st->st_size = res;
 800088a:	6120      	str	r0, [r4, #16]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1027
  return 0;
 800088c:	2000      	movs	r0, #0
 800088e:	bd70      	pop	{r4, r5, r6, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1022
  st->st_mode |= S_IFCHR;
  st->st_blksize = 1024;
  res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, &pfd->handle));
  if (res == -1)
    {
      return -1;
 8000890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1028
    }

  /* Return the file size. */
  st->st_size = res;
  return 0;
}
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	bf00      	nop

08000898 <_fstat>:
_fstat():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1032

int __attribute__((weak))
_fstat (int fd, struct stat* st)
{
 8000898:	b538      	push	{r3, r4, r5, lr}
 800089a:	4605      	mov	r5, r0
 800089c:	460c      	mov	r4, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1033
  memset (st, 0, sizeof(*st));
 800089e:	223c      	movs	r2, #60	; 0x3c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4620      	mov	r0, r4
 80008a4:	f000 ff56 	bl	8001754 <memset>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1034
  return _swistat (fd, st);
 80008a8:	4621      	mov	r1, r4
 80008aa:	4628      	mov	r0, r5
 80008ac:	f7ff ffce 	bl	800084c <_swistat>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1035
}
 80008b0:	bd38      	pop	{r3, r4, r5, pc}
 80008b2:	bf00      	nop

080008b4 <_isatty>:
_isatty():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1128
  return timeval;
}

int
_isatty (int fd)
{
 80008b4:	b538      	push	{r3, r4, r5, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1132
  struct fdent *pfd;
  int tty;

  pfd = findslot (fd);
 80008b6:	f7ff fde1 	bl	800047c <findslot>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1133
  if (pfd == NULL)
 80008ba:	b928      	cbnz	r0, 80008c8 <_isatty+0x14>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1135
    {
      errno = EBADF;
 80008bc:	f000 fb40 	bl	8000f40 <__errno>
 80008c0:	2309      	movs	r3, #9
 80008c2:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1136
      return 0;
 80008c4:	2000      	movs	r0, #0
 80008c6:	bd38      	pop	{r3, r4, r5, pc}
 80008c8:	4605      	mov	r5, r0
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 80008ca:	2409      	movs	r4, #9
 80008cc:	4620      	mov	r0, r4
 80008ce:	4629      	mov	r1, r5
 80008d0:	beab      	bkpt	0x00ab
 80008d2:	4604      	mov	r4, r0
_isatty():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1141
    }

  tty = call_host (SEMIHOSTING_SYS_ISTTY, &pfd->handle);

  if (tty == 1)
 80008d4:	2c01      	cmp	r4, #1
 80008d6:	d007      	beq.n	80008e8 <_isatty+0x34>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1146
    {
      return 1;
    }

  errno = get_errno ();
 80008d8:	f000 fb32 	bl	8000f40 <__errno>
 80008dc:	4604      	mov	r4, r0
 80008de:	f7ff fdb1 	bl	8000444 <get_errno>
 80008e2:	6020      	str	r0, [r4, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1147
  return 0;
 80008e4:	2000      	movs	r0, #0
 80008e6:	bd38      	pop	{r3, r4, r5, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1143

  tty = call_host (SEMIHOSTING_SYS_ISTTY, &pfd->handle);

  if (tty == 1)
    {
      return 1;
 80008e8:	2001      	movs	r0, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/newlib/_syscalls.c:1148
    }

  errno = get_errno ();
  return 0;
}
 80008ea:	bd38      	pop	{r3, r4, r5, pc}

080008ec <trace_printf>:
trace_printf():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/Trace.c:23

// ----------------------------------------------------------------------------

int
trace_printf(const char* format, ...)
{
 80008ec:	b40f      	push	{r0, r1, r2, r3}
 80008ee:	b500      	push	{lr}
 80008f0:	b083      	sub	sp, #12
 80008f2:	ab04      	add	r3, sp, #16
 80008f4:	f853 2b04 	ldr.w	r2, [r3], #4
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/Trace.c:27
  int ret;
  va_list ap;

  va_start (ap, format);
 80008f8:	9301      	str	r3, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/Trace.c:34
  // TODO: rewrite it to no longer use newlib, it is way too heavy

  static char buf[OS_INTEGER_TRACE_PRINTF_TMP_ARRAY_SIZE];

  // Print to the local buffer
  ret = vsnprintf (buf, sizeof(buf), format, ap);
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <trace_printf+0x2c>)
 80008fe:	f001 fa27 	bl	8001d50 <vsnprintf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/Trace.c:35
  if (ret > 0)
 8000902:	2800      	cmp	r0, #0
 8000904:	dd03      	ble.n	800090e <trace_printf+0x22>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/Trace.c:38
    {
      // Transfer the buffer to the device
      ret = trace_write (buf, (size_t)ret);
 8000906:	4601      	mov	r1, r0
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <trace_printf+0x2c>)
 800090a:	f000 f83f 	bl	800098c <trace_write>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/Trace.c:43
    }

  va_end (ap);
  return ret;
}
 800090e:	b003      	add	sp, #12
 8000910:	f85d eb04 	ldr.w	lr, [sp], #4
 8000914:	b004      	add	sp, #16
 8000916:	4770      	bx	lr
 8000918:	200009c4 	.word	0x200009c4

0800091c <_trace_write_semihosting_stdout>:
_trace_write_semihosting_stdout():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:165

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	4606      	mov	r6, r0
 8000922:	460c      	mov	r4, r1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:170
  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <_trace_write_semihosting_stdout+0x68>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	b983      	cbnz	r3, 800094c <_trace_write_semihosting_stdout+0x30>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:173
    {
      // On the first call get the file handle from the host
      block[0] = ":tt"; // special filename to be used for stdin/out/err
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <_trace_write_semihosting_stdout+0x6c>)
 800092c:	9301      	str	r3, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:174
      block[1] = (void*) 4; // mode "w"
 800092e:	2304      	movs	r3, #4
 8000930:	9302      	str	r3, [sp, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:176
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
 8000932:	2303      	movs	r3, #3
 8000934:	9303      	str	r3, [sp, #12]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 8000936:	af01      	add	r7, sp, #4
 8000938:	2501      	movs	r5, #1
 800093a:	4628      	mov	r0, r5
 800093c:	4639      	mov	r1, r7
 800093e:	beab      	bkpt	0x00ab
 8000940:	4605      	mov	r5, r0
_trace_write_semihosting_stdout():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:179

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
      if (ret == -1)
 8000942:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000946:	d013      	beq.n	8000970 <_trace_write_semihosting_stdout+0x54>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:182
        return -1;

      handle = ret;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <_trace_write_semihosting_stdout+0x68>)
 800094a:	601d      	str	r5, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:185
    }

  block[0] = (void*) handle;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <_trace_write_semihosting_stdout+0x68>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	9301      	str	r3, [sp, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:186
  block[1] = (void*) buf;
 8000952:	9602      	str	r6, [sp, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:187
  block[2] = (void*) nbyte;
 8000954:	9403      	str	r4, [sp, #12]
call_host():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/arm/semihosting.h:80
 8000956:	ae01      	add	r6, sp, #4
 8000958:	2505      	movs	r5, #5
 800095a:	4628      	mov	r0, r5
 800095c:	4631      	mov	r1, r6
 800095e:	beab      	bkpt	0x00ab
 8000960:	4605      	mov	r5, r0
_trace_write_semihosting_stdout():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:193
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
 8000962:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000966:	d006      	beq.n	8000976 <_trace_write_semihosting_stdout+0x5a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:197
    return -1;

  // The compliant way of returning errors
  if (ret == (int) nbyte)
 8000968:	42a5      	cmp	r5, r4
 800096a:	d007      	beq.n	800097c <_trace_write_semihosting_stdout+0x60>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:201
    return -1;

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
 800096c:	1b60      	subs	r0, r4, r5
 800096e:	e007      	b.n	8000980 <_trace_write_semihosting_stdout+0x64>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:180
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
      if (ret == -1)
        return -1;
 8000970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000974:	e004      	b.n	8000980 <_trace_write_semihosting_stdout+0x64>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:194
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    return -1;
 8000976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800097a:	e001      	b.n	8000980 <_trace_write_semihosting_stdout+0x64>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:198

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    return -1;
 800097c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:202

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
}
 8000980:	b005      	add	sp, #20
 8000982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000984:	20000a44 	.word	0x20000a44
 8000988:	08006690 	.word	0x08006690

0800098c <trace_write>:
trace_write():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:70
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
 800098c:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:74
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
 800098e:	f7ff ffc5 	bl	800091c <_trace_write_semihosting_stdout>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/diag/trace_impl.c:80
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
 8000992:	bd08      	pop	{r3, pc}

08000994 <__initialize_hardware_early>:
__initialize_hardware_early():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/_initialize_hardware.c:36
// priority is Privileged, and the Stack is set to Main.

void
__attribute__((weak))
__initialize_hardware_early(void)
{
 8000994:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/_initialize_hardware.c:38
  // Call the CSMSIS system initialisation routine.
  SystemInit();
 8000996:	f000 f8fb 	bl	8000b90 <SystemInit>
 800099a:	bd08      	pop	{r3, pc}

0800099c <__initialize_hardware>:
__initialize_hardware():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/_initialize_hardware.c:81
// constructors.

void
__attribute__((weak))
__initialize_hardware(void)
{
 800099c:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/_initialize_hardware.c:84
  // Call the CSMSIS system clock routine to store the clock frequency
  // in the SystemCoreClock global RAM location.
  SystemCoreClockUpdate();
 800099e:	f000 f917 	bl	8000bd0 <SystemCoreClockUpdate>
 80009a2:	bd08      	pop	{r3, pc}

080009a4 <dumpExceptionStack>:
dumpExceptionStack():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:85

void
dumpExceptionStack (ExceptionStackFrame* frame,
                uint32_t cfsr, uint32_t mmfar, uint32_t bfar,
                                        uint32_t lr)
{
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	4604      	mov	r4, r0
 80009a8:	460d      	mov	r5, r1
 80009aa:	4617      	mov	r7, r2
 80009ac:	461e      	mov	r6, r3
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:86
  trace_printf ("Stack frame:\n");
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <dumpExceptionStack+0xa4>)
 80009b0:	f7ff ff9c 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:87
  trace_printf (" R0 =  %08X\n", frame->r0);
 80009b4:	6821      	ldr	r1, [r4, #0]
 80009b6:	4825      	ldr	r0, [pc, #148]	; (8000a4c <dumpExceptionStack+0xa8>)
 80009b8:	f7ff ff98 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:88
  trace_printf (" R1 =  %08X\n", frame->r1);
 80009bc:	6861      	ldr	r1, [r4, #4]
 80009be:	4824      	ldr	r0, [pc, #144]	; (8000a50 <dumpExceptionStack+0xac>)
 80009c0:	f7ff ff94 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:89
  trace_printf (" R2 =  %08X\n", frame->r2);
 80009c4:	68a1      	ldr	r1, [r4, #8]
 80009c6:	4823      	ldr	r0, [pc, #140]	; (8000a54 <dumpExceptionStack+0xb0>)
 80009c8:	f7ff ff90 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:90
  trace_printf (" R3 =  %08X\n", frame->r3);
 80009cc:	68e1      	ldr	r1, [r4, #12]
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <dumpExceptionStack+0xb4>)
 80009d0:	f7ff ff8c 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:91
  trace_printf (" R12 = %08X\n", frame->r12);
 80009d4:	6921      	ldr	r1, [r4, #16]
 80009d6:	4821      	ldr	r0, [pc, #132]	; (8000a5c <dumpExceptionStack+0xb8>)
 80009d8:	f7ff ff88 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:92
  trace_printf (" LR =  %08X\n", frame->lr);
 80009dc:	6961      	ldr	r1, [r4, #20]
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <dumpExceptionStack+0xbc>)
 80009e0:	f7ff ff84 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:93
  trace_printf (" PC =  %08X\n", frame->pc);
 80009e4:	69a1      	ldr	r1, [r4, #24]
 80009e6:	481f      	ldr	r0, [pc, #124]	; (8000a64 <dumpExceptionStack+0xc0>)
 80009e8:	f7ff ff80 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:94
  trace_printf (" PSR = %08X\n", frame->psr);
 80009ec:	69e1      	ldr	r1, [r4, #28]
 80009ee:	481e      	ldr	r0, [pc, #120]	; (8000a68 <dumpExceptionStack+0xc4>)
 80009f0:	f7ff ff7c 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:95
  trace_printf ("FSR/FAR:\n");
 80009f4:	481d      	ldr	r0, [pc, #116]	; (8000a6c <dumpExceptionStack+0xc8>)
 80009f6:	f7ff ff79 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:96
  trace_printf (" CFSR =  %08X\n", cfsr);
 80009fa:	4629      	mov	r1, r5
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <dumpExceptionStack+0xcc>)
 80009fe:	f7ff ff75 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:97
  trace_printf (" HFSR =  %08X\n", SCB->HFSR);
 8000a02:	4c1c      	ldr	r4, [pc, #112]	; (8000a74 <dumpExceptionStack+0xd0>)
 8000a04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a06:	481c      	ldr	r0, [pc, #112]	; (8000a78 <dumpExceptionStack+0xd4>)
 8000a08:	f7ff ff70 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:98
  trace_printf (" DFSR =  %08X\n", SCB->DFSR);
 8000a0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a0e:	481b      	ldr	r0, [pc, #108]	; (8000a7c <dumpExceptionStack+0xd8>)
 8000a10:	f7ff ff6c 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:99
  trace_printf (" AFSR =  %08X\n", SCB->AFSR);
 8000a14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <dumpExceptionStack+0xdc>)
 8000a18:	f7ff ff68 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:101

  if (cfsr & (1UL << 7))
 8000a1c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8000a20:	d003      	beq.n	8000a2a <dumpExceptionStack+0x86>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:103
    {
      trace_printf (" MMFAR = %08X\n", mmfar);
 8000a22:	4639      	mov	r1, r7
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <dumpExceptionStack+0xe0>)
 8000a26:	f7ff ff61 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:105
    }
  if (cfsr & (1UL << 15))
 8000a2a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 8000a2e:	d003      	beq.n	8000a38 <dumpExceptionStack+0x94>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:107
    {
      trace_printf (" BFAR =  %08X\n", bfar);
 8000a30:	4631      	mov	r1, r6
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <dumpExceptionStack+0xe4>)
 8000a34:	f7ff ff5a 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:109
    }
  trace_printf ("Misc\n");
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <dumpExceptionStack+0xe8>)
 8000a3a:	f7ff ff57 	bl	80008ec <trace_printf>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:110
  trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 8000a3e:	9906      	ldr	r1, [sp, #24]
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <dumpExceptionStack+0xec>)
 8000a42:	f7ff ff53 	bl	80008ec <trace_printf>
 8000a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a48:	0800669c 	.word	0x0800669c
 8000a4c:	080066ac 	.word	0x080066ac
 8000a50:	080066bc 	.word	0x080066bc
 8000a54:	080066cc 	.word	0x080066cc
 8000a58:	080066dc 	.word	0x080066dc
 8000a5c:	080066ec 	.word	0x080066ec
 8000a60:	080066fc 	.word	0x080066fc
 8000a64:	0800670c 	.word	0x0800670c
 8000a68:	0800671c 	.word	0x0800671c
 8000a6c:	0800672c 	.word	0x0800672c
 8000a70:	08006738 	.word	0x08006738
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	08006748 	.word	0x08006748
 8000a7c:	08006758 	.word	0x08006758
 8000a80:	08006768 	.word	0x08006768
 8000a84:	08006778 	.word	0x08006778
 8000a88:	08006788 	.word	0x08006788
 8000a8c:	08006798 	.word	0x08006798
 8000a90:	080067a0 	.word	0x080067a0

08000a94 <isSemihosting>:
isSemihosting():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:154
 * @param opCode the 16-bin word of the BKPT instruction.
 * @return 1 if the instruction was a valid semihosting call; 0 otherwise.
 */
int
isSemihosting (ExceptionStackFrame* frame, uint16_t opCode)
{
 8000a94:	b538      	push	{r3, r4, r5, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:155
  uint16_t* pw = (uint16_t*) frame->pc;
 8000a96:	6983      	ldr	r3, [r0, #24]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:156
  if (*pw == opCode)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d16e      	bne.n	8000b7c <isSemihosting+0xe8>
 8000a9e:	4604      	mov	r4, r0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:158
    {
      uint32_t r0 = frame->r0;
 8000aa0:	6803      	ldr	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:160
#if defined(OS_DEBUG_SEMIHOSTING_FAULTS) || defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
      uint32_t r1 = frame->r1;
 8000aa2:	6845      	ldr	r5, [r0, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:170

#if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
      // trace_printf ("sh r0=%d\n", r0);
#endif

      switch (r0)
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	2b30      	cmp	r3, #48	; 0x30
 8000aa8:	d86a      	bhi.n	8000b80 <isSemihosting+0xec>
 8000aaa:	e8df f003 	tbb	[pc, r3]
 8000aae:	1d41      	.short	0x1d41
 8000ab0:	2c596262 	.word	0x2c596262
 8000ab4:	1919292f 	.word	0x1919292f
 8000ab8:	19191969 	.word	0x19191969
 8000abc:	19321919 	.word	0x19321919
 8000ac0:	23196920 	.word	0x23196920
 8000ac4:	69693569 	.word	0x69693569
 8000ac8:	69696969 	.word	0x69696969
 8000acc:	69696969 	.word	0x69696969
 8000ad0:	69696969 	.word	0x69696969
 8000ad4:	69696969 	.word	0x69696969
 8000ad8:	69696969 	.word	0x69696969
 8000adc:	1969      	.short	0x1969
 8000ade:	19          	.byte	0x19
 8000adf:	00          	.byte	0x00
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:186
        case SEMIHOSTING_SYS_SEEK:
        case SEMIHOSTING_SYS_SYSTEM:
        case SEMIHOSTING_SYS_TICKFREQ:
        case SEMIHOSTING_SYS_TMPNAM:
        case SEMIHOSTING_SYS_ISTTY:
          frame->r0 = (uint32_t)-1; // the call is not successful or not supported
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae4:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:187
          break;
 8000ae6:	e044      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:190

        case SEMIHOSTING_SYS_CLOSE:
          frame->r0 = 0; // call is successful
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:191
          break;
 8000aec:	e041      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:194

        case SEMIHOSTING_SYS_ERRNO:
          frame->r0 = 0; // the value of the C library errno variable.
 8000aee:	2300      	movs	r3, #0
 8000af0:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:195
          break;
 8000af2:	e03e      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:198

        case SEMIHOSTING_SYS_HEAPINFO:
          blk[0] = 0; // heap_base
 8000af4:	2300      	movs	r3, #0
 8000af6:	602b      	str	r3, [r5, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:199
          blk[1] = 0; // heap_limit
 8000af8:	606b      	str	r3, [r5, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:200
          blk[2] = 0; // stack_base
 8000afa:	60ab      	str	r3, [r5, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:201
          blk[3] = 0; // stack_limit
 8000afc:	60eb      	str	r3, [r5, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:202
          break;
 8000afe:	e038      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:205

        case SEMIHOSTING_SYS_ISERROR:
          frame->r0 = 0; // 0 if the status word is not an error indication
 8000b00:	2300      	movs	r3, #0
 8000b02:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:206
          break;
 8000b04:	e035      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:211

        case SEMIHOSTING_SYS_READ:
          // If R0 contains the same value as word 3, the call has
          // failed and EOF is assumed.
          frame->r0 = blk[2];
 8000b06:	68ab      	ldr	r3, [r5, #8]
 8000b08:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:212
          break;
 8000b0a:	e032      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:215

        case SEMIHOSTING_SYS_READC:
          frame->r0 = '\0'; // the byte read from the console.
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:216
          break;
 8000b10:	e02f      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:219

        case SEMIHOSTING_SYS_TIME:
          frame->r0 = 0; // the number of seconds since 00:00 January 1, 1970.
 8000b12:	2300      	movs	r3, #0
 8000b14:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:220
          break;
 8000b16:	e02c      	b.n	8000b72 <isSemihosting+0xde>
__DSB():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/cmsis/core_cmInstr.h:369
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8000b18:	f3bf 8f4f 	dsb	sy
NVIC_SystemReset():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/cmsis/core_cm4.h:1669
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b1c:	4919      	ldr	r1, [pc, #100]	; (8000b84 <isSemihosting+0xf0>)
 8000b1e:	68ca      	ldr	r2, [r1, #12]
 8000b20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <isSemihosting+0xf4>)
 8000b26:	4313      	orrs	r3, r2
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/cmsis/core_cm4.h:1668
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 8000b28:	60cb      	str	r3, [r1, #12]
__DSB():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/include/cmsis/core_cmInstr.h:369
 8000b2a:	f3bf 8f4f 	dsb	sy
 8000b2e:	e7fe      	b.n	8000b2e <isSemihosting+0x9a>
isSemihosting():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:238
#define HANDLER_STDOUT  (2)
#define HANDLER_STDERR  (3)

        case SEMIHOSTING_SYS_OPEN:
          // Process only standard io/out/err and return 1/2/3
          if (strcmp ((char*) blk[0], ":tt") == 0)
 8000b30:	4916      	ldr	r1, [pc, #88]	; (8000b8c <isSemihosting+0xf8>)
 8000b32:	6828      	ldr	r0, [r5, #0]
 8000b34:	f000 fef8 	bl	8001928 <strcmp>
 8000b38:	b970      	cbnz	r0, 8000b58 <isSemihosting+0xc4>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:240
            {
              if ((blk[1] == 0))
 8000b3a:	686b      	ldr	r3, [r5, #4]
 8000b3c:	b913      	cbnz	r3, 8000b44 <isSemihosting+0xb0>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:242
                {
                  frame->r0 = HANDLER_STDIN;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	6023      	str	r3, [r4, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:243
                  break;
 8000b42:	e016      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:245
                }
              else if (blk[1] == 4)
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d102      	bne.n	8000b4e <isSemihosting+0xba>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:247
                {
                  frame->r0 = HANDLER_STDOUT;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	6023      	str	r3, [r4, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:248
                  break;
 8000b4c:	e011      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:250
                }
              else if (blk[1] == 8)
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d102      	bne.n	8000b58 <isSemihosting+0xc4>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:252
                {
                  frame->r0 = HANDLER_STDERR;
 8000b52:	2303      	movs	r3, #3
 8000b54:	6023      	str	r3, [r4, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:253
                  break;
 8000b56:	e00c      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:256
                }
            }
          frame->r0 = (uint32_t)-1; // the call is not successful or not supported
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5c:	6023      	str	r3, [r4, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:257
          break;
 8000b5e:	e008      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:261

        case SEMIHOSTING_SYS_WRITE:
          // Silently ignore writes to stdout/stderr, fail on all other handler.
          if ((blk[0] == HANDLER_STDOUT) || (blk[0] == HANDLER_STDERR))
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	3b02      	subs	r3, #2
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d802      	bhi.n	8000b6e <isSemihosting+0xda>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:267
            {
#if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
              frame->r0 = (uint32_t) blk[2]
                  - trace_write ((char*) blk[1], blk[2]);
#else
              frame->r0 = 0; // all sent, no more.
 8000b68:	2300      	movs	r3, #0
 8000b6a:	6003      	str	r3, [r0, #0]
 8000b6c:	e001      	b.n	8000b72 <isSemihosting+0xde>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:274
            }
          else
            {
              // If other handler, return the total number of bytes
              // as the number of bytes that are not written.
              frame->r0 = blk[2];
 8000b6e:	68ab      	ldr	r3, [r5, #8]
 8000b70:	6003      	str	r3, [r0, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:310
          return 0;
        }

      // Alter the PC to make the exception returns to
      // the instruction after the faulty BKPT.
      frame->pc += 2;
 8000b72:	69a3      	ldr	r3, [r4, #24]
 8000b74:	3302      	adds	r3, #2
 8000b76:	61a3      	str	r3, [r4, #24]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:311
      return 1;
 8000b78:	2001      	movs	r0, #1
 8000b7a:	bd38      	pop	{r3, r4, r5, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:313
    }
  return 0;
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	bd38      	pop	{r3, r4, r5, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:305
          break;

#endif

        default:
          return 0;
 8000b80:	2000      	movs	r0, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cortexm/exception_handlers.c:314
      // the instruction after the faulty BKPT.
      frame->pc += 2;
      return 1;
    }
  return 0;
}
 8000b82:	bd38      	pop	{r3, r4, r5, pc}
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	05fa0004 	.word	0x05fa0004
 8000b8c:	08006690 	.word	0x08006690

08000b90 <SystemInit>:
SystemInit():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:176
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <SystemInit+0x34>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	f042 0201 	orr.w	r2, r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:179

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	6099      	str	r1, [r3, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:182

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ba4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ba8:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:185

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <SystemInit+0x38>)
 8000bac:	605a      	str	r2, [r3, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:188

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bb4:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:191

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bb6:	60d9      	str	r1, [r3, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:201

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <SystemInit+0x3c>)
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	24003010 	.word	0x24003010
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <SystemCoreClockUpdate>:
SystemCoreClockUpdate():
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:246
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <SystemCoreClockUpdate+0x90>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 030c 	and.w	r3, r3, #12
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:248

  switch (tmp)
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	d007      	beq.n	8000bec <SystemCoreClockUpdate+0x1c>
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d009      	beq.n	8000bf4 <SystemCoreClockUpdate+0x24>
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d12d      	bne.n	8000c40 <SystemCoreClockUpdate+0x70>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:251
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <SystemCoreClockUpdate+0x94>)
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <SystemCoreClockUpdate+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:252
      break;
 8000bea:	e02c      	b.n	8000c46 <SystemCoreClockUpdate+0x76>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:254
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000bec:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <SystemCoreClockUpdate+0x9c>)
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <SystemCoreClockUpdate+0x98>)
 8000bf0:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:255
      break;
 8000bf2:	e028      	b.n	8000c46 <SystemCoreClockUpdate+0x76>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:261
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <SystemCoreClockUpdate+0x90>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:262
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:264
      
      if (pllsource != 0)
 8000bfe:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000c02:	d009      	beq.n	8000c18 <SystemCoreClockUpdate+0x48>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:267
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <SystemCoreClockUpdate+0x9c>)
 8000c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <SystemCoreClockUpdate+0x90>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000c12:	fb03 f202 	mul.w	r2, r3, r2
 8000c16:	e008      	b.n	8000c2a <SystemCoreClockUpdate+0x5a>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:272
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <SystemCoreClockUpdate+0x94>)
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <SystemCoreClockUpdate+0x90>)
 8000c20:	6851      	ldr	r1, [r2, #4]
 8000c22:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c26:	fb01 f203 	mul.w	r2, r1, r3
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:275
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <SystemCoreClockUpdate+0x90>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c32:	3301      	adds	r3, #1
 8000c34:	005b      	lsls	r3, r3, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:276
      SystemCoreClock = pllvco/pllp;
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <SystemCoreClockUpdate+0x98>)
 8000c3c:	6013      	str	r3, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:277
      break;
 8000c3e:	e002      	b.n	8000c46 <SystemCoreClockUpdate+0x76>
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:279
    default:
      SystemCoreClock = HSI_VALUE;
 8000c40:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <SystemCoreClockUpdate+0x94>)
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <SystemCoreClockUpdate+0x98>)
 8000c44:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:284
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemCoreClockUpdate+0x90>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <SystemCoreClockUpdate+0xa0>)
 8000c50:	5cd3      	ldrb	r3, [r2, r3]
 8000c52:	b2da      	uxtb	r2, r3
/Users/Niall/Documents/workspace/AC-401/Debug/../system/src/cmsis/system_stm32f4xx.c:286
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <SystemCoreClockUpdate+0x98>)
 8000c56:	680b      	ldr	r3, [r1, #0]
 8000c58:	40d3      	lsrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	00f42400 	.word	0x00f42400
 8000c68:	20000014 	.word	0x20000014
 8000c6c:	007a1200 	.word	0x007a1200
 8000c70:	20000004 	.word	0x20000004

08000c74 <main>:
main():
/Users/Niall/Documents/workspace/AC-401/Debug/../src/main.c:10
 * Testing the toolchain
 */
#include <stdio.h>

int main (void)
{
 8000c74:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../src/main.c:11
  puts("Hello Feabhas");
 8000c76:	4802      	ldr	r0, [pc, #8]	; (8000c80 <main+0xc>)
 8000c78:	f000 fdf0 	bl	800185c <puts>
/Users/Niall/Documents/workspace/AC-401/Debug/../src/main.c:14

  return 0;
}
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	080067e4 	.word	0x080067e4

08000c84 <SVC_Handler>:
SVC_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:246
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <pxCurrentTCBConst2>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	6808      	ldr	r0, [r1, #0]
 8000c8a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c8e:	f380 8809 	msr	PSP, r0
 8000c92:	f3bf 8f6f 	isb	sy
 8000c96:	f04f 0000 	mov.w	r0, #0
 8000c9a:	f380 8811 	msr	BASEPRI, r0
 8000c9e:	f04e 0e0d 	orr.w	lr, lr, #13
 8000ca2:	4770      	bx	lr

08000ca4 <pxCurrentTCBConst2>:
 8000ca4:	20000ae0 	.word	0x20000ae0

08000ca8 <ulPortSetInterruptMask>:
ulPortSetInterruptMask():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:411
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8000ca8:	f3ef 8011 	mrs	r0, BASEPRI
 8000cac:	f04f 0150 	mov.w	r1, #80	; 0x50
 8000cb0:	f381 8811 	msr	BASEPRI, r1
 8000cb4:	4770      	bx	lr
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:423
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 8000cb6:	2000      	movs	r0, #0

08000cb8 <vPortClearInterruptMask>:
vPortClearInterruptMask():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:428
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8000cb8:	f380 8811 	msr	BASEPRI, r0
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <PendSV_Handler>:
PendSV_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:444

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000cc0:	f3ef 8009 	mrs	r0, PSP
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <pxCurrentTCBConst>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000cd0:	6010      	str	r0, [r2, #0]
 8000cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000cd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000cda:	f380 8811 	msr	BASEPRI, r0
 8000cde:	f000 f8e7 	bl	8000eb0 <vTaskSwitchContext>
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	f380 8811 	msr	BASEPRI, r0
 8000cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	6808      	ldr	r0, [r1, #0]
 8000cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000cf6:	f380 8809 	msr	PSP, r0
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	4770      	bx	lr

08000d00 <pxCurrentTCBConst>:
 8000d00:	20000ae0 	.word	0x20000ae0

08000d04 <xPortSysTickHandler>:
xPortSysTickHandler():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:478
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000d04:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:483
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8000d06:	f7ff ffcf 	bl	8000ca8 <ulPortSetInterruptMask>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:486
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000d0a:	f000 f843 	bl	8000d94 <xTaskIncrementTick>
 8000d0e:	b118      	cbz	r0, 8000d18 <xPortSysTickHandler+0x14>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:490
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <xPortSysTickHandler+0x1c>)
 8000d16:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c:493
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff ffcd 	bl	8000cb8 <vPortClearInterruptMask>
 8000d1e:	bd08      	pop	{r3, pc}
 8000d20:	e000ed04 	.word	0xe000ed04

08000d24 <vListInsertEnd>:
vListInsertEnd():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:104
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d24:	6843      	ldr	r3, [r0, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:109

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d26:	604b      	str	r3, [r1, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:110
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	608a      	str	r2, [r1, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:111
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	6051      	str	r1, [r2, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:112
	pxIndex->pxPrevious = pxNewListItem;
 8000d30:	6099      	str	r1, [r3, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:115

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000d32:	6108      	str	r0, [r1, #16]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:117

	( pxList->uxNumberOfItems )++;
 8000d34:	6803      	ldr	r3, [r0, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	6003      	str	r3, [r0, #0]
 8000d3a:	4770      	bx	lr

08000d3c <uxListRemove>:
uxListRemove():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:183

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000d3c:	6903      	ldr	r3, [r0, #16]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:185

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d3e:	6842      	ldr	r2, [r0, #4]
 8000d40:	6881      	ldr	r1, [r0, #8]
 8000d42:	6091      	str	r1, [r2, #8]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:186
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d44:	6882      	ldr	r2, [r0, #8]
 8000d46:	6841      	ldr	r1, [r0, #4]
 8000d48:	6051      	str	r1, [r2, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:189

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d101      	bne.n	8000d54 <uxListRemove+0x18>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:191
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d50:	6882      	ldr	r2, [r0, #8]
 8000d52:	605a      	str	r2, [r3, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:198
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000d54:	2200      	movs	r2, #0
 8000d56:	6102      	str	r2, [r0, #16]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:199
	( pxList->uxNumberOfItems )--;
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	6018      	str	r0, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/list.c:202

	return pxList->uxNumberOfItems;
}
 8000d5e:	4770      	bx	lr

08000d60 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:3113

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <prvResetNextTaskUnblockTime+0x2c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b90b      	cbnz	r3, 8000d6c <prvResetNextTaskUnblockTime+0xc>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <prvResetNextTaskUnblockTime+0xe>
 8000d6c:	2300      	movs	r3, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:3113 (discriminator 4)
 8000d6e:	b123      	cbz	r3, 8000d7a <prvResetNextTaskUnblockTime+0x1a>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:3120
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <prvResetNextTaskUnblockTime+0x30>)
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	4770      	bx	lr
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:3128
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <prvResetNextTaskUnblockTime+0x2c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	68db      	ldr	r3, [r3, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:3129
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <prvResetNextTaskUnblockTime+0x30>)
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000a48 	.word	0x20000a48
 8000d90:	20000018 	.word	0x20000018

08000d94 <xTaskIncrementTick>:
xTaskIncrementTick():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1853

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1862

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <xTaskIncrementTick+0xf0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d164      	bne.n	8000e68 <xTaskIncrementTick+0xd4>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1866
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <xTaskIncrementTick+0xf4>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	3201      	adds	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1871

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8000da6:	681e      	ldr	r6, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1873

			if( xConstTickCount == ( TickType_t ) 0U )
 8000da8:	b996      	cbnz	r6, 8000dd0 <xTaskIncrementTick+0x3c>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1875
			{
				taskSWITCH_DELAYED_LISTS();
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <xTaskIncrementTick+0xf8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	b113      	cbz	r3, 8000db8 <xTaskIncrementTick+0x24>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1875 (discriminator 1)
 8000db2:	f7ff ff79 	bl	8000ca8 <ulPortSetInterruptMask>
 8000db6:	e7fe      	b.n	8000db6 <xTaskIncrementTick+0x22>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1875 (discriminator 2)
 8000db8:	4a34      	ldr	r2, [pc, #208]	; (8000e8c <xTaskIncrementTick+0xf8>)
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <xTaskIncrementTick+0xfc>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	6010      	str	r0, [r2, #0]
 8000dc2:	6019      	str	r1, [r3, #0]
 8000dc4:	4a33      	ldr	r2, [pc, #204]	; (8000e94 <xTaskIncrementTick+0x100>)
 8000dc6:	6813      	ldr	r3, [r2, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	f7ff ffc8 	bl	8000d60 <prvResetNextTaskUnblockTime>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1886

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <xTaskIncrementTick+0x104>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	429e      	cmp	r6, r3
 8000dd6:	d203      	bcs.n	8000de0 <xTaskIncrementTick+0x4c>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1856

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000dd8:	2400      	movs	r4, #0
 8000dda:	e03a      	b.n	8000e52 <xTaskIncrementTick+0xbe>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1952
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
 8000ddc:	2401      	movs	r4, #1
 8000dde:	e000      	b.n	8000de2 <xTaskIncrementTick+0x4e>
 8000de0:	2400      	movs	r4, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1890
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <xTaskIncrementTick+0xf8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b90b      	cbnz	r3, 8000dee <xTaskIncrementTick+0x5a>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <xTaskIncrementTick+0x5c>
 8000dee:	2300      	movs	r3, #0
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1890 (discriminator 4)
 8000df0:	b123      	cbz	r3, 8000dfc <xTaskIncrementTick+0x68>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1897
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8000df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <xTaskIncrementTick+0x104>)
 8000df8:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1898
						break;
 8000dfa:	e02a      	b.n	8000e52 <xTaskIncrementTick+0xbe>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1906
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <xTaskIncrementTick+0xf8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	68dd      	ldr	r5, [r3, #12]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1907
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000e04:	686b      	ldr	r3, [r5, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1909

						if( xConstTickCount < xItemValue )
 8000e06:	429e      	cmp	r6, r3
 8000e08:	d202      	bcs.n	8000e10 <xTaskIncrementTick+0x7c>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1916
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <xTaskIncrementTick+0x104>)
 8000e0c:	6013      	str	r3, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1917
							break;
 8000e0e:	e020      	b.n	8000e52 <xTaskIncrementTick+0xbe>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1925
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000e10:	1d2f      	adds	r7, r5, #4
 8000e12:	4638      	mov	r0, r7
 8000e14:	f7ff ff92 	bl	8000d3c <uxListRemove>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1929

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e18:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e1a:	b11b      	cbz	r3, 8000e24 <xTaskIncrementTick+0x90>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1931
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e1c:	f105 0018 	add.w	r0, r5, #24
 8000e20:	f7ff ff8c 	bl	8000d3c <uxListRemove>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1940
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000e24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e26:	2201      	movs	r2, #1
 8000e28:	fa02 f103 	lsl.w	r1, r2, r3
 8000e2c:	481b      	ldr	r0, [pc, #108]	; (8000e9c <xTaskIncrementTick+0x108>)
 8000e2e:	6802      	ldr	r2, [r0, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	6002      	str	r2, [r0, #0]
 8000e34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e38:	009a      	lsls	r2, r3, #2
 8000e3a:	4639      	mov	r1, r7
 8000e3c:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <xTaskIncrementTick+0x10c>)
 8000e3e:	4410      	add	r0, r2
 8000e40:	f7ff ff70 	bl	8000d24 <vListInsertEnd>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1950
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e44:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <xTaskIncrementTick+0x110>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d2c5      	bcs.n	8000ddc <xTaskIncrementTick+0x48>
 8000e50:	e7c7      	b.n	8000de2 <xTaskIncrementTick+0x4e>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1970
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <xTaskIncrementTick+0x110>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e5c:	009a      	lsls	r2, r3, #2
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <xTaskIncrementTick+0x10c>)
 8000e60:	589b      	ldr	r3, [r3, r2]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d806      	bhi.n	8000e74 <xTaskIncrementTick+0xe0>
 8000e66:	e006      	b.n	8000e76 <xTaskIncrementTick+0xe2>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1998
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <xTaskIncrementTick+0x114>)
 8000e6a:	6813      	ldr	r3, [r2, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1856

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000e70:	2400      	movs	r4, #0
 8000e72:	e000      	b.n	8000e76 <xTaskIncrementTick+0xe2>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:1972
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8000e74:	2401      	movs	r4, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2011
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <xTaskIncrementTick+0x118>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b103      	cbz	r3, 8000e7e <xTaskIncrementTick+0xea>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2013
		{
			xSwitchRequired = pdTRUE;
 8000e7c:	2401      	movs	r4, #1
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2023
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8000e7e:	4620      	mov	r0, r4
 8000e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000adc 	.word	0x20000adc
 8000e88:	20000ae8 	.word	0x20000ae8
 8000e8c:	20000a48 	.word	0x20000a48
 8000e90:	20000aec 	.word	0x20000aec
 8000e94:	20000ae4 	.word	0x20000ae4
 8000e98:	20000018 	.word	0x20000018
 8000e9c:	20000af0 	.word	0x20000af0
 8000ea0:	20000a50 	.word	0x20000a50
 8000ea4:	20000ae0 	.word	0x20000ae0
 8000ea8:	20000a4c 	.word	0x20000a4c
 8000eac:	20000af4 	.word	0x20000af4

08000eb0 <vTaskSwitchContext>:
vTaskSwitchContext():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2117

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2118
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <vTaskSwitchContext+0x74>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b11b      	cbz	r3, 8000ec0 <vTaskSwitchContext+0x10>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2122
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <vTaskSwitchContext+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2126
	}
	else
	{
		xYieldPending = pdFALSE;
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <vTaskSwitchContext+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2162
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <vTaskSwitchContext+0x7c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
ucPortCountLeadingZeros():
/Users/Niall/Documents/workspace/AC-401/Middleware/freertos_cortex_m4/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:162
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
vTaskSwitchContext():
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2162
 8000ed0:	f1c3 031f 	rsb	r3, r3, #31
 8000ed4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000ed8:	008a      	lsls	r2, r1, #2
 8000eda:	4915      	ldr	r1, [pc, #84]	; (8000f30 <vTaskSwitchContext+0x80>)
 8000edc:	588a      	ldr	r2, [r1, r2]
 8000ede:	b912      	cbnz	r2, 8000ee6 <vTaskSwitchContext+0x36>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2162 (discriminator 1)
 8000ee0:	f7ff fee2 	bl	8000ca8 <ulPortSetInterruptMask>
 8000ee4:	e7fe      	b.n	8000ee4 <vTaskSwitchContext+0x34>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2162 (discriminator 2)
 8000ee6:	4d12      	ldr	r5, [pc, #72]	; (8000f30 <vTaskSwitchContext+0x80>)
 8000ee8:	0099      	lsls	r1, r3, #2
 8000eea:	18ca      	adds	r2, r1, r3
 8000eec:	0090      	lsls	r0, r2, #2
 8000eee:	4428      	add	r0, r5
 8000ef0:	6842      	ldr	r2, [r0, #4]
 8000ef2:	6854      	ldr	r4, [r2, #4]
 8000ef4:	6044      	str	r4, [r0, #4]
 8000ef6:	4419      	add	r1, r3
 8000ef8:	008a      	lsls	r2, r1, #2
 8000efa:	3208      	adds	r2, #8
 8000efc:	442a      	add	r2, r5
 8000efe:	4294      	cmp	r4, r2
 8000f00:	d105      	bne.n	8000f0e <vTaskSwitchContext+0x5e>
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2162 (discriminator 3)
 8000f02:	6860      	ldr	r0, [r4, #4]
 8000f04:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000f08:	008a      	lsls	r2, r1, #2
 8000f0a:	442a      	add	r2, r5
 8000f0c:	6050      	str	r0, [r2, #4]
/Users/Niall/Documents/workspace/AC-401/Debug/../Middleware/freertos_cortex_m4/FreeRTOS/Source/tasks.c:2162 (discriminator 5)
 8000f0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f12:	009a      	lsls	r2, r3, #2
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <vTaskSwitchContext+0x80>)
 8000f16:	441a      	add	r2, r3
 8000f18:	6853      	ldr	r3, [r2, #4]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <vTaskSwitchContext+0x84>)
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	bd38      	pop	{r3, r4, r5, pc}
 8000f22:	bf00      	nop
 8000f24:	20000adc 	.word	0x20000adc
 8000f28:	20000af4 	.word	0x20000af4
 8000f2c:	20000af0 	.word	0x20000af0
 8000f30:	20000a50 	.word	0x20000a50
 8000f34:	20000ae0 	.word	0x20000ae0

08000f38 <SysTick_Handler>:
SysTick_Handler():
/Users/Niall/Documents/workspace/AC-401/Debug/../Drivers/timer.c:54

// ----- SysTick_Handler() ----------------------------------------------------

void
SysTick_Handler (void)
{
 8000f38:	b508      	push	{r3, lr}
/Users/Niall/Documents/workspace/AC-401/Debug/../Drivers/timer.c:58
#ifndef RTOS
  timer_tick ();
#else
  xPortSysTickHandler();
 8000f3a:	f7ff fee3 	bl	8000d04 <xPortSysTickHandler>
 8000f3e:	bd08      	pop	{r3, pc}

08000f40 <__errno>:
__errno():
 8000f40:	4b01      	ldr	r3, [pc, #4]	; (8000f48 <__errno+0x8>)
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000448 	.word	0x20000448

08000f4c <_cleanup_r>:
_cleanup_r():
 8000f4c:	4901      	ldr	r1, [pc, #4]	; (8000f54 <_cleanup_r+0x8>)
 8000f4e:	f000 b885 	b.w	800105c <_fwalk_reent>
 8000f52:	bf00      	nop
 8000f54:	08001dc1 	.word	0x08001dc1

08000f58 <__sinit.part.1>:
__sinit.part.1():
 8000f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f5c:	4b35      	ldr	r3, [pc, #212]	; (8001034 <__sinit.part.1+0xdc>)
 8000f5e:	6845      	ldr	r5, [r0, #4]
 8000f60:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000f62:	2400      	movs	r4, #0
 8000f64:	4607      	mov	r7, r0
 8000f66:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8000f72:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8000f76:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	602c      	str	r4, [r5, #0]
 8000f7e:	606c      	str	r4, [r5, #4]
 8000f80:	60ac      	str	r4, [r5, #8]
 8000f82:	666c      	str	r4, [r5, #100]	; 0x64
 8000f84:	81ec      	strh	r4, [r5, #14]
 8000f86:	612c      	str	r4, [r5, #16]
 8000f88:	616c      	str	r4, [r5, #20]
 8000f8a:	61ac      	str	r4, [r5, #24]
 8000f8c:	81ab      	strh	r3, [r5, #12]
 8000f8e:	4621      	mov	r1, r4
 8000f90:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8000f94:	2208      	movs	r2, #8
 8000f96:	f000 fbdd 	bl	8001754 <memset>
 8000f9a:	68be      	ldr	r6, [r7, #8]
 8000f9c:	f8df b098 	ldr.w	fp, [pc, #152]	; 8001038 <__sinit.part.1+0xe0>
 8000fa0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800103c <__sinit.part.1+0xe4>
 8000fa4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001040 <__sinit.part.1+0xe8>
 8000fa8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001044 <__sinit.part.1+0xec>
 8000fac:	f8c5 b020 	str.w	fp, [r5, #32]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2209      	movs	r2, #9
 8000fb4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8000fb8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8000fbc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8000fc0:	61ed      	str	r5, [r5, #28]
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	81f3      	strh	r3, [r6, #14]
 8000fc6:	81b2      	strh	r2, [r6, #12]
 8000fc8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8000fcc:	6034      	str	r4, [r6, #0]
 8000fce:	6074      	str	r4, [r6, #4]
 8000fd0:	60b4      	str	r4, [r6, #8]
 8000fd2:	6674      	str	r4, [r6, #100]	; 0x64
 8000fd4:	6134      	str	r4, [r6, #16]
 8000fd6:	6174      	str	r4, [r6, #20]
 8000fd8:	61b4      	str	r4, [r6, #24]
 8000fda:	2208      	movs	r2, #8
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	f000 fbb9 	bl	8001754 <memset>
 8000fe2:	68fd      	ldr	r5, [r7, #12]
 8000fe4:	61f6      	str	r6, [r6, #28]
 8000fe6:	2012      	movs	r0, #18
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f8c6 b020 	str.w	fp, [r6, #32]
 8000fee:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8000ff2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8000ff6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	81a8      	strh	r0, [r5, #12]
 8000ffe:	81ea      	strh	r2, [r5, #14]
 8001000:	602c      	str	r4, [r5, #0]
 8001002:	606c      	str	r4, [r5, #4]
 8001004:	60ac      	str	r4, [r5, #8]
 8001006:	666c      	str	r4, [r5, #100]	; 0x64
 8001008:	612c      	str	r4, [r5, #16]
 800100a:	616c      	str	r4, [r5, #20]
 800100c:	61ac      	str	r4, [r5, #24]
 800100e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8001012:	2208      	movs	r2, #8
 8001014:	f000 fb9e 	bl	8001754 <memset>
 8001018:	9b01      	ldr	r3, [sp, #4]
 800101a:	61ed      	str	r5, [r5, #28]
 800101c:	f8c5 b020 	str.w	fp, [r5, #32]
 8001020:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8001024:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8001028:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
 800102e:	b003      	add	sp, #12
 8001030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001034:	08000f4d 	.word	0x08000f4d
 8001038:	08001891 	.word	0x08001891
 800103c:	080018b5 	.word	0x080018b5
 8001040:	080018ed 	.word	0x080018ed
 8001044:	0800190d 	.word	0x0800190d

08001048 <__sinit>:
__sinit():
 8001048:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800104a:	b103      	cbz	r3, 800104e <__sinit+0x6>
 800104c:	4770      	bx	lr
 800104e:	f7ff bf83 	b.w	8000f58 <__sinit.part.1>
 8001052:	bf00      	nop

08001054 <__sfp_lock_acquire>:
__sfp_lock_acquire():
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__sfp_lock_release>:
__sfp_lock_release():
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <_fwalk_reent>:
_fwalk_reent():
 800105c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001060:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8001064:	d01f      	beq.n	80010a6 <_fwalk_reent+0x4a>
 8001066:	4688      	mov	r8, r1
 8001068:	4606      	mov	r6, r0
 800106a:	f04f 0900 	mov.w	r9, #0
 800106e:	687d      	ldr	r5, [r7, #4]
 8001070:	68bc      	ldr	r4, [r7, #8]
 8001072:	3d01      	subs	r5, #1
 8001074:	d411      	bmi.n	800109a <_fwalk_reent+0x3e>
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800107e:	d908      	bls.n	8001092 <_fwalk_reent+0x36>
 8001080:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001084:	3301      	adds	r3, #1
 8001086:	4621      	mov	r1, r4
 8001088:	4630      	mov	r0, r6
 800108a:	d002      	beq.n	8001092 <_fwalk_reent+0x36>
 800108c:	47c0      	blx	r8
 800108e:	ea49 0900 	orr.w	r9, r9, r0
 8001092:	1c6b      	adds	r3, r5, #1
 8001094:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001098:	d1ed      	bne.n	8001076 <_fwalk_reent+0x1a>
 800109a:	683f      	ldr	r7, [r7, #0]
 800109c:	2f00      	cmp	r7, #0
 800109e:	d1e6      	bne.n	800106e <_fwalk_reent+0x12>
 80010a0:	4648      	mov	r0, r9
 80010a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010a6:	46b9      	mov	r9, r7
 80010a8:	4648      	mov	r0, r9
 80010aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010ae:	bf00      	nop

080010b0 <_malloc_r>:
_malloc_r():
 80010b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b4:	f101 050b 	add.w	r5, r1, #11
 80010b8:	2d16      	cmp	r5, #22
 80010ba:	b083      	sub	sp, #12
 80010bc:	4606      	mov	r6, r0
 80010be:	f240 809f 	bls.w	8001200 <_malloc_r+0x150>
 80010c2:	f035 0507 	bics.w	r5, r5, #7
 80010c6:	f100 80bf 	bmi.w	8001248 <_malloc_r+0x198>
 80010ca:	42a9      	cmp	r1, r5
 80010cc:	f200 80bc 	bhi.w	8001248 <_malloc_r+0x198>
 80010d0:	f000 fb8e 	bl	80017f0 <__malloc_lock>
 80010d4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80010d8:	f0c0 829c 	bcc.w	8001614 <_malloc_r+0x564>
 80010dc:	0a6b      	lsrs	r3, r5, #9
 80010de:	f000 80ba 	beq.w	8001256 <_malloc_r+0x1a6>
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	f200 8183 	bhi.w	80013ee <_malloc_r+0x33e>
 80010e8:	09a8      	lsrs	r0, r5, #6
 80010ea:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 80010ee:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80010f2:	3038      	adds	r0, #56	; 0x38
 80010f4:	4fc4      	ldr	r7, [pc, #784]	; (8001408 <_malloc_r+0x358>)
 80010f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80010fa:	f1a3 0108 	sub.w	r1, r3, #8
 80010fe:	685c      	ldr	r4, [r3, #4]
 8001100:	42a1      	cmp	r1, r4
 8001102:	d107      	bne.n	8001114 <_malloc_r+0x64>
 8001104:	e0ac      	b.n	8001260 <_malloc_r+0x1b0>
 8001106:	2a00      	cmp	r2, #0
 8001108:	f280 80ac 	bge.w	8001264 <_malloc_r+0x1b4>
 800110c:	68e4      	ldr	r4, [r4, #12]
 800110e:	42a1      	cmp	r1, r4
 8001110:	f000 80a6 	beq.w	8001260 <_malloc_r+0x1b0>
 8001114:	6863      	ldr	r3, [r4, #4]
 8001116:	f023 0303 	bic.w	r3, r3, #3
 800111a:	1b5a      	subs	r2, r3, r5
 800111c:	2a0f      	cmp	r2, #15
 800111e:	ddf2      	ble.n	8001106 <_malloc_r+0x56>
 8001120:	49b9      	ldr	r1, [pc, #740]	; (8001408 <_malloc_r+0x358>)
 8001122:	693c      	ldr	r4, [r7, #16]
 8001124:	f101 0e08 	add.w	lr, r1, #8
 8001128:	4574      	cmp	r4, lr
 800112a:	f000 81b3 	beq.w	8001494 <_malloc_r+0x3e4>
 800112e:	6863      	ldr	r3, [r4, #4]
 8001130:	f023 0303 	bic.w	r3, r3, #3
 8001134:	1b5a      	subs	r2, r3, r5
 8001136:	2a0f      	cmp	r2, #15
 8001138:	f300 8199 	bgt.w	800146e <_malloc_r+0x3be>
 800113c:	2a00      	cmp	r2, #0
 800113e:	f8c1 e014 	str.w	lr, [r1, #20]
 8001142:	f8c1 e010 	str.w	lr, [r1, #16]
 8001146:	f280 809e 	bge.w	8001286 <_malloc_r+0x1d6>
 800114a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800114e:	f080 8167 	bcs.w	8001420 <_malloc_r+0x370>
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	f103 0c01 	add.w	ip, r3, #1
 8001158:	2201      	movs	r2, #1
 800115a:	109b      	asrs	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	684a      	ldr	r2, [r1, #4]
 8001162:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8001166:	f8c4 8008 	str.w	r8, [r4, #8]
 800116a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800116e:	431a      	orrs	r2, r3
 8001170:	f1a9 0308 	sub.w	r3, r9, #8
 8001174:	60e3      	str	r3, [r4, #12]
 8001176:	604a      	str	r2, [r1, #4]
 8001178:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800117c:	f8c8 400c 	str.w	r4, [r8, #12]
 8001180:	1083      	asrs	r3, r0, #2
 8001182:	2401      	movs	r4, #1
 8001184:	409c      	lsls	r4, r3
 8001186:	4294      	cmp	r4, r2
 8001188:	f200 808a 	bhi.w	80012a0 <_malloc_r+0x1f0>
 800118c:	4214      	tst	r4, r2
 800118e:	d106      	bne.n	800119e <_malloc_r+0xee>
 8001190:	f020 0003 	bic.w	r0, r0, #3
 8001194:	0064      	lsls	r4, r4, #1
 8001196:	4214      	tst	r4, r2
 8001198:	f100 0004 	add.w	r0, r0, #4
 800119c:	d0fa      	beq.n	8001194 <_malloc_r+0xe4>
 800119e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80011a2:	46cc      	mov	ip, r9
 80011a4:	4680      	mov	r8, r0
 80011a6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80011aa:	458c      	cmp	ip, r1
 80011ac:	d107      	bne.n	80011be <_malloc_r+0x10e>
 80011ae:	e173      	b.n	8001498 <_malloc_r+0x3e8>
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	f280 8181 	bge.w	80014b8 <_malloc_r+0x408>
 80011b6:	68c9      	ldr	r1, [r1, #12]
 80011b8:	458c      	cmp	ip, r1
 80011ba:	f000 816d 	beq.w	8001498 <_malloc_r+0x3e8>
 80011be:	684b      	ldr	r3, [r1, #4]
 80011c0:	f023 0303 	bic.w	r3, r3, #3
 80011c4:	1b5a      	subs	r2, r3, r5
 80011c6:	2a0f      	cmp	r2, #15
 80011c8:	ddf2      	ble.n	80011b0 <_malloc_r+0x100>
 80011ca:	460c      	mov	r4, r1
 80011cc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80011d0:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80011d4:	194b      	adds	r3, r1, r5
 80011d6:	f045 0501 	orr.w	r5, r5, #1
 80011da:	604d      	str	r5, [r1, #4]
 80011dc:	f042 0101 	orr.w	r1, r2, #1
 80011e0:	f8c8 c00c 	str.w	ip, [r8, #12]
 80011e4:	4630      	mov	r0, r6
 80011e6:	f8cc 8008 	str.w	r8, [ip, #8]
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	f8c3 e00c 	str.w	lr, [r3, #12]
 80011f2:	f8c3 e008 	str.w	lr, [r3, #8]
 80011f6:	6059      	str	r1, [r3, #4]
 80011f8:	509a      	str	r2, [r3, r2]
 80011fa:	f000 fafb 	bl	80017f4 <__malloc_unlock>
 80011fe:	e01f      	b.n	8001240 <_malloc_r+0x190>
 8001200:	2910      	cmp	r1, #16
 8001202:	d821      	bhi.n	8001248 <_malloc_r+0x198>
 8001204:	f000 faf4 	bl	80017f0 <__malloc_lock>
 8001208:	2510      	movs	r5, #16
 800120a:	2306      	movs	r3, #6
 800120c:	2002      	movs	r0, #2
 800120e:	4f7e      	ldr	r7, [pc, #504]	; (8001408 <_malloc_r+0x358>)
 8001210:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001214:	f1a3 0208 	sub.w	r2, r3, #8
 8001218:	685c      	ldr	r4, [r3, #4]
 800121a:	4294      	cmp	r4, r2
 800121c:	f000 8145 	beq.w	80014aa <_malloc_r+0x3fa>
 8001220:	6863      	ldr	r3, [r4, #4]
 8001222:	68e1      	ldr	r1, [r4, #12]
 8001224:	68a5      	ldr	r5, [r4, #8]
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	4423      	add	r3, r4
 800122c:	4630      	mov	r0, r6
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	60e9      	str	r1, [r5, #12]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	608d      	str	r5, [r1, #8]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	f000 fadb 	bl	80017f4 <__malloc_unlock>
 800123e:	3408      	adds	r4, #8
 8001240:	4620      	mov	r0, r4
 8001242:	b003      	add	sp, #12
 8001244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001248:	2400      	movs	r4, #0
 800124a:	230c      	movs	r3, #12
 800124c:	4620      	mov	r0, r4
 800124e:	6033      	str	r3, [r6, #0]
 8001250:	b003      	add	sp, #12
 8001252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800125c:	203f      	movs	r0, #63	; 0x3f
 800125e:	e749      	b.n	80010f4 <_malloc_r+0x44>
 8001260:	4670      	mov	r0, lr
 8001262:	e75d      	b.n	8001120 <_malloc_r+0x70>
 8001264:	4423      	add	r3, r4
 8001266:	68e1      	ldr	r1, [r4, #12]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	68a5      	ldr	r5, [r4, #8]
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	60e9      	str	r1, [r5, #12]
 8001272:	4630      	mov	r0, r6
 8001274:	608d      	str	r5, [r1, #8]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	f000 fabc 	bl	80017f4 <__malloc_unlock>
 800127c:	3408      	adds	r4, #8
 800127e:	4620      	mov	r0, r4
 8001280:	b003      	add	sp, #12
 8001282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001286:	4423      	add	r3, r4
 8001288:	4630      	mov	r0, r6
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	f000 faaf 	bl	80017f4 <__malloc_unlock>
 8001296:	3408      	adds	r4, #8
 8001298:	4620      	mov	r0, r4
 800129a:	b003      	add	sp, #12
 800129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012a0:	68bc      	ldr	r4, [r7, #8]
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	f023 0803 	bic.w	r8, r3, #3
 80012a8:	45a8      	cmp	r8, r5
 80012aa:	d304      	bcc.n	80012b6 <_malloc_r+0x206>
 80012ac:	ebc5 0308 	rsb	r3, r5, r8
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	f300 808c 	bgt.w	80013ce <_malloc_r+0x31e>
 80012b6:	4b55      	ldr	r3, [pc, #340]	; (800140c <_malloc_r+0x35c>)
 80012b8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800141c <_malloc_r+0x36c>
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f8d9 3000 	ldr.w	r3, [r9]
 80012c2:	3301      	adds	r3, #1
 80012c4:	442a      	add	r2, r5
 80012c6:	eb04 0a08 	add.w	sl, r4, r8
 80012ca:	f000 8160 	beq.w	800158e <_malloc_r+0x4de>
 80012ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012d2:	320f      	adds	r2, #15
 80012d4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80012d8:	f022 020f 	bic.w	r2, r2, #15
 80012dc:	4611      	mov	r1, r2
 80012de:	4630      	mov	r0, r6
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	f000 fac3 	bl	800186c <_sbrk_r>
 80012e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80012ea:	4683      	mov	fp, r0
 80012ec:	9a01      	ldr	r2, [sp, #4]
 80012ee:	f000 8158 	beq.w	80015a2 <_malloc_r+0x4f2>
 80012f2:	4582      	cmp	sl, r0
 80012f4:	f200 80fc 	bhi.w	80014f0 <_malloc_r+0x440>
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <_malloc_r+0x360>)
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	45da      	cmp	sl, fp
 80012fe:	4411      	add	r1, r2
 8001300:	6019      	str	r1, [r3, #0]
 8001302:	f000 8153 	beq.w	80015ac <_malloc_r+0x4fc>
 8001306:	f8d9 0000 	ldr.w	r0, [r9]
 800130a:	f8df e110 	ldr.w	lr, [pc, #272]	; 800141c <_malloc_r+0x36c>
 800130e:	3001      	adds	r0, #1
 8001310:	bf1b      	ittet	ne
 8001312:	ebca 0a0b 	rsbne	sl, sl, fp
 8001316:	4451      	addne	r1, sl
 8001318:	f8ce b000 	streq.w	fp, [lr]
 800131c:	6019      	strne	r1, [r3, #0]
 800131e:	f01b 0107 	ands.w	r1, fp, #7
 8001322:	f000 8117 	beq.w	8001554 <_malloc_r+0x4a4>
 8001326:	f1c1 0008 	rsb	r0, r1, #8
 800132a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800132e:	4483      	add	fp, r0
 8001330:	3108      	adds	r1, #8
 8001332:	445a      	add	r2, fp
 8001334:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001338:	ebc2 0901 	rsb	r9, r2, r1
 800133c:	4649      	mov	r1, r9
 800133e:	4630      	mov	r0, r6
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	f000 fa93 	bl	800186c <_sbrk_r>
 8001346:	1c43      	adds	r3, r0, #1
 8001348:	9b01      	ldr	r3, [sp, #4]
 800134a:	f000 813f 	beq.w	80015cc <_malloc_r+0x51c>
 800134e:	ebcb 0200 	rsb	r2, fp, r0
 8001352:	444a      	add	r2, r9
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	f8c7 b008 	str.w	fp, [r7, #8]
 800135e:	4449      	add	r1, r9
 8001360:	42bc      	cmp	r4, r7
 8001362:	f8cb 2004 	str.w	r2, [fp, #4]
 8001366:	6019      	str	r1, [r3, #0]
 8001368:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8001410 <_malloc_r+0x360>
 800136c:	d016      	beq.n	800139c <_malloc_r+0x2ec>
 800136e:	f1b8 0f0f 	cmp.w	r8, #15
 8001372:	f240 80fd 	bls.w	8001570 <_malloc_r+0x4c0>
 8001376:	6862      	ldr	r2, [r4, #4]
 8001378:	f1a8 030c 	sub.w	r3, r8, #12
 800137c:	f023 0307 	bic.w	r3, r3, #7
 8001380:	18e0      	adds	r0, r4, r3
 8001382:	f002 0201 	and.w	r2, r2, #1
 8001386:	f04f 0e05 	mov.w	lr, #5
 800138a:	431a      	orrs	r2, r3
 800138c:	2b0f      	cmp	r3, #15
 800138e:	6062      	str	r2, [r4, #4]
 8001390:	f8c0 e004 	str.w	lr, [r0, #4]
 8001394:	f8c0 e008 	str.w	lr, [r0, #8]
 8001398:	f200 811c 	bhi.w	80015d4 <_malloc_r+0x524>
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <_malloc_r+0x364>)
 800139e:	68bc      	ldr	r4, [r7, #8]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4291      	cmp	r1, r2
 80013a4:	bf88      	it	hi
 80013a6:	6019      	strhi	r1, [r3, #0]
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <_malloc_r+0x368>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4291      	cmp	r1, r2
 80013ae:	6862      	ldr	r2, [r4, #4]
 80013b0:	bf88      	it	hi
 80013b2:	6019      	strhi	r1, [r3, #0]
 80013b4:	f022 0203 	bic.w	r2, r2, #3
 80013b8:	4295      	cmp	r5, r2
 80013ba:	eba2 0305 	sub.w	r3, r2, r5
 80013be:	d801      	bhi.n	80013c4 <_malloc_r+0x314>
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	dc04      	bgt.n	80013ce <_malloc_r+0x31e>
 80013c4:	4630      	mov	r0, r6
 80013c6:	f000 fa15 	bl	80017f4 <__malloc_unlock>
 80013ca:	2400      	movs	r4, #0
 80013cc:	e738      	b.n	8001240 <_malloc_r+0x190>
 80013ce:	1962      	adds	r2, r4, r5
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f045 0501 	orr.w	r5, r5, #1
 80013d8:	6065      	str	r5, [r4, #4]
 80013da:	4630      	mov	r0, r6
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	6053      	str	r3, [r2, #4]
 80013e0:	f000 fa08 	bl	80017f4 <__malloc_unlock>
 80013e4:	3408      	adds	r4, #8
 80013e6:	4620      	mov	r0, r4
 80013e8:	b003      	add	sp, #12
 80013ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ee:	2b14      	cmp	r3, #20
 80013f0:	d971      	bls.n	80014d6 <_malloc_r+0x426>
 80013f2:	2b54      	cmp	r3, #84	; 0x54
 80013f4:	f200 80a4 	bhi.w	8001540 <_malloc_r+0x490>
 80013f8:	0b28      	lsrs	r0, r5, #12
 80013fa:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80013fe:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001402:	306e      	adds	r0, #110	; 0x6e
 8001404:	e676      	b.n	80010f4 <_malloc_r+0x44>
 8001406:	bf00      	nop
 8001408:	2000044c 	.word	0x2000044c
 800140c:	20000b00 	.word	0x20000b00
 8001410:	20000b04 	.word	0x20000b04
 8001414:	20000afc 	.word	0x20000afc
 8001418:	20000af8 	.word	0x20000af8
 800141c:	20000858 	.word	0x20000858
 8001420:	0a5a      	lsrs	r2, r3, #9
 8001422:	2a04      	cmp	r2, #4
 8001424:	d95e      	bls.n	80014e4 <_malloc_r+0x434>
 8001426:	2a14      	cmp	r2, #20
 8001428:	f200 80b3 	bhi.w	8001592 <_malloc_r+0x4e2>
 800142c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8001430:	0049      	lsls	r1, r1, #1
 8001432:	325b      	adds	r2, #91	; 0x5b
 8001434:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8001438:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800143c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800161c <_malloc_r+0x56c>
 8001440:	f1ac 0c08 	sub.w	ip, ip, #8
 8001444:	458c      	cmp	ip, r1
 8001446:	f000 8088 	beq.w	800155a <_malloc_r+0x4aa>
 800144a:	684a      	ldr	r2, [r1, #4]
 800144c:	f022 0203 	bic.w	r2, r2, #3
 8001450:	4293      	cmp	r3, r2
 8001452:	d202      	bcs.n	800145a <_malloc_r+0x3aa>
 8001454:	6889      	ldr	r1, [r1, #8]
 8001456:	458c      	cmp	ip, r1
 8001458:	d1f7      	bne.n	800144a <_malloc_r+0x39a>
 800145a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	f8c4 c00c 	str.w	ip, [r4, #12]
 8001464:	60a1      	str	r1, [r4, #8]
 8001466:	f8cc 4008 	str.w	r4, [ip, #8]
 800146a:	60cc      	str	r4, [r1, #12]
 800146c:	e688      	b.n	8001180 <_malloc_r+0xd0>
 800146e:	1963      	adds	r3, r4, r5
 8001470:	f042 0701 	orr.w	r7, r2, #1
 8001474:	f045 0501 	orr.w	r5, r5, #1
 8001478:	6065      	str	r5, [r4, #4]
 800147a:	4630      	mov	r0, r6
 800147c:	614b      	str	r3, [r1, #20]
 800147e:	610b      	str	r3, [r1, #16]
 8001480:	f8c3 e00c 	str.w	lr, [r3, #12]
 8001484:	f8c3 e008 	str.w	lr, [r3, #8]
 8001488:	605f      	str	r7, [r3, #4]
 800148a:	509a      	str	r2, [r3, r2]
 800148c:	3408      	adds	r4, #8
 800148e:	f000 f9b1 	bl	80017f4 <__malloc_unlock>
 8001492:	e6d5      	b.n	8001240 <_malloc_r+0x190>
 8001494:	684a      	ldr	r2, [r1, #4]
 8001496:	e673      	b.n	8001180 <_malloc_r+0xd0>
 8001498:	f108 0801 	add.w	r8, r8, #1
 800149c:	f018 0f03 	tst.w	r8, #3
 80014a0:	f10c 0c08 	add.w	ip, ip, #8
 80014a4:	f47f ae7f 	bne.w	80011a6 <_malloc_r+0xf6>
 80014a8:	e030      	b.n	800150c <_malloc_r+0x45c>
 80014aa:	68dc      	ldr	r4, [r3, #12]
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	bf08      	it	eq
 80014b0:	3002      	addeq	r0, #2
 80014b2:	f43f ae35 	beq.w	8001120 <_malloc_r+0x70>
 80014b6:	e6b3      	b.n	8001220 <_malloc_r+0x170>
 80014b8:	440b      	add	r3, r1
 80014ba:	460c      	mov	r4, r1
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	68c9      	ldr	r1, [r1, #12]
 80014c0:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	4630      	mov	r0, r6
 80014cc:	60e9      	str	r1, [r5, #12]
 80014ce:	608d      	str	r5, [r1, #8]
 80014d0:	f000 f990 	bl	80017f4 <__malloc_unlock>
 80014d4:	e6b4      	b.n	8001240 <_malloc_r+0x190>
 80014d6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80014da:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80014de:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80014e2:	e607      	b.n	80010f4 <_malloc_r+0x44>
 80014e4:	099a      	lsrs	r2, r3, #6
 80014e6:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80014ea:	0049      	lsls	r1, r1, #1
 80014ec:	3238      	adds	r2, #56	; 0x38
 80014ee:	e7a1      	b.n	8001434 <_malloc_r+0x384>
 80014f0:	42bc      	cmp	r4, r7
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <_malloc_r+0x56c>)
 80014f4:	f43f af00 	beq.w	80012f8 <_malloc_r+0x248>
 80014f8:	689c      	ldr	r4, [r3, #8]
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	f022 0203 	bic.w	r2, r2, #3
 8001500:	e75a      	b.n	80013b8 <_malloc_r+0x308>
 8001502:	f859 3908 	ldr.w	r3, [r9], #-8
 8001506:	4599      	cmp	r9, r3
 8001508:	f040 8082 	bne.w	8001610 <_malloc_r+0x560>
 800150c:	f010 0f03 	tst.w	r0, #3
 8001510:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001514:	d1f5      	bne.n	8001502 <_malloc_r+0x452>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	ea23 0304 	bic.w	r3, r3, r4
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	0064      	lsls	r4, r4, #1
 8001520:	429c      	cmp	r4, r3
 8001522:	f63f aebd 	bhi.w	80012a0 <_malloc_r+0x1f0>
 8001526:	2c00      	cmp	r4, #0
 8001528:	f43f aeba 	beq.w	80012a0 <_malloc_r+0x1f0>
 800152c:	421c      	tst	r4, r3
 800152e:	4640      	mov	r0, r8
 8001530:	f47f ae35 	bne.w	800119e <_malloc_r+0xee>
 8001534:	0064      	lsls	r4, r4, #1
 8001536:	421c      	tst	r4, r3
 8001538:	f100 0004 	add.w	r0, r0, #4
 800153c:	d0fa      	beq.n	8001534 <_malloc_r+0x484>
 800153e:	e62e      	b.n	800119e <_malloc_r+0xee>
 8001540:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001544:	d818      	bhi.n	8001578 <_malloc_r+0x4c8>
 8001546:	0be8      	lsrs	r0, r5, #15
 8001548:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800154c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001550:	3077      	adds	r0, #119	; 0x77
 8001552:	e5cf      	b.n	80010f4 <_malloc_r+0x44>
 8001554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001558:	e6eb      	b.n	8001332 <_malloc_r+0x282>
 800155a:	2101      	movs	r1, #1
 800155c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001560:	1092      	asrs	r2, r2, #2
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	431a      	orrs	r2, r3
 8001568:	f8c8 2004 	str.w	r2, [r8, #4]
 800156c:	4661      	mov	r1, ip
 800156e:	e777      	b.n	8001460 <_malloc_r+0x3b0>
 8001570:	2301      	movs	r3, #1
 8001572:	f8cb 3004 	str.w	r3, [fp, #4]
 8001576:	e725      	b.n	80013c4 <_malloc_r+0x314>
 8001578:	f240 5254 	movw	r2, #1364	; 0x554
 800157c:	4293      	cmp	r3, r2
 800157e:	d820      	bhi.n	80015c2 <_malloc_r+0x512>
 8001580:	0ca8      	lsrs	r0, r5, #18
 8001582:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8001586:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800158a:	307c      	adds	r0, #124	; 0x7c
 800158c:	e5b2      	b.n	80010f4 <_malloc_r+0x44>
 800158e:	3210      	adds	r2, #16
 8001590:	e6a4      	b.n	80012dc <_malloc_r+0x22c>
 8001592:	2a54      	cmp	r2, #84	; 0x54
 8001594:	d826      	bhi.n	80015e4 <_malloc_r+0x534>
 8001596:	0b1a      	lsrs	r2, r3, #12
 8001598:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800159c:	0049      	lsls	r1, r1, #1
 800159e:	326e      	adds	r2, #110	; 0x6e
 80015a0:	e748      	b.n	8001434 <_malloc_r+0x384>
 80015a2:	68bc      	ldr	r4, [r7, #8]
 80015a4:	6862      	ldr	r2, [r4, #4]
 80015a6:	f022 0203 	bic.w	r2, r2, #3
 80015aa:	e705      	b.n	80013b8 <_malloc_r+0x308>
 80015ac:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80015b0:	2800      	cmp	r0, #0
 80015b2:	f47f aea8 	bne.w	8001306 <_malloc_r+0x256>
 80015b6:	4442      	add	r2, r8
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	e6ec      	b.n	800139c <_malloc_r+0x2ec>
 80015c2:	23fe      	movs	r3, #254	; 0xfe
 80015c4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80015c8:	207e      	movs	r0, #126	; 0x7e
 80015ca:	e593      	b.n	80010f4 <_malloc_r+0x44>
 80015cc:	2201      	movs	r2, #1
 80015ce:	f04f 0900 	mov.w	r9, #0
 80015d2:	e6c1      	b.n	8001358 <_malloc_r+0x2a8>
 80015d4:	f104 0108 	add.w	r1, r4, #8
 80015d8:	4630      	mov	r0, r6
 80015da:	f000 fd3b 	bl	8002054 <_free_r>
 80015de:	f8d9 1000 	ldr.w	r1, [r9]
 80015e2:	e6db      	b.n	800139c <_malloc_r+0x2ec>
 80015e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80015e8:	d805      	bhi.n	80015f6 <_malloc_r+0x546>
 80015ea:	0bda      	lsrs	r2, r3, #15
 80015ec:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80015f0:	0049      	lsls	r1, r1, #1
 80015f2:	3277      	adds	r2, #119	; 0x77
 80015f4:	e71e      	b.n	8001434 <_malloc_r+0x384>
 80015f6:	f240 5154 	movw	r1, #1364	; 0x554
 80015fa:	428a      	cmp	r2, r1
 80015fc:	d805      	bhi.n	800160a <_malloc_r+0x55a>
 80015fe:	0c9a      	lsrs	r2, r3, #18
 8001600:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8001604:	0049      	lsls	r1, r1, #1
 8001606:	327c      	adds	r2, #124	; 0x7c
 8001608:	e714      	b.n	8001434 <_malloc_r+0x384>
 800160a:	21fe      	movs	r1, #254	; 0xfe
 800160c:	227e      	movs	r2, #126	; 0x7e
 800160e:	e711      	b.n	8001434 <_malloc_r+0x384>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	e784      	b.n	800151e <_malloc_r+0x46e>
 8001614:	08e8      	lsrs	r0, r5, #3
 8001616:	1c43      	adds	r3, r0, #1
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	e5f8      	b.n	800120e <_malloc_r+0x15e>
 800161c:	2000044c 	.word	0x2000044c

08001620 <memcpy>:
memcpy():
 8001620:	4684      	mov	ip, r0
 8001622:	ea41 0300 	orr.w	r3, r1, r0
 8001626:	f013 0303 	ands.w	r3, r3, #3
 800162a:	d16d      	bne.n	8001708 <memcpy+0xe8>
 800162c:	3a40      	subs	r2, #64	; 0x40
 800162e:	d341      	bcc.n	80016b4 <memcpy+0x94>
 8001630:	f851 3b04 	ldr.w	r3, [r1], #4
 8001634:	f840 3b04 	str.w	r3, [r0], #4
 8001638:	f851 3b04 	ldr.w	r3, [r1], #4
 800163c:	f840 3b04 	str.w	r3, [r0], #4
 8001640:	f851 3b04 	ldr.w	r3, [r1], #4
 8001644:	f840 3b04 	str.w	r3, [r0], #4
 8001648:	f851 3b04 	ldr.w	r3, [r1], #4
 800164c:	f840 3b04 	str.w	r3, [r0], #4
 8001650:	f851 3b04 	ldr.w	r3, [r1], #4
 8001654:	f840 3b04 	str.w	r3, [r0], #4
 8001658:	f851 3b04 	ldr.w	r3, [r1], #4
 800165c:	f840 3b04 	str.w	r3, [r0], #4
 8001660:	f851 3b04 	ldr.w	r3, [r1], #4
 8001664:	f840 3b04 	str.w	r3, [r0], #4
 8001668:	f851 3b04 	ldr.w	r3, [r1], #4
 800166c:	f840 3b04 	str.w	r3, [r0], #4
 8001670:	f851 3b04 	ldr.w	r3, [r1], #4
 8001674:	f840 3b04 	str.w	r3, [r0], #4
 8001678:	f851 3b04 	ldr.w	r3, [r1], #4
 800167c:	f840 3b04 	str.w	r3, [r0], #4
 8001680:	f851 3b04 	ldr.w	r3, [r1], #4
 8001684:	f840 3b04 	str.w	r3, [r0], #4
 8001688:	f851 3b04 	ldr.w	r3, [r1], #4
 800168c:	f840 3b04 	str.w	r3, [r0], #4
 8001690:	f851 3b04 	ldr.w	r3, [r1], #4
 8001694:	f840 3b04 	str.w	r3, [r0], #4
 8001698:	f851 3b04 	ldr.w	r3, [r1], #4
 800169c:	f840 3b04 	str.w	r3, [r0], #4
 80016a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016a4:	f840 3b04 	str.w	r3, [r0], #4
 80016a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016ac:	f840 3b04 	str.w	r3, [r0], #4
 80016b0:	3a40      	subs	r2, #64	; 0x40
 80016b2:	d2bd      	bcs.n	8001630 <memcpy+0x10>
 80016b4:	3230      	adds	r2, #48	; 0x30
 80016b6:	d311      	bcc.n	80016dc <memcpy+0xbc>
 80016b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016bc:	f840 3b04 	str.w	r3, [r0], #4
 80016c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016c4:	f840 3b04 	str.w	r3, [r0], #4
 80016c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016cc:	f840 3b04 	str.w	r3, [r0], #4
 80016d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016d4:	f840 3b04 	str.w	r3, [r0], #4
 80016d8:	3a10      	subs	r2, #16
 80016da:	d2ed      	bcs.n	80016b8 <memcpy+0x98>
 80016dc:	320c      	adds	r2, #12
 80016de:	d305      	bcc.n	80016ec <memcpy+0xcc>
 80016e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016e4:	f840 3b04 	str.w	r3, [r0], #4
 80016e8:	3a04      	subs	r2, #4
 80016ea:	d2f9      	bcs.n	80016e0 <memcpy+0xc0>
 80016ec:	3204      	adds	r2, #4
 80016ee:	d008      	beq.n	8001702 <memcpy+0xe2>
 80016f0:	07d2      	lsls	r2, r2, #31
 80016f2:	bf1c      	itt	ne
 80016f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80016f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80016fc:	d301      	bcc.n	8001702 <memcpy+0xe2>
 80016fe:	880b      	ldrh	r3, [r1, #0]
 8001700:	8003      	strh	r3, [r0, #0]
 8001702:	4660      	mov	r0, ip
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2a08      	cmp	r2, #8
 800170a:	d313      	bcc.n	8001734 <memcpy+0x114>
 800170c:	078b      	lsls	r3, r1, #30
 800170e:	d08d      	beq.n	800162c <memcpy+0xc>
 8001710:	f010 0303 	ands.w	r3, r0, #3
 8001714:	d08a      	beq.n	800162c <memcpy+0xc>
 8001716:	f1c3 0304 	rsb	r3, r3, #4
 800171a:	1ad2      	subs	r2, r2, r3
 800171c:	07db      	lsls	r3, r3, #31
 800171e:	bf1c      	itt	ne
 8001720:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001724:	f800 3b01 	strbne.w	r3, [r0], #1
 8001728:	d380      	bcc.n	800162c <memcpy+0xc>
 800172a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800172e:	f820 3b02 	strh.w	r3, [r0], #2
 8001732:	e77b      	b.n	800162c <memcpy+0xc>
 8001734:	3a04      	subs	r2, #4
 8001736:	d3d9      	bcc.n	80016ec <memcpy+0xcc>
 8001738:	3a01      	subs	r2, #1
 800173a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800173e:	f800 3b01 	strb.w	r3, [r0], #1
 8001742:	d2f9      	bcs.n	8001738 <memcpy+0x118>
 8001744:	780b      	ldrb	r3, [r1, #0]
 8001746:	7003      	strb	r3, [r0, #0]
 8001748:	784b      	ldrb	r3, [r1, #1]
 800174a:	7043      	strb	r3, [r0, #1]
 800174c:	788b      	ldrb	r3, [r1, #2]
 800174e:	7083      	strb	r3, [r0, #2]
 8001750:	4660      	mov	r0, ip
 8001752:	4770      	bx	lr

08001754 <memset>:
memset():
 8001754:	b470      	push	{r4, r5, r6}
 8001756:	0784      	lsls	r4, r0, #30
 8001758:	d046      	beq.n	80017e8 <memset+0x94>
 800175a:	1e54      	subs	r4, r2, #1
 800175c:	2a00      	cmp	r2, #0
 800175e:	d041      	beq.n	80017e4 <memset+0x90>
 8001760:	b2cd      	uxtb	r5, r1
 8001762:	4603      	mov	r3, r0
 8001764:	e002      	b.n	800176c <memset+0x18>
 8001766:	1e62      	subs	r2, r4, #1
 8001768:	b3e4      	cbz	r4, 80017e4 <memset+0x90>
 800176a:	4614      	mov	r4, r2
 800176c:	f803 5b01 	strb.w	r5, [r3], #1
 8001770:	079a      	lsls	r2, r3, #30
 8001772:	d1f8      	bne.n	8001766 <memset+0x12>
 8001774:	2c03      	cmp	r4, #3
 8001776:	d92e      	bls.n	80017d6 <memset+0x82>
 8001778:	b2cd      	uxtb	r5, r1
 800177a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800177e:	2c0f      	cmp	r4, #15
 8001780:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001784:	d919      	bls.n	80017ba <memset+0x66>
 8001786:	f103 0210 	add.w	r2, r3, #16
 800178a:	4626      	mov	r6, r4
 800178c:	3e10      	subs	r6, #16
 800178e:	2e0f      	cmp	r6, #15
 8001790:	f842 5c10 	str.w	r5, [r2, #-16]
 8001794:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001798:	f842 5c08 	str.w	r5, [r2, #-8]
 800179c:	f842 5c04 	str.w	r5, [r2, #-4]
 80017a0:	f102 0210 	add.w	r2, r2, #16
 80017a4:	d8f2      	bhi.n	800178c <memset+0x38>
 80017a6:	f1a4 0210 	sub.w	r2, r4, #16
 80017aa:	f022 020f 	bic.w	r2, r2, #15
 80017ae:	f004 040f 	and.w	r4, r4, #15
 80017b2:	3210      	adds	r2, #16
 80017b4:	2c03      	cmp	r4, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	d90d      	bls.n	80017d6 <memset+0x82>
 80017ba:	461e      	mov	r6, r3
 80017bc:	4622      	mov	r2, r4
 80017be:	3a04      	subs	r2, #4
 80017c0:	2a03      	cmp	r2, #3
 80017c2:	f846 5b04 	str.w	r5, [r6], #4
 80017c6:	d8fa      	bhi.n	80017be <memset+0x6a>
 80017c8:	1f22      	subs	r2, r4, #4
 80017ca:	f022 0203 	bic.w	r2, r2, #3
 80017ce:	3204      	adds	r2, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	f004 0403 	and.w	r4, r4, #3
 80017d6:	b12c      	cbz	r4, 80017e4 <memset+0x90>
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	441c      	add	r4, r3
 80017dc:	f803 1b01 	strb.w	r1, [r3], #1
 80017e0:	42a3      	cmp	r3, r4
 80017e2:	d1fb      	bne.n	80017dc <memset+0x88>
 80017e4:	bc70      	pop	{r4, r5, r6}
 80017e6:	4770      	bx	lr
 80017e8:	4614      	mov	r4, r2
 80017ea:	4603      	mov	r3, r0
 80017ec:	e7c2      	b.n	8001774 <memset+0x20>
 80017ee:	bf00      	nop

080017f0 <__malloc_lock>:
__malloc_lock():
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <__malloc_unlock>:
__malloc_unlock():
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <_puts_r>:
_puts_r():
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	4605      	mov	r5, r0
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	4608      	mov	r0, r1
 8001800:	460c      	mov	r4, r1
 8001802:	f000 f9fd 	bl	8001c00 <strlen>
 8001806:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001808:	4f13      	ldr	r7, [pc, #76]	; (8001858 <_puts_r+0x60>)
 800180a:	9404      	str	r4, [sp, #16]
 800180c:	2601      	movs	r6, #1
 800180e:	1c44      	adds	r4, r0, #1
 8001810:	a904      	add	r1, sp, #16
 8001812:	2202      	movs	r2, #2
 8001814:	9403      	str	r4, [sp, #12]
 8001816:	9005      	str	r0, [sp, #20]
 8001818:	68ac      	ldr	r4, [r5, #8]
 800181a:	9706      	str	r7, [sp, #24]
 800181c:	9607      	str	r6, [sp, #28]
 800181e:	9101      	str	r1, [sp, #4]
 8001820:	9202      	str	r2, [sp, #8]
 8001822:	b1ab      	cbz	r3, 8001850 <_puts_r+0x58>
 8001824:	89a3      	ldrh	r3, [r4, #12]
 8001826:	049a      	lsls	r2, r3, #18
 8001828:	d406      	bmi.n	8001838 <_puts_r+0x40>
 800182a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800182c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001834:	81a3      	strh	r3, [r4, #12]
 8001836:	6662      	str	r2, [r4, #100]	; 0x64
 8001838:	4621      	mov	r1, r4
 800183a:	4628      	mov	r0, r5
 800183c:	aa01      	add	r2, sp, #4
 800183e:	f000 fcf1 	bl	8002224 <__sfvwrite_r>
 8001842:	2800      	cmp	r0, #0
 8001844:	bf14      	ite	ne
 8001846:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800184a:	200a      	moveq	r0, #10
 800184c:	b009      	add	sp, #36	; 0x24
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001850:	4628      	mov	r0, r5
 8001852:	f7ff fbf9 	bl	8001048 <__sinit>
 8001856:	e7e5      	b.n	8001824 <_puts_r+0x2c>
 8001858:	08006734 	.word	0x08006734

0800185c <puts>:
puts():
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <puts+0xc>)
 800185e:	4601      	mov	r1, r0
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	f7ff bfc9 	b.w	80017f8 <_puts_r>
 8001866:	bf00      	nop
 8001868:	20000448 	.word	0x20000448

0800186c <_sbrk_r>:
_sbrk_r():
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	4c07      	ldr	r4, [pc, #28]	; (800188c <_sbrk_r+0x20>)
 8001870:	2300      	movs	r3, #0
 8001872:	4605      	mov	r5, r0
 8001874:	4608      	mov	r0, r1
 8001876:	6023      	str	r3, [r4, #0]
 8001878:	f7fe fdc2 	bl	8000400 <_sbrk>
 800187c:	1c43      	adds	r3, r0, #1
 800187e:	d000      	beq.n	8001882 <_sbrk_r+0x16>
 8001880:	bd38      	pop	{r3, r4, r5, pc}
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0fb      	beq.n	8001880 <_sbrk_r+0x14>
 8001888:	602b      	str	r3, [r5, #0]
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	20000b2c 	.word	0x20000b2c

08001890 <__sread>:
__sread():
 8001890:	b510      	push	{r4, lr}
 8001892:	460c      	mov	r4, r1
 8001894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001898:	f000 ff0e 	bl	80026b8 <_read_r>
 800189c:	2800      	cmp	r0, #0
 800189e:	db03      	blt.n	80018a8 <__sread+0x18>
 80018a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80018a2:	4403      	add	r3, r0
 80018a4:	6523      	str	r3, [r4, #80]	; 0x50
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	89a3      	ldrh	r3, [r4, #12]
 80018aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ae:	81a3      	strh	r3, [r4, #12]
 80018b0:	bd10      	pop	{r4, pc}
 80018b2:	bf00      	nop

080018b4 <__swrite>:
__swrite():
 80018b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b8:	4616      	mov	r6, r2
 80018ba:	898a      	ldrh	r2, [r1, #12]
 80018bc:	461f      	mov	r7, r3
 80018be:	05d3      	lsls	r3, r2, #23
 80018c0:	460c      	mov	r4, r1
 80018c2:	4605      	mov	r5, r0
 80018c4:	d506      	bpl.n	80018d4 <__swrite+0x20>
 80018c6:	2200      	movs	r2, #0
 80018c8:	2302      	movs	r3, #2
 80018ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ce:	f000 fe29 	bl	8002524 <_lseek_r>
 80018d2:	89a2      	ldrh	r2, [r4, #12]
 80018d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018dc:	81a2      	strh	r2, [r4, #12]
 80018de:	463b      	mov	r3, r7
 80018e0:	4632      	mov	r2, r6
 80018e2:	4628      	mov	r0, r5
 80018e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018e8:	f000 ba42 	b.w	8001d70 <_write_r>

080018ec <__sseek>:
__sseek():
 80018ec:	b510      	push	{r4, lr}
 80018ee:	460c      	mov	r4, r1
 80018f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018f4:	f000 fe16 	bl	8002524 <_lseek_r>
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	1c42      	adds	r2, r0, #1
 80018fc:	bf0e      	itee	eq
 80018fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001906:	6520      	strne	r0, [r4, #80]	; 0x50
 8001908:	81a3      	strh	r3, [r4, #12]
 800190a:	bd10      	pop	{r4, pc}

0800190c <__sclose>:
__sclose():
 800190c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001910:	f000 ba44 	b.w	8001d9c <_close_r>
	...
 8001920:	eba2 0003 	sub.w	r0, r2, r3
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <strcmp>:
strcmp():
 8001928:	7802      	ldrb	r2, [r0, #0]
 800192a:	780b      	ldrb	r3, [r1, #0]
 800192c:	2a01      	cmp	r2, #1
 800192e:	bf28      	it	cs
 8001930:	429a      	cmpcs	r2, r3
 8001932:	d1f5      	bne.n	8001920 <__sclose+0x14>
 8001934:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8001938:	ea40 0401 	orr.w	r4, r0, r1
 800193c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001940:	f06f 0c00 	mvn.w	ip, #0
 8001944:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8001948:	b312      	cbz	r2, 8001990 <strcmp+0x68>
 800194a:	ea80 0401 	eor.w	r4, r0, r1
 800194e:	f014 0f07 	tst.w	r4, #7
 8001952:	d16a      	bne.n	8001a2a <strcmp+0x102>
 8001954:	f000 0407 	and.w	r4, r0, #7
 8001958:	f020 0007 	bic.w	r0, r0, #7
 800195c:	f004 0503 	and.w	r5, r4, #3
 8001960:	f021 0107 	bic.w	r1, r1, #7
 8001964:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8001968:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800196c:	f014 0f04 	tst.w	r4, #4
 8001970:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001974:	fa0c f405 	lsl.w	r4, ip, r5
 8001978:	ea62 0204 	orn	r2, r2, r4
 800197c:	ea66 0604 	orn	r6, r6, r4
 8001980:	d00a      	beq.n	8001998 <strcmp+0x70>
 8001982:	ea63 0304 	orn	r3, r3, r4
 8001986:	4662      	mov	r2, ip
 8001988:	ea67 0704 	orn	r7, r7, r4
 800198c:	4666      	mov	r6, ip
 800198e:	e003      	b.n	8001998 <strcmp+0x70>
 8001990:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8001994:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001998:	fa82 f54c 	uadd8	r5, r2, ip
 800199c:	ea82 0406 	eor.w	r4, r2, r6
 80019a0:	faa4 f48c 	sel	r4, r4, ip
 80019a4:	bb6c      	cbnz	r4, 8001a02 <strcmp+0xda>
 80019a6:	fa83 f54c 	uadd8	r5, r3, ip
 80019aa:	ea83 0507 	eor.w	r5, r3, r7
 80019ae:	faa5 f58c 	sel	r5, r5, ip
 80019b2:	b995      	cbnz	r5, 80019da <strcmp+0xb2>
 80019b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80019b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80019bc:	fa82 f54c 	uadd8	r5, r2, ip
 80019c0:	ea82 0406 	eor.w	r4, r2, r6
 80019c4:	faa4 f48c 	sel	r4, r4, ip
 80019c8:	fa83 f54c 	uadd8	r5, r3, ip
 80019cc:	ea83 0507 	eor.w	r5, r3, r7
 80019d0:	faa5 f58c 	sel	r5, r5, ip
 80019d4:	4325      	orrs	r5, r4
 80019d6:	d0db      	beq.n	8001990 <strcmp+0x68>
 80019d8:	b99c      	cbnz	r4, 8001a02 <strcmp+0xda>
 80019da:	ba2d      	rev	r5, r5
 80019dc:	fab5 f485 	clz	r4, r5
 80019e0:	f024 0407 	bic.w	r4, r4, #7
 80019e4:	fa27 f104 	lsr.w	r1, r7, r4
 80019e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80019ec:	fa23 f304 	lsr.w	r3, r3, r4
 80019f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80019f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80019f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80019fc:	eba0 0001 	sub.w	r0, r0, r1
 8001a00:	4770      	bx	lr
 8001a02:	ba24      	rev	r4, r4
 8001a04:	fab4 f484 	clz	r4, r4
 8001a08:	f024 0407 	bic.w	r4, r4, #7
 8001a0c:	fa26 f104 	lsr.w	r1, r6, r4
 8001a10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8001a14:	fa22 f204 	lsr.w	r2, r2, r4
 8001a18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8001a1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001a20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001a24:	eba0 0001 	sub.w	r0, r0, r1
 8001a28:	4770      	bx	lr
 8001a2a:	f014 0f03 	tst.w	r4, #3
 8001a2e:	d13c      	bne.n	8001aaa <strcmp+0x182>
 8001a30:	f010 0403 	ands.w	r4, r0, #3
 8001a34:	d128      	bne.n	8001a88 <strcmp+0x160>
 8001a36:	f850 2b08 	ldr.w	r2, [r0], #8
 8001a3a:	f851 3b08 	ldr.w	r3, [r1], #8
 8001a3e:	fa82 f54c 	uadd8	r5, r2, ip
 8001a42:	ea82 0503 	eor.w	r5, r2, r3
 8001a46:	faa5 f58c 	sel	r5, r5, ip
 8001a4a:	b95d      	cbnz	r5, 8001a64 <strcmp+0x13c>
 8001a4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a54:	fa82 f54c 	uadd8	r5, r2, ip
 8001a58:	ea82 0503 	eor.w	r5, r2, r3
 8001a5c:	faa5 f58c 	sel	r5, r5, ip
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	d0e8      	beq.n	8001a36 <strcmp+0x10e>
 8001a64:	ba2d      	rev	r5, r5
 8001a66:	fab5 f485 	clz	r4, r5
 8001a6a:	f024 0407 	bic.w	r4, r4, #7
 8001a6e:	fa23 f104 	lsr.w	r1, r3, r4
 8001a72:	fa22 f204 	lsr.w	r2, r2, r4
 8001a76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8001a7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001a7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001a82:	eba0 0001 	sub.w	r0, r0, r1
 8001a86:	4770      	bx	lr
 8001a88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8001a8c:	f020 0003 	bic.w	r0, r0, #3
 8001a90:	f850 2b08 	ldr.w	r2, [r0], #8
 8001a94:	f021 0103 	bic.w	r1, r1, #3
 8001a98:	f851 3b08 	ldr.w	r3, [r1], #8
 8001a9c:	fa0c f404 	lsl.w	r4, ip, r4
 8001aa0:	ea62 0204 	orn	r2, r2, r4
 8001aa4:	ea63 0304 	orn	r3, r3, r4
 8001aa8:	e7c9      	b.n	8001a3e <strcmp+0x116>
 8001aaa:	f010 0403 	ands.w	r4, r0, #3
 8001aae:	d01a      	beq.n	8001ae6 <strcmp+0x1be>
 8001ab0:	eba1 0104 	sub.w	r1, r1, r4
 8001ab4:	f020 0003 	bic.w	r0, r0, #3
 8001ab8:	07e4      	lsls	r4, r4, #31
 8001aba:	f850 2b04 	ldr.w	r2, [r0], #4
 8001abe:	d006      	beq.n	8001ace <strcmp+0x1a6>
 8001ac0:	d20f      	bcs.n	8001ae2 <strcmp+0x1ba>
 8001ac2:	788b      	ldrb	r3, [r1, #2]
 8001ac4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8001ac8:	1ae4      	subs	r4, r4, r3
 8001aca:	d106      	bne.n	8001ada <strcmp+0x1b2>
 8001acc:	b12b      	cbz	r3, 8001ada <strcmp+0x1b2>
 8001ace:	78cb      	ldrb	r3, [r1, #3]
 8001ad0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8001ad4:	1ae4      	subs	r4, r4, r3
 8001ad6:	d100      	bne.n	8001ada <strcmp+0x1b2>
 8001ad8:	b91b      	cbnz	r3, 8001ae2 <strcmp+0x1ba>
 8001ada:	4620      	mov	r0, r4
 8001adc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8001ae0:	4770      	bx	lr
 8001ae2:	f101 0104 	add.w	r1, r1, #4
 8001ae6:	f850 2b04 	ldr.w	r2, [r0], #4
 8001aea:	07cc      	lsls	r4, r1, #31
 8001aec:	f021 0103 	bic.w	r1, r1, #3
 8001af0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001af4:	d848      	bhi.n	8001b88 <strcmp+0x260>
 8001af6:	d224      	bcs.n	8001b42 <strcmp+0x21a>
 8001af8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8001afc:	fa82 f54c 	uadd8	r5, r2, ip
 8001b00:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8001b04:	faa5 f58c 	sel	r5, r5, ip
 8001b08:	d10a      	bne.n	8001b20 <strcmp+0x1f8>
 8001b0a:	b965      	cbnz	r5, 8001b26 <strcmp+0x1fe>
 8001b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b10:	ea84 0402 	eor.w	r4, r4, r2
 8001b14:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8001b18:	d10e      	bne.n	8001b38 <strcmp+0x210>
 8001b1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8001b1e:	e7eb      	b.n	8001af8 <strcmp+0x1d0>
 8001b20:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001b24:	e055      	b.n	8001bd2 <strcmp+0x2aa>
 8001b26:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8001b2a:	d14d      	bne.n	8001bc8 <strcmp+0x2a0>
 8001b2c:	7808      	ldrb	r0, [r1, #0]
 8001b2e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001b32:	f1c0 0000 	rsb	r0, r0, #0
 8001b36:	4770      	bx	lr
 8001b38:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8001b3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001b40:	e047      	b.n	8001bd2 <strcmp+0x2aa>
 8001b42:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8001b46:	fa82 f54c 	uadd8	r5, r2, ip
 8001b4a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8001b4e:	faa5 f58c 	sel	r5, r5, ip
 8001b52:	d10a      	bne.n	8001b6a <strcmp+0x242>
 8001b54:	b965      	cbnz	r5, 8001b70 <strcmp+0x248>
 8001b56:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b5a:	ea84 0402 	eor.w	r4, r4, r2
 8001b5e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8001b62:	d10c      	bne.n	8001b7e <strcmp+0x256>
 8001b64:	f850 2b04 	ldr.w	r2, [r0], #4
 8001b68:	e7eb      	b.n	8001b42 <strcmp+0x21a>
 8001b6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001b6e:	e030      	b.n	8001bd2 <strcmp+0x2aa>
 8001b70:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8001b74:	d128      	bne.n	8001bc8 <strcmp+0x2a0>
 8001b76:	880b      	ldrh	r3, [r1, #0]
 8001b78:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001b7c:	e029      	b.n	8001bd2 <strcmp+0x2aa>
 8001b7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001b82:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8001b86:	e024      	b.n	8001bd2 <strcmp+0x2aa>
 8001b88:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8001b8c:	fa82 f54c 	uadd8	r5, r2, ip
 8001b90:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8001b94:	faa5 f58c 	sel	r5, r5, ip
 8001b98:	d10a      	bne.n	8001bb0 <strcmp+0x288>
 8001b9a:	b965      	cbnz	r5, 8001bb6 <strcmp+0x28e>
 8001b9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ba0:	ea84 0402 	eor.w	r4, r4, r2
 8001ba4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8001ba8:	d109      	bne.n	8001bbe <strcmp+0x296>
 8001baa:	f850 2b04 	ldr.w	r2, [r0], #4
 8001bae:	e7eb      	b.n	8001b88 <strcmp+0x260>
 8001bb0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001bb4:	e00d      	b.n	8001bd2 <strcmp+0x2aa>
 8001bb6:	f015 0fff 	tst.w	r5, #255	; 0xff
 8001bba:	d105      	bne.n	8001bc8 <strcmp+0x2a0>
 8001bbc:	680b      	ldr	r3, [r1, #0]
 8001bbe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001bc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bc6:	e004      	b.n	8001bd2 <strcmp+0x2aa>
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001bd0:	4770      	bx	lr
 8001bd2:	ba12      	rev	r2, r2
 8001bd4:	ba1b      	rev	r3, r3
 8001bd6:	fa82 f44c 	uadd8	r4, r2, ip
 8001bda:	ea82 0403 	eor.w	r4, r2, r3
 8001bde:	faa4 f58c 	sel	r5, r4, ip
 8001be2:	fab5 f485 	clz	r4, r5
 8001be6:	fa02 f204 	lsl.w	r2, r2, r4
 8001bea:	fa03 f304 	lsl.w	r3, r3, r4
 8001bee:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8001bf2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001bf6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8001bfa:	4770      	bx	lr
 8001bfc:	0000      	movs	r0, r0
	...

08001c00 <strlen>:
strlen():
 8001c00:	f890 f000 	pld	[r0]
 8001c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001c08:	f020 0107 	bic.w	r1, r0, #7
 8001c0c:	f06f 0c00 	mvn.w	ip, #0
 8001c10:	f010 0407 	ands.w	r4, r0, #7
 8001c14:	f891 f020 	pld	[r1, #32]
 8001c18:	f040 8049 	bne.w	8001cae <strlen+0xae>
 8001c1c:	f04f 0400 	mov.w	r4, #0
 8001c20:	f06f 0007 	mvn.w	r0, #7
 8001c24:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001c28:	f891 f040 	pld	[r1, #64]	; 0x40
 8001c2c:	f100 0008 	add.w	r0, r0, #8
 8001c30:	fa82 f24c 	uadd8	r2, r2, ip
 8001c34:	faa4 f28c 	sel	r2, r4, ip
 8001c38:	fa83 f34c 	uadd8	r3, r3, ip
 8001c3c:	faa2 f38c 	sel	r3, r2, ip
 8001c40:	bb4b      	cbnz	r3, 8001c96 <strlen+0x96>
 8001c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001c46:	fa82 f24c 	uadd8	r2, r2, ip
 8001c4a:	f100 0008 	add.w	r0, r0, #8
 8001c4e:	faa4 f28c 	sel	r2, r4, ip
 8001c52:	fa83 f34c 	uadd8	r3, r3, ip
 8001c56:	faa2 f38c 	sel	r3, r2, ip
 8001c5a:	b9e3      	cbnz	r3, 8001c96 <strlen+0x96>
 8001c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8001c60:	fa82 f24c 	uadd8	r2, r2, ip
 8001c64:	f100 0008 	add.w	r0, r0, #8
 8001c68:	faa4 f28c 	sel	r2, r4, ip
 8001c6c:	fa83 f34c 	uadd8	r3, r3, ip
 8001c70:	faa2 f38c 	sel	r3, r2, ip
 8001c74:	b97b      	cbnz	r3, 8001c96 <strlen+0x96>
 8001c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8001c7a:	f101 0120 	add.w	r1, r1, #32
 8001c7e:	fa82 f24c 	uadd8	r2, r2, ip
 8001c82:	f100 0008 	add.w	r0, r0, #8
 8001c86:	faa4 f28c 	sel	r2, r4, ip
 8001c8a:	fa83 f34c 	uadd8	r3, r3, ip
 8001c8e:	faa2 f38c 	sel	r3, r2, ip
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0c6      	beq.n	8001c24 <strlen+0x24>
 8001c96:	2a00      	cmp	r2, #0
 8001c98:	bf04      	itt	eq
 8001c9a:	3004      	addeq	r0, #4
 8001c9c:	461a      	moveq	r2, r3
 8001c9e:	ba12      	rev	r2, r2
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8001ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8001cac:	4770      	bx	lr
 8001cae:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001cb2:	f004 0503 	and.w	r5, r4, #3
 8001cb6:	f1c4 0000 	rsb	r0, r4, #0
 8001cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8001cbe:	f014 0f04 	tst.w	r4, #4
 8001cc2:	f891 f040 	pld	[r1, #64]	; 0x40
 8001cc6:	fa0c f505 	lsl.w	r5, ip, r5
 8001cca:	ea62 0205 	orn	r2, r2, r5
 8001cce:	bf1c      	itt	ne
 8001cd0:	ea63 0305 	ornne	r3, r3, r5
 8001cd4:	4662      	movne	r2, ip
 8001cd6:	f04f 0400 	mov.w	r4, #0
 8001cda:	e7a9      	b.n	8001c30 <strlen+0x30>

08001cdc <_vsnprintf_r>:
_vsnprintf_r():
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	b09a      	sub	sp, #104	; 0x68
 8001ce2:	4605      	mov	r5, r0
 8001ce4:	db2f      	blt.n	8001d46 <_vsnprintf_r+0x6a>
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001cee:	9100      	str	r1, [sp, #0]
 8001cf0:	9104      	str	r1, [sp, #16]
 8001cf2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001cf6:	d011      	beq.n	8001d1c <_vsnprintf_r+0x40>
 8001cf8:	3c01      	subs	r4, #1
 8001cfa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001cfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001d00:	9402      	str	r4, [sp, #8]
 8001d02:	4669      	mov	r1, sp
 8001d04:	9405      	str	r4, [sp, #20]
 8001d06:	f8ad 600e 	strh.w	r6, [sp, #14]
 8001d0a:	f000 fedb 	bl	8002ac4 <_svfprintf_r>
 8001d0e:	1c42      	adds	r2, r0, #1
 8001d10:	db12      	blt.n	8001d38 <_vsnprintf_r+0x5c>
 8001d12:	9b00      	ldr	r3, [sp, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	b01a      	add	sp, #104	; 0x68
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001d1e:	9402      	str	r4, [sp, #8]
 8001d20:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001d24:	4669      	mov	r1, sp
 8001d26:	9405      	str	r4, [sp, #20]
 8001d28:	f8ad 600e 	strh.w	r6, [sp, #14]
 8001d2c:	f000 feca 	bl	8002ac4 <_svfprintf_r>
 8001d30:	1c43      	adds	r3, r0, #1
 8001d32:	db04      	blt.n	8001d3e <_vsnprintf_r+0x62>
 8001d34:	b01a      	add	sp, #104	; 0x68
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	238b      	movs	r3, #139	; 0x8b
 8001d3a:	602b      	str	r3, [r5, #0]
 8001d3c:	e7e9      	b.n	8001d12 <_vsnprintf_r+0x36>
 8001d3e:	238b      	movs	r3, #139	; 0x8b
 8001d40:	602b      	str	r3, [r5, #0]
 8001d42:	b01a      	add	sp, #104	; 0x68
 8001d44:	bd70      	pop	{r4, r5, r6, pc}
 8001d46:	238b      	movs	r3, #139	; 0x8b
 8001d48:	6003      	str	r3, [r0, #0]
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4e:	e7f1      	b.n	8001d34 <_vsnprintf_r+0x58>

08001d50 <vsnprintf>:
vsnprintf():
 8001d50:	b510      	push	{r4, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	4c05      	ldr	r4, [pc, #20]	; (8001d6c <vsnprintf+0x1c>)
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	6824      	ldr	r4, [r4, #0]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	4601      	mov	r1, r0
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff ffbb 	bl	8001cdc <_vsnprintf_r>
 8001d66:	b002      	add	sp, #8
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000448 	.word	0x20000448

08001d70 <_write_r>:
_write_r():
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	460d      	mov	r5, r1
 8001d74:	4c08      	ldr	r4, [pc, #32]	; (8001d98 <_write_r+0x28>)
 8001d76:	4611      	mov	r1, r2
 8001d78:	4606      	mov	r6, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	2300      	movs	r3, #0
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	f7fe fd0b 	bl	800079c <_write>
 8001d86:	1c43      	adds	r3, r0, #1
 8001d88:	d000      	beq.n	8001d8c <_write_r+0x1c>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0fb      	beq.n	8001d8a <_write_r+0x1a>
 8001d92:	6033      	str	r3, [r6, #0]
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
 8001d96:	bf00      	nop
 8001d98:	20000b2c 	.word	0x20000b2c

08001d9c <_close_r>:
_close_r():
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4c07      	ldr	r4, [pc, #28]	; (8001dbc <_close_r+0x20>)
 8001da0:	2300      	movs	r3, #0
 8001da2:	4605      	mov	r5, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	6023      	str	r3, [r4, #0]
 8001da8:	f7fe fd2a 	bl	8000800 <_close>
 8001dac:	1c43      	adds	r3, r0, #1
 8001dae:	d000      	beq.n	8001db2 <_close_r+0x16>
 8001db0:	bd38      	pop	{r3, r4, r5, pc}
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0fb      	beq.n	8001db0 <_close_r+0x14>
 8001db8:	602b      	str	r3, [r5, #0]
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	20000b2c 	.word	0x20000b2c

08001dc0 <_fclose_r>:
_fclose_r():
 8001dc0:	2900      	cmp	r1, #0
 8001dc2:	d03d      	beq.n	8001e40 <_fclose_r+0x80>
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	b108      	cbz	r0, 8001dd0 <_fclose_r+0x10>
 8001dcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001dce:	b37b      	cbz	r3, 8001e30 <_fclose_r+0x70>
 8001dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dd4:	b90b      	cbnz	r3, 8001dda <_fclose_r+0x1a>
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	bd70      	pop	{r4, r5, r6, pc}
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f000 f831 	bl	8001e44 <__sflush_r>
 8001de2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001de4:	4606      	mov	r6, r0
 8001de6:	b133      	cbz	r3, 8001df6 <_fclose_r+0x36>
 8001de8:	69e1      	ldr	r1, [r4, #28]
 8001dea:	4628      	mov	r0, r5
 8001dec:	4798      	blx	r3
 8001dee:	2800      	cmp	r0, #0
 8001df0:	bfb8      	it	lt
 8001df2:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8001df6:	89a3      	ldrh	r3, [r4, #12]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	d41c      	bmi.n	8001e36 <_fclose_r+0x76>
 8001dfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001dfe:	b141      	cbz	r1, 8001e12 <_fclose_r+0x52>
 8001e00:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001e04:	4299      	cmp	r1, r3
 8001e06:	d002      	beq.n	8001e0e <_fclose_r+0x4e>
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f000 f923 	bl	8002054 <_free_r>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6323      	str	r3, [r4, #48]	; 0x30
 8001e12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e14:	b121      	cbz	r1, 8001e20 <_fclose_r+0x60>
 8001e16:	4628      	mov	r0, r5
 8001e18:	f000 f91c 	bl	8002054 <_free_r>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6463      	str	r3, [r4, #68]	; 0x44
 8001e20:	f7ff f918 	bl	8001054 <__sfp_lock_acquire>
 8001e24:	2300      	movs	r3, #0
 8001e26:	81a3      	strh	r3, [r4, #12]
 8001e28:	f7ff f916 	bl	8001058 <__sfp_lock_release>
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	f7ff f90a 	bl	8001048 <__sinit>
 8001e34:	e7cc      	b.n	8001dd0 <_fclose_r+0x10>
 8001e36:	6921      	ldr	r1, [r4, #16]
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f000 f90b 	bl	8002054 <_free_r>
 8001e3e:	e7dd      	b.n	8001dfc <_fclose_r+0x3c>
 8001e40:	2000      	movs	r0, #0
 8001e42:	4770      	bx	lr

08001e44 <__sflush_r>:
__sflush_r():
 8001e44:	898b      	ldrh	r3, [r1, #12]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4c:	460d      	mov	r5, r1
 8001e4e:	0711      	lsls	r1, r2, #28
 8001e50:	4680      	mov	r8, r0
 8001e52:	d43c      	bmi.n	8001ece <__sflush_r+0x8a>
 8001e54:	686a      	ldr	r2, [r5, #4]
 8001e56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	81ab      	strh	r3, [r5, #12]
 8001e5e:	dd73      	ble.n	8001f48 <__sflush_r+0x104>
 8001e60:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8001e62:	2e00      	cmp	r6, #0
 8001e64:	d04b      	beq.n	8001efe <__sflush_r+0xba>
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8d8 4000 	ldr.w	r4, [r8]
 8001e74:	f8c8 1000 	str.w	r1, [r8]
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d069      	beq.n	8001f50 <__sflush_r+0x10c>
 8001e7c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8001e7e:	075f      	lsls	r7, r3, #29
 8001e80:	d505      	bpl.n	8001e8e <__sflush_r+0x4a>
 8001e82:	6869      	ldr	r1, [r5, #4]
 8001e84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001e86:	1a52      	subs	r2, r2, r1
 8001e88:	b10b      	cbz	r3, 8001e8e <__sflush_r+0x4a>
 8001e8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001e8c:	1ad2      	subs	r2, r2, r3
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69e9      	ldr	r1, [r5, #28]
 8001e92:	4640      	mov	r0, r8
 8001e94:	47b0      	blx	r6
 8001e96:	1c46      	adds	r6, r0, #1
 8001e98:	d03c      	beq.n	8001f14 <__sflush_r+0xd0>
 8001e9a:	89ab      	ldrh	r3, [r5, #12]
 8001e9c:	692a      	ldr	r2, [r5, #16]
 8001e9e:	602a      	str	r2, [r5, #0]
 8001ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	81ab      	strh	r3, [r5, #12]
 8001eaa:	04db      	lsls	r3, r3, #19
 8001eac:	606a      	str	r2, [r5, #4]
 8001eae:	d449      	bmi.n	8001f44 <__sflush_r+0x100>
 8001eb0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001eb2:	f8c8 4000 	str.w	r4, [r8]
 8001eb6:	b311      	cbz	r1, 8001efe <__sflush_r+0xba>
 8001eb8:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8001ebc:	4299      	cmp	r1, r3
 8001ebe:	d002      	beq.n	8001ec6 <__sflush_r+0x82>
 8001ec0:	4640      	mov	r0, r8
 8001ec2:	f000 f8c7 	bl	8002054 <_free_r>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	6328      	str	r0, [r5, #48]	; 0x30
 8001eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ece:	692e      	ldr	r6, [r5, #16]
 8001ed0:	b1ae      	cbz	r6, 8001efe <__sflush_r+0xba>
 8001ed2:	682c      	ldr	r4, [r5, #0]
 8001ed4:	602e      	str	r6, [r5, #0]
 8001ed6:	0790      	lsls	r0, r2, #30
 8001ed8:	bf0c      	ite	eq
 8001eda:	696b      	ldreq	r3, [r5, #20]
 8001edc:	2300      	movne	r3, #0
 8001ede:	1ba4      	subs	r4, r4, r6
 8001ee0:	60ab      	str	r3, [r5, #8]
 8001ee2:	e00a      	b.n	8001efa <__sflush_r+0xb6>
 8001ee4:	4623      	mov	r3, r4
 8001ee6:	4632      	mov	r2, r6
 8001ee8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8001eea:	69e9      	ldr	r1, [r5, #28]
 8001eec:	4640      	mov	r0, r8
 8001eee:	47b8      	blx	r7
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	eba4 0400 	sub.w	r4, r4, r0
 8001ef6:	4406      	add	r6, r0
 8001ef8:	dd04      	ble.n	8001f04 <__sflush_r+0xc0>
 8001efa:	2c00      	cmp	r4, #0
 8001efc:	dcf2      	bgt.n	8001ee4 <__sflush_r+0xa0>
 8001efe:	2000      	movs	r0, #0
 8001f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f04:	89ab      	ldrh	r3, [r5, #12]
 8001f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f0a:	81ab      	strh	r3, [r5, #12]
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f14:	f8d8 2000 	ldr.w	r2, [r8]
 8001f18:	2a1d      	cmp	r2, #29
 8001f1a:	d8f3      	bhi.n	8001f04 <__sflush_r+0xc0>
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <__sflush_r+0x144>)
 8001f1e:	40d3      	lsrs	r3, r2
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	f083 0101 	eor.w	r1, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0eb      	beq.n	8001f04 <__sflush_r+0xc0>
 8001f2c:	89ab      	ldrh	r3, [r5, #12]
 8001f2e:	6069      	str	r1, [r5, #4]
 8001f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	6929      	ldr	r1, [r5, #16]
 8001f38:	6029      	str	r1, [r5, #0]
 8001f3a:	04d9      	lsls	r1, r3, #19
 8001f3c:	81ab      	strh	r3, [r5, #12]
 8001f3e:	d5b7      	bpl.n	8001eb0 <__sflush_r+0x6c>
 8001f40:	2a00      	cmp	r2, #0
 8001f42:	d1b5      	bne.n	8001eb0 <__sflush_r+0x6c>
 8001f44:	6528      	str	r0, [r5, #80]	; 0x50
 8001f46:	e7b3      	b.n	8001eb0 <__sflush_r+0x6c>
 8001f48:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	dc88      	bgt.n	8001e60 <__sflush_r+0x1c>
 8001f4e:	e7d6      	b.n	8001efe <__sflush_r+0xba>
 8001f50:	2301      	movs	r3, #1
 8001f52:	69e9      	ldr	r1, [r5, #28]
 8001f54:	4640      	mov	r0, r8
 8001f56:	47b0      	blx	r6
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	d002      	beq.n	8001f64 <__sflush_r+0x120>
 8001f5e:	89ab      	ldrh	r3, [r5, #12]
 8001f60:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8001f62:	e78c      	b.n	8001e7e <__sflush_r+0x3a>
 8001f64:	f8d8 3000 	ldr.w	r3, [r8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f8      	beq.n	8001f5e <__sflush_r+0x11a>
 8001f6c:	2b1d      	cmp	r3, #29
 8001f6e:	d001      	beq.n	8001f74 <__sflush_r+0x130>
 8001f70:	2b16      	cmp	r3, #22
 8001f72:	d102      	bne.n	8001f7a <__sflush_r+0x136>
 8001f74:	f8c8 4000 	str.w	r4, [r8]
 8001f78:	e7c1      	b.n	8001efe <__sflush_r+0xba>
 8001f7a:	89ab      	ldrh	r3, [r5, #12]
 8001f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f80:	81ab      	strh	r3, [r5, #12]
 8001f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f86:	bf00      	nop
 8001f88:	20400001 	.word	0x20400001

08001f8c <_fflush_r>:
_fflush_r():
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4604      	mov	r4, r0
 8001f90:	b082      	sub	sp, #8
 8001f92:	b108      	cbz	r0, 8001f98 <_fflush_r+0xc>
 8001f94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f96:	b153      	cbz	r3, 8001fae <_fflush_r+0x22>
 8001f98:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8001f9c:	b908      	cbnz	r0, 8001fa2 <_fflush_r+0x16>
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd10      	pop	{r4, pc}
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	b002      	add	sp, #8
 8001fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001faa:	f7ff bf4b 	b.w	8001e44 <__sflush_r>
 8001fae:	9101      	str	r1, [sp, #4]
 8001fb0:	f7ff f84a 	bl	8001048 <__sinit>
 8001fb4:	9901      	ldr	r1, [sp, #4]
 8001fb6:	e7ef      	b.n	8001f98 <_fflush_r+0xc>

08001fb8 <_malloc_trim_r>:
_malloc_trim_r():
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	4f23      	ldr	r7, [pc, #140]	; (8002048 <_malloc_trim_r+0x90>)
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	f7ff fc16 	bl	80017f0 <__malloc_lock>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	685d      	ldr	r5, [r3, #4]
 8001fc8:	f025 0503 	bic.w	r5, r5, #3
 8001fcc:	1b29      	subs	r1, r5, r4
 8001fce:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8001fd2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8001fd6:	f021 010f 	bic.w	r1, r1, #15
 8001fda:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8001fde:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001fe2:	db07      	blt.n	8001ff4 <_malloc_trim_r+0x3c>
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4630      	mov	r0, r6
 8001fe8:	f7ff fc40 	bl	800186c <_sbrk_r>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	442b      	add	r3, r5
 8001ff0:	4298      	cmp	r0, r3
 8001ff2:	d004      	beq.n	8001ffe <_malloc_trim_r+0x46>
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f7ff fbfd 	bl	80017f4 <__malloc_unlock>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ffe:	4261      	negs	r1, r4
 8002000:	4630      	mov	r0, r6
 8002002:	f7ff fc33 	bl	800186c <_sbrk_r>
 8002006:	3001      	adds	r0, #1
 8002008:	d00d      	beq.n	8002026 <_malloc_trim_r+0x6e>
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <_malloc_trim_r+0x94>)
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	1b2d      	subs	r5, r5, r4
 8002012:	f045 0501 	orr.w	r5, r5, #1
 8002016:	4630      	mov	r0, r6
 8002018:	1b09      	subs	r1, r1, r4
 800201a:	6055      	str	r5, [r2, #4]
 800201c:	6019      	str	r1, [r3, #0]
 800201e:	f7ff fbe9 	bl	80017f4 <__malloc_unlock>
 8002022:	2001      	movs	r0, #1
 8002024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002026:	2100      	movs	r1, #0
 8002028:	4630      	mov	r0, r6
 800202a:	f7ff fc1f 	bl	800186c <_sbrk_r>
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	1a83      	subs	r3, r0, r2
 8002032:	2b0f      	cmp	r3, #15
 8002034:	ddde      	ble.n	8001ff4 <_malloc_trim_r+0x3c>
 8002036:	4c06      	ldr	r4, [pc, #24]	; (8002050 <_malloc_trim_r+0x98>)
 8002038:	4904      	ldr	r1, [pc, #16]	; (800204c <_malloc_trim_r+0x94>)
 800203a:	6824      	ldr	r4, [r4, #0]
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	1b00      	subs	r0, r0, r4
 8002042:	6053      	str	r3, [r2, #4]
 8002044:	6008      	str	r0, [r1, #0]
 8002046:	e7d5      	b.n	8001ff4 <_malloc_trim_r+0x3c>
 8002048:	2000044c 	.word	0x2000044c
 800204c:	20000b04 	.word	0x20000b04
 8002050:	20000858 	.word	0x20000858

08002054 <_free_r>:
_free_r():
 8002054:	2900      	cmp	r1, #0
 8002056:	d045      	beq.n	80020e4 <_free_r+0x90>
 8002058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800205c:	460d      	mov	r5, r1
 800205e:	4680      	mov	r8, r0
 8002060:	f7ff fbc6 	bl	80017f0 <__malloc_lock>
 8002064:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8002068:	496a      	ldr	r1, [pc, #424]	; (8002214 <_free_r+0x1c0>)
 800206a:	f027 0301 	bic.w	r3, r7, #1
 800206e:	f1a5 0408 	sub.w	r4, r5, #8
 8002072:	18e2      	adds	r2, r4, r3
 8002074:	688e      	ldr	r6, [r1, #8]
 8002076:	6850      	ldr	r0, [r2, #4]
 8002078:	42b2      	cmp	r2, r6
 800207a:	f020 0003 	bic.w	r0, r0, #3
 800207e:	d062      	beq.n	8002146 <_free_r+0xf2>
 8002080:	07fe      	lsls	r6, r7, #31
 8002082:	6050      	str	r0, [r2, #4]
 8002084:	d40b      	bmi.n	800209e <_free_r+0x4a>
 8002086:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800208a:	1be4      	subs	r4, r4, r7
 800208c:	f101 0e08 	add.w	lr, r1, #8
 8002090:	68a5      	ldr	r5, [r4, #8]
 8002092:	4575      	cmp	r5, lr
 8002094:	443b      	add	r3, r7
 8002096:	d06f      	beq.n	8002178 <_free_r+0x124>
 8002098:	68e7      	ldr	r7, [r4, #12]
 800209a:	60ef      	str	r7, [r5, #12]
 800209c:	60bd      	str	r5, [r7, #8]
 800209e:	1815      	adds	r5, r2, r0
 80020a0:	686d      	ldr	r5, [r5, #4]
 80020a2:	07ed      	lsls	r5, r5, #31
 80020a4:	d542      	bpl.n	800212c <_free_r+0xd8>
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	6062      	str	r2, [r4, #4]
 80020ac:	50e3      	str	r3, [r4, r3]
 80020ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b2:	d218      	bcs.n	80020e6 <_free_r+0x92>
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	684d      	ldr	r5, [r1, #4]
 80020ba:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80020be:	60a7      	str	r7, [r4, #8]
 80020c0:	2001      	movs	r0, #1
 80020c2:	109b      	asrs	r3, r3, #2
 80020c4:	fa00 f303 	lsl.w	r3, r0, r3
 80020c8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80020cc:	431d      	orrs	r5, r3
 80020ce:	3808      	subs	r0, #8
 80020d0:	60e0      	str	r0, [r4, #12]
 80020d2:	604d      	str	r5, [r1, #4]
 80020d4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80020d8:	60fc      	str	r4, [r7, #12]
 80020da:	4640      	mov	r0, r8
 80020dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020e0:	f7ff bb88 	b.w	80017f4 <__malloc_unlock>
 80020e4:	4770      	bx	lr
 80020e6:	0a5a      	lsrs	r2, r3, #9
 80020e8:	2a04      	cmp	r2, #4
 80020ea:	d853      	bhi.n	8002194 <_free_r+0x140>
 80020ec:	099a      	lsrs	r2, r3, #6
 80020ee:	f102 0739 	add.w	r7, r2, #57	; 0x39
 80020f2:	007f      	lsls	r7, r7, #1
 80020f4:	f102 0538 	add.w	r5, r2, #56	; 0x38
 80020f8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 80020fc:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8002100:	4944      	ldr	r1, [pc, #272]	; (8002214 <_free_r+0x1c0>)
 8002102:	3808      	subs	r0, #8
 8002104:	4290      	cmp	r0, r2
 8002106:	d04d      	beq.n	80021a4 <_free_r+0x150>
 8002108:	6851      	ldr	r1, [r2, #4]
 800210a:	f021 0103 	bic.w	r1, r1, #3
 800210e:	428b      	cmp	r3, r1
 8002110:	d202      	bcs.n	8002118 <_free_r+0xc4>
 8002112:	6892      	ldr	r2, [r2, #8]
 8002114:	4290      	cmp	r0, r2
 8002116:	d1f7      	bne.n	8002108 <_free_r+0xb4>
 8002118:	68d0      	ldr	r0, [r2, #12]
 800211a:	60e0      	str	r0, [r4, #12]
 800211c:	60a2      	str	r2, [r4, #8]
 800211e:	6084      	str	r4, [r0, #8]
 8002120:	60d4      	str	r4, [r2, #12]
 8002122:	4640      	mov	r0, r8
 8002124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002128:	f7ff bb64 	b.w	80017f4 <__malloc_unlock>
 800212c:	6895      	ldr	r5, [r2, #8]
 800212e:	4f3a      	ldr	r7, [pc, #232]	; (8002218 <_free_r+0x1c4>)
 8002130:	42bd      	cmp	r5, r7
 8002132:	4403      	add	r3, r0
 8002134:	d03f      	beq.n	80021b6 <_free_r+0x162>
 8002136:	68d0      	ldr	r0, [r2, #12]
 8002138:	60e8      	str	r0, [r5, #12]
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	6085      	str	r5, [r0, #8]
 8002140:	6062      	str	r2, [r4, #4]
 8002142:	50e3      	str	r3, [r4, r3]
 8002144:	e7b3      	b.n	80020ae <_free_r+0x5a>
 8002146:	07ff      	lsls	r7, r7, #31
 8002148:	4403      	add	r3, r0
 800214a:	d407      	bmi.n	800215c <_free_r+0x108>
 800214c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8002150:	1aa4      	subs	r4, r4, r2
 8002152:	4413      	add	r3, r2
 8002154:	68a0      	ldr	r0, [r4, #8]
 8002156:	68e2      	ldr	r2, [r4, #12]
 8002158:	60c2      	str	r2, [r0, #12]
 800215a:	6090      	str	r0, [r2, #8]
 800215c:	4a2f      	ldr	r2, [pc, #188]	; (800221c <_free_r+0x1c8>)
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f043 0001 	orr.w	r0, r3, #1
 8002164:	4293      	cmp	r3, r2
 8002166:	6060      	str	r0, [r4, #4]
 8002168:	608c      	str	r4, [r1, #8]
 800216a:	d3b6      	bcc.n	80020da <_free_r+0x86>
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <_free_r+0x1cc>)
 800216e:	4640      	mov	r0, r8
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	f7ff ff21 	bl	8001fb8 <_malloc_trim_r>
 8002176:	e7b0      	b.n	80020da <_free_r+0x86>
 8002178:	1811      	adds	r1, r2, r0
 800217a:	6849      	ldr	r1, [r1, #4]
 800217c:	07c9      	lsls	r1, r1, #31
 800217e:	d444      	bmi.n	800220a <_free_r+0x1b6>
 8002180:	6891      	ldr	r1, [r2, #8]
 8002182:	68d2      	ldr	r2, [r2, #12]
 8002184:	60ca      	str	r2, [r1, #12]
 8002186:	4403      	add	r3, r0
 8002188:	f043 0001 	orr.w	r0, r3, #1
 800218c:	6091      	str	r1, [r2, #8]
 800218e:	6060      	str	r0, [r4, #4]
 8002190:	50e3      	str	r3, [r4, r3]
 8002192:	e7a2      	b.n	80020da <_free_r+0x86>
 8002194:	2a14      	cmp	r2, #20
 8002196:	d817      	bhi.n	80021c8 <_free_r+0x174>
 8002198:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800219c:	007f      	lsls	r7, r7, #1
 800219e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80021a2:	e7a9      	b.n	80020f8 <_free_r+0xa4>
 80021a4:	10aa      	asrs	r2, r5, #2
 80021a6:	684b      	ldr	r3, [r1, #4]
 80021a8:	2501      	movs	r5, #1
 80021aa:	fa05 f202 	lsl.w	r2, r5, r2
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
 80021b2:	4602      	mov	r2, r0
 80021b4:	e7b1      	b.n	800211a <_free_r+0xc6>
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	614c      	str	r4, [r1, #20]
 80021bc:	610c      	str	r4, [r1, #16]
 80021be:	60e5      	str	r5, [r4, #12]
 80021c0:	60a5      	str	r5, [r4, #8]
 80021c2:	6062      	str	r2, [r4, #4]
 80021c4:	50e3      	str	r3, [r4, r3]
 80021c6:	e788      	b.n	80020da <_free_r+0x86>
 80021c8:	2a54      	cmp	r2, #84	; 0x54
 80021ca:	d806      	bhi.n	80021da <_free_r+0x186>
 80021cc:	0b1a      	lsrs	r2, r3, #12
 80021ce:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80021d2:	007f      	lsls	r7, r7, #1
 80021d4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80021d8:	e78e      	b.n	80020f8 <_free_r+0xa4>
 80021da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80021de:	d806      	bhi.n	80021ee <_free_r+0x19a>
 80021e0:	0bda      	lsrs	r2, r3, #15
 80021e2:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80021e6:	007f      	lsls	r7, r7, #1
 80021e8:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80021ec:	e784      	b.n	80020f8 <_free_r+0xa4>
 80021ee:	f240 5054 	movw	r0, #1364	; 0x554
 80021f2:	4282      	cmp	r2, r0
 80021f4:	d806      	bhi.n	8002204 <_free_r+0x1b0>
 80021f6:	0c9a      	lsrs	r2, r3, #18
 80021f8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 80021fc:	007f      	lsls	r7, r7, #1
 80021fe:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8002202:	e779      	b.n	80020f8 <_free_r+0xa4>
 8002204:	27fe      	movs	r7, #254	; 0xfe
 8002206:	257e      	movs	r5, #126	; 0x7e
 8002208:	e776      	b.n	80020f8 <_free_r+0xa4>
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	6062      	str	r2, [r4, #4]
 8002210:	50e3      	str	r3, [r4, r3]
 8002212:	e762      	b.n	80020da <_free_r+0x86>
 8002214:	2000044c 	.word	0x2000044c
 8002218:	20000454 	.word	0x20000454
 800221c:	20000854 	.word	0x20000854
 8002220:	20000b00 	.word	0x20000b00

08002224 <__sfvwrite_r>:
__sfvwrite_r():
 8002224:	6893      	ldr	r3, [r2, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d076      	beq.n	8002318 <__sfvwrite_r+0xf4>
 800222a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222e:	898b      	ldrh	r3, [r1, #12]
 8002230:	b085      	sub	sp, #20
 8002232:	460c      	mov	r4, r1
 8002234:	0719      	lsls	r1, r3, #28
 8002236:	9001      	str	r0, [sp, #4]
 8002238:	4616      	mov	r6, r2
 800223a:	d529      	bpl.n	8002290 <__sfvwrite_r+0x6c>
 800223c:	6922      	ldr	r2, [r4, #16]
 800223e:	b33a      	cbz	r2, 8002290 <__sfvwrite_r+0x6c>
 8002240:	f003 0802 	and.w	r8, r3, #2
 8002244:	fa1f f088 	uxth.w	r0, r8
 8002248:	6835      	ldr	r5, [r6, #0]
 800224a:	2800      	cmp	r0, #0
 800224c:	d02f      	beq.n	80022ae <__sfvwrite_r+0x8a>
 800224e:	f04f 0900 	mov.w	r9, #0
 8002252:	4fb3      	ldr	r7, [pc, #716]	; (8002520 <__sfvwrite_r+0x2fc>)
 8002254:	46c8      	mov	r8, r9
 8002256:	46b2      	mov	sl, r6
 8002258:	45b8      	cmp	r8, r7
 800225a:	4643      	mov	r3, r8
 800225c:	464a      	mov	r2, r9
 800225e:	bf28      	it	cs
 8002260:	463b      	movcs	r3, r7
 8002262:	9801      	ldr	r0, [sp, #4]
 8002264:	f1b8 0f00 	cmp.w	r8, #0
 8002268:	d050      	beq.n	800230c <__sfvwrite_r+0xe8>
 800226a:	69e1      	ldr	r1, [r4, #28]
 800226c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800226e:	47b0      	blx	r6
 8002270:	2800      	cmp	r0, #0
 8002272:	dd71      	ble.n	8002358 <__sfvwrite_r+0x134>
 8002274:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002278:	1a1b      	subs	r3, r3, r0
 800227a:	4481      	add	r9, r0
 800227c:	ebc0 0808 	rsb	r8, r0, r8
 8002280:	f8ca 3008 	str.w	r3, [sl, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e7      	bne.n	8002258 <__sfvwrite_r+0x34>
 8002288:	2000      	movs	r0, #0
 800228a:	b005      	add	sp, #20
 800228c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002290:	4621      	mov	r1, r4
 8002292:	9801      	ldr	r0, [sp, #4]
 8002294:	f001 ff52 	bl	800413c <__swsetup_r>
 8002298:	2800      	cmp	r0, #0
 800229a:	f040 8139 	bne.w	8002510 <__sfvwrite_r+0x2ec>
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	6835      	ldr	r5, [r6, #0]
 80022a2:	f003 0802 	and.w	r8, r3, #2
 80022a6:	fa1f f088 	uxth.w	r0, r8
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d1cf      	bne.n	800224e <__sfvwrite_r+0x2a>
 80022ae:	f013 0901 	ands.w	r9, r3, #1
 80022b2:	d15a      	bne.n	800236a <__sfvwrite_r+0x146>
 80022b4:	464f      	mov	r7, r9
 80022b6:	9602      	str	r6, [sp, #8]
 80022b8:	b31f      	cbz	r7, 8002302 <__sfvwrite_r+0xde>
 80022ba:	059a      	lsls	r2, r3, #22
 80022bc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80022c0:	d52c      	bpl.n	800231c <__sfvwrite_r+0xf8>
 80022c2:	4547      	cmp	r7, r8
 80022c4:	46c2      	mov	sl, r8
 80022c6:	f0c0 80a3 	bcc.w	8002410 <__sfvwrite_r+0x1ec>
 80022ca:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80022ce:	f040 80b0 	bne.w	8002432 <__sfvwrite_r+0x20e>
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	4652      	mov	r2, sl
 80022d6:	4649      	mov	r1, r9
 80022d8:	f000 f98a 	bl	80025f0 <memmove>
 80022dc:	68a0      	ldr	r0, [r4, #8]
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	ebc8 0000 	rsb	r0, r8, r0
 80022e4:	4453      	add	r3, sl
 80022e6:	60a0      	str	r0, [r4, #8]
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	4638      	mov	r0, r7
 80022ec:	9a02      	ldr	r2, [sp, #8]
 80022ee:	6893      	ldr	r3, [r2, #8]
 80022f0:	1a1b      	subs	r3, r3, r0
 80022f2:	4481      	add	r9, r0
 80022f4:	1a3f      	subs	r7, r7, r0
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0c5      	beq.n	8002288 <__sfvwrite_r+0x64>
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	2f00      	cmp	r7, #0
 8002300:	d1db      	bne.n	80022ba <__sfvwrite_r+0x96>
 8002302:	f8d5 9000 	ldr.w	r9, [r5]
 8002306:	686f      	ldr	r7, [r5, #4]
 8002308:	3508      	adds	r5, #8
 800230a:	e7d5      	b.n	80022b8 <__sfvwrite_r+0x94>
 800230c:	f8d5 9000 	ldr.w	r9, [r5]
 8002310:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8002314:	3508      	adds	r5, #8
 8002316:	e79f      	b.n	8002258 <__sfvwrite_r+0x34>
 8002318:	2000      	movs	r0, #0
 800231a:	4770      	bx	lr
 800231c:	6820      	ldr	r0, [r4, #0]
 800231e:	6923      	ldr	r3, [r4, #16]
 8002320:	4298      	cmp	r0, r3
 8002322:	d803      	bhi.n	800232c <__sfvwrite_r+0x108>
 8002324:	6961      	ldr	r1, [r4, #20]
 8002326:	428f      	cmp	r7, r1
 8002328:	f080 80b6 	bcs.w	8002498 <__sfvwrite_r+0x274>
 800232c:	45b8      	cmp	r8, r7
 800232e:	bf28      	it	cs
 8002330:	46b8      	movcs	r8, r7
 8002332:	4642      	mov	r2, r8
 8002334:	4649      	mov	r1, r9
 8002336:	f000 f95b 	bl	80025f0 <memmove>
 800233a:	68a3      	ldr	r3, [r4, #8]
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	ebc8 0303 	rsb	r3, r8, r3
 8002342:	4442      	add	r2, r8
 8002344:	60a3      	str	r3, [r4, #8]
 8002346:	6022      	str	r2, [r4, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d148      	bne.n	80023de <__sfvwrite_r+0x1ba>
 800234c:	4621      	mov	r1, r4
 800234e:	9801      	ldr	r0, [sp, #4]
 8002350:	f7ff fe1c 	bl	8001f8c <_fflush_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	d042      	beq.n	80023de <__sfvwrite_r+0x1ba>
 8002358:	89a3      	ldrh	r3, [r4, #12]
 800235a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800235e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002362:	81a3      	strh	r3, [r4, #12]
 8002364:	b005      	add	sp, #20
 8002366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236a:	4680      	mov	r8, r0
 800236c:	9002      	str	r0, [sp, #8]
 800236e:	4682      	mov	sl, r0
 8002370:	4681      	mov	r9, r0
 8002372:	f1b9 0f00 	cmp.w	r9, #0
 8002376:	d02a      	beq.n	80023ce <__sfvwrite_r+0x1aa>
 8002378:	9b02      	ldr	r3, [sp, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04c      	beq.n	8002418 <__sfvwrite_r+0x1f4>
 800237e:	6820      	ldr	r0, [r4, #0]
 8002380:	6923      	ldr	r3, [r4, #16]
 8002382:	6962      	ldr	r2, [r4, #20]
 8002384:	45c8      	cmp	r8, r9
 8002386:	46c3      	mov	fp, r8
 8002388:	bf28      	it	cs
 800238a:	46cb      	movcs	fp, r9
 800238c:	4298      	cmp	r0, r3
 800238e:	465f      	mov	r7, fp
 8002390:	d904      	bls.n	800239c <__sfvwrite_r+0x178>
 8002392:	68a3      	ldr	r3, [r4, #8]
 8002394:	4413      	add	r3, r2
 8002396:	459b      	cmp	fp, r3
 8002398:	f300 8090 	bgt.w	80024bc <__sfvwrite_r+0x298>
 800239c:	4593      	cmp	fp, r2
 800239e:	db20      	blt.n	80023e2 <__sfvwrite_r+0x1be>
 80023a0:	4613      	mov	r3, r2
 80023a2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80023a4:	69e1      	ldr	r1, [r4, #28]
 80023a6:	9801      	ldr	r0, [sp, #4]
 80023a8:	4652      	mov	r2, sl
 80023aa:	47b8      	blx	r7
 80023ac:	1e07      	subs	r7, r0, #0
 80023ae:	ddd3      	ble.n	8002358 <__sfvwrite_r+0x134>
 80023b0:	ebb8 0807 	subs.w	r8, r8, r7
 80023b4:	d023      	beq.n	80023fe <__sfvwrite_r+0x1da>
 80023b6:	68b3      	ldr	r3, [r6, #8]
 80023b8:	1bdb      	subs	r3, r3, r7
 80023ba:	44ba      	add	sl, r7
 80023bc:	ebc7 0909 	rsb	r9, r7, r9
 80023c0:	60b3      	str	r3, [r6, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f43f af60 	beq.w	8002288 <__sfvwrite_r+0x64>
 80023c8:	f1b9 0f00 	cmp.w	r9, #0
 80023cc:	d1d4      	bne.n	8002378 <__sfvwrite_r+0x154>
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8d5 a000 	ldr.w	sl, [r5]
 80023d4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80023d8:	9302      	str	r3, [sp, #8]
 80023da:	3508      	adds	r5, #8
 80023dc:	e7c9      	b.n	8002372 <__sfvwrite_r+0x14e>
 80023de:	4640      	mov	r0, r8
 80023e0:	e784      	b.n	80022ec <__sfvwrite_r+0xc8>
 80023e2:	465a      	mov	r2, fp
 80023e4:	4651      	mov	r1, sl
 80023e6:	f000 f903 	bl	80025f0 <memmove>
 80023ea:	68a2      	ldr	r2, [r4, #8]
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	ebcb 0202 	rsb	r2, fp, r2
 80023f2:	445b      	add	r3, fp
 80023f4:	ebb8 0807 	subs.w	r8, r8, r7
 80023f8:	60a2      	str	r2, [r4, #8]
 80023fa:	6023      	str	r3, [r4, #0]
 80023fc:	d1db      	bne.n	80023b6 <__sfvwrite_r+0x192>
 80023fe:	4621      	mov	r1, r4
 8002400:	9801      	ldr	r0, [sp, #4]
 8002402:	f7ff fdc3 	bl	8001f8c <_fflush_r>
 8002406:	2800      	cmp	r0, #0
 8002408:	d1a6      	bne.n	8002358 <__sfvwrite_r+0x134>
 800240a:	f8cd 8008 	str.w	r8, [sp, #8]
 800240e:	e7d2      	b.n	80023b6 <__sfvwrite_r+0x192>
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	46b8      	mov	r8, r7
 8002414:	46ba      	mov	sl, r7
 8002416:	e75d      	b.n	80022d4 <__sfvwrite_r+0xb0>
 8002418:	464a      	mov	r2, r9
 800241a:	210a      	movs	r1, #10
 800241c:	4650      	mov	r0, sl
 800241e:	f000 f897 	bl	8002550 <memchr>
 8002422:	2800      	cmp	r0, #0
 8002424:	d06f      	beq.n	8002506 <__sfvwrite_r+0x2e2>
 8002426:	3001      	adds	r0, #1
 8002428:	2301      	movs	r3, #1
 800242a:	ebca 0800 	rsb	r8, sl, r0
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	e7a5      	b.n	800237e <__sfvwrite_r+0x15a>
 8002432:	6962      	ldr	r2, [r4, #20]
 8002434:	6820      	ldr	r0, [r4, #0]
 8002436:	6921      	ldr	r1, [r4, #16]
 8002438:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800243c:	ebc1 0a00 	rsb	sl, r1, r0
 8002440:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8002444:	f10a 0001 	add.w	r0, sl, #1
 8002448:	ea4f 0868 	mov.w	r8, r8, asr #1
 800244c:	4438      	add	r0, r7
 800244e:	4540      	cmp	r0, r8
 8002450:	4642      	mov	r2, r8
 8002452:	bf84      	itt	hi
 8002454:	4680      	movhi	r8, r0
 8002456:	4642      	movhi	r2, r8
 8002458:	055b      	lsls	r3, r3, #21
 800245a:	d542      	bpl.n	80024e2 <__sfvwrite_r+0x2be>
 800245c:	4611      	mov	r1, r2
 800245e:	9801      	ldr	r0, [sp, #4]
 8002460:	f7fe fe26 	bl	80010b0 <_malloc_r>
 8002464:	4683      	mov	fp, r0
 8002466:	2800      	cmp	r0, #0
 8002468:	d055      	beq.n	8002516 <__sfvwrite_r+0x2f2>
 800246a:	4652      	mov	r2, sl
 800246c:	6921      	ldr	r1, [r4, #16]
 800246e:	f7ff f8d7 	bl	8001620 <memcpy>
 8002472:	89a3      	ldrh	r3, [r4, #12]
 8002474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	81a3      	strh	r3, [r4, #12]
 800247e:	ebca 0308 	rsb	r3, sl, r8
 8002482:	eb0b 000a 	add.w	r0, fp, sl
 8002486:	f8c4 8014 	str.w	r8, [r4, #20]
 800248a:	f8c4 b010 	str.w	fp, [r4, #16]
 800248e:	6020      	str	r0, [r4, #0]
 8002490:	60a3      	str	r3, [r4, #8]
 8002492:	46b8      	mov	r8, r7
 8002494:	46ba      	mov	sl, r7
 8002496:	e71d      	b.n	80022d4 <__sfvwrite_r+0xb0>
 8002498:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800249c:	42bb      	cmp	r3, r7
 800249e:	bf28      	it	cs
 80024a0:	463b      	movcs	r3, r7
 80024a2:	464a      	mov	r2, r9
 80024a4:	fb93 f3f1 	sdiv	r3, r3, r1
 80024a8:	9801      	ldr	r0, [sp, #4]
 80024aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	69e1      	ldr	r1, [r4, #28]
 80024b2:	47b0      	blx	r6
 80024b4:	2800      	cmp	r0, #0
 80024b6:	f73f af19 	bgt.w	80022ec <__sfvwrite_r+0xc8>
 80024ba:	e74d      	b.n	8002358 <__sfvwrite_r+0x134>
 80024bc:	461a      	mov	r2, r3
 80024be:	4651      	mov	r1, sl
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	f000 f895 	bl	80025f0 <memmove>
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	9b03      	ldr	r3, [sp, #12]
 80024ca:	9801      	ldr	r0, [sp, #4]
 80024cc:	441a      	add	r2, r3
 80024ce:	6022      	str	r2, [r4, #0]
 80024d0:	4621      	mov	r1, r4
 80024d2:	f7ff fd5b 	bl	8001f8c <_fflush_r>
 80024d6:	9b03      	ldr	r3, [sp, #12]
 80024d8:	2800      	cmp	r0, #0
 80024da:	f47f af3d 	bne.w	8002358 <__sfvwrite_r+0x134>
 80024de:	461f      	mov	r7, r3
 80024e0:	e766      	b.n	80023b0 <__sfvwrite_r+0x18c>
 80024e2:	9801      	ldr	r0, [sp, #4]
 80024e4:	f000 f8fe 	bl	80026e4 <_realloc_r>
 80024e8:	4683      	mov	fp, r0
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d1c7      	bne.n	800247e <__sfvwrite_r+0x25a>
 80024ee:	9d01      	ldr	r5, [sp, #4]
 80024f0:	6921      	ldr	r1, [r4, #16]
 80024f2:	4628      	mov	r0, r5
 80024f4:	f7ff fdae 	bl	8002054 <_free_r>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	220c      	movs	r2, #12
 80024fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002500:	b29b      	uxth	r3, r3
 8002502:	602a      	str	r2, [r5, #0]
 8002504:	e729      	b.n	800235a <__sfvwrite_r+0x136>
 8002506:	2301      	movs	r3, #1
 8002508:	f109 0801 	add.w	r8, r9, #1
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	e736      	b.n	800237e <__sfvwrite_r+0x15a>
 8002510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002514:	e6b9      	b.n	800228a <__sfvwrite_r+0x66>
 8002516:	9a01      	ldr	r2, [sp, #4]
 8002518:	230c      	movs	r3, #12
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	e71c      	b.n	800235a <__sfvwrite_r+0x136>
 8002520:	7ffffc00 	.word	0x7ffffc00

08002524 <_lseek_r>:
_lseek_r():
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	460d      	mov	r5, r1
 8002528:	4c08      	ldr	r4, [pc, #32]	; (800254c <_lseek_r+0x28>)
 800252a:	4611      	mov	r1, r2
 800252c:	4606      	mov	r6, r0
 800252e:	461a      	mov	r2, r3
 8002530:	4628      	mov	r0, r5
 8002532:	2300      	movs	r3, #0
 8002534:	6023      	str	r3, [r4, #0]
 8002536:	f7fe f91d 	bl	8000774 <_lseek>
 800253a:	1c43      	adds	r3, r0, #1
 800253c:	d000      	beq.n	8002540 <_lseek_r+0x1c>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0fb      	beq.n	800253e <_lseek_r+0x1a>
 8002546:	6033      	str	r3, [r6, #0]
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	bf00      	nop
 800254c:	20000b2c 	.word	0x20000b2c

08002550 <memchr>:
memchr():
 8002550:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002554:	2a10      	cmp	r2, #16
 8002556:	db2b      	blt.n	80025b0 <memchr+0x60>
 8002558:	f010 0f07 	tst.w	r0, #7
 800255c:	d008      	beq.n	8002570 <memchr+0x20>
 800255e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002562:	3a01      	subs	r2, #1
 8002564:	428b      	cmp	r3, r1
 8002566:	d02d      	beq.n	80025c4 <memchr+0x74>
 8002568:	f010 0f07 	tst.w	r0, #7
 800256c:	b342      	cbz	r2, 80025c0 <memchr+0x70>
 800256e:	d1f6      	bne.n	800255e <memchr+0xe>
 8002570:	b4f0      	push	{r4, r5, r6, r7}
 8002572:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002576:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800257a:	f022 0407 	bic.w	r4, r2, #7
 800257e:	f07f 0700 	mvns.w	r7, #0
 8002582:	2300      	movs	r3, #0
 8002584:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002588:	3c08      	subs	r4, #8
 800258a:	ea85 0501 	eor.w	r5, r5, r1
 800258e:	ea86 0601 	eor.w	r6, r6, r1
 8002592:	fa85 f547 	uadd8	r5, r5, r7
 8002596:	faa3 f587 	sel	r5, r3, r7
 800259a:	fa86 f647 	uadd8	r6, r6, r7
 800259e:	faa5 f687 	sel	r6, r5, r7
 80025a2:	b98e      	cbnz	r6, 80025c8 <memchr+0x78>
 80025a4:	d1ee      	bne.n	8002584 <memchr+0x34>
 80025a6:	bcf0      	pop	{r4, r5, r6, r7}
 80025a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80025ac:	f002 0207 	and.w	r2, r2, #7
 80025b0:	b132      	cbz	r2, 80025c0 <memchr+0x70>
 80025b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80025b6:	3a01      	subs	r2, #1
 80025b8:	ea83 0301 	eor.w	r3, r3, r1
 80025bc:	b113      	cbz	r3, 80025c4 <memchr+0x74>
 80025be:	d1f8      	bne.n	80025b2 <memchr+0x62>
 80025c0:	2000      	movs	r0, #0
 80025c2:	4770      	bx	lr
 80025c4:	3801      	subs	r0, #1
 80025c6:	4770      	bx	lr
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	bf06      	itte	eq
 80025cc:	4635      	moveq	r5, r6
 80025ce:	3803      	subeq	r0, #3
 80025d0:	3807      	subne	r0, #7
 80025d2:	f015 0f01 	tst.w	r5, #1
 80025d6:	d107      	bne.n	80025e8 <memchr+0x98>
 80025d8:	3001      	adds	r0, #1
 80025da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80025de:	bf02      	ittt	eq
 80025e0:	3001      	addeq	r0, #1
 80025e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80025e6:	3001      	addeq	r0, #1
 80025e8:	bcf0      	pop	{r4, r5, r6, r7}
 80025ea:	3801      	subs	r0, #1
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <memmove>:
memmove():
 80025f0:	4288      	cmp	r0, r1
 80025f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f4:	d90d      	bls.n	8002612 <memmove+0x22>
 80025f6:	188b      	adds	r3, r1, r2
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d20a      	bcs.n	8002612 <memmove+0x22>
 80025fc:	1881      	adds	r1, r0, r2
 80025fe:	2a00      	cmp	r2, #0
 8002600:	d051      	beq.n	80026a6 <memmove+0xb6>
 8002602:	1a9a      	subs	r2, r3, r2
 8002604:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002608:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800260c:	4293      	cmp	r3, r2
 800260e:	d1f9      	bne.n	8002604 <memmove+0x14>
 8002610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002612:	2a0f      	cmp	r2, #15
 8002614:	d948      	bls.n	80026a8 <memmove+0xb8>
 8002616:	ea41 0300 	orr.w	r3, r1, r0
 800261a:	079b      	lsls	r3, r3, #30
 800261c:	d146      	bne.n	80026ac <memmove+0xbc>
 800261e:	f100 0410 	add.w	r4, r0, #16
 8002622:	f101 0310 	add.w	r3, r1, #16
 8002626:	4615      	mov	r5, r2
 8002628:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800262c:	f844 6c10 	str.w	r6, [r4, #-16]
 8002630:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8002634:	f844 6c0c 	str.w	r6, [r4, #-12]
 8002638:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800263c:	f844 6c08 	str.w	r6, [r4, #-8]
 8002640:	3d10      	subs	r5, #16
 8002642:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8002646:	f844 6c04 	str.w	r6, [r4, #-4]
 800264a:	2d0f      	cmp	r5, #15
 800264c:	f103 0310 	add.w	r3, r3, #16
 8002650:	f104 0410 	add.w	r4, r4, #16
 8002654:	d8e8      	bhi.n	8002628 <memmove+0x38>
 8002656:	f1a2 0310 	sub.w	r3, r2, #16
 800265a:	f023 030f 	bic.w	r3, r3, #15
 800265e:	f002 0e0f 	and.w	lr, r2, #15
 8002662:	3310      	adds	r3, #16
 8002664:	f1be 0f03 	cmp.w	lr, #3
 8002668:	4419      	add	r1, r3
 800266a:	4403      	add	r3, r0
 800266c:	d921      	bls.n	80026b2 <memmove+0xc2>
 800266e:	1f1e      	subs	r6, r3, #4
 8002670:	460d      	mov	r5, r1
 8002672:	4674      	mov	r4, lr
 8002674:	3c04      	subs	r4, #4
 8002676:	f855 7b04 	ldr.w	r7, [r5], #4
 800267a:	f846 7f04 	str.w	r7, [r6, #4]!
 800267e:	2c03      	cmp	r4, #3
 8002680:	d8f8      	bhi.n	8002674 <memmove+0x84>
 8002682:	f1ae 0404 	sub.w	r4, lr, #4
 8002686:	f024 0403 	bic.w	r4, r4, #3
 800268a:	3404      	adds	r4, #4
 800268c:	4423      	add	r3, r4
 800268e:	4421      	add	r1, r4
 8002690:	f002 0203 	and.w	r2, r2, #3
 8002694:	b162      	cbz	r2, 80026b0 <memmove+0xc0>
 8002696:	3b01      	subs	r3, #1
 8002698:	440a      	add	r2, r1
 800269a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800269e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026a2:	428a      	cmp	r2, r1
 80026a4:	d1f9      	bne.n	800269a <memmove+0xaa>
 80026a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a8:	4603      	mov	r3, r0
 80026aa:	e7f3      	b.n	8002694 <memmove+0xa4>
 80026ac:	4603      	mov	r3, r0
 80026ae:	e7f2      	b.n	8002696 <memmove+0xa6>
 80026b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b2:	4672      	mov	r2, lr
 80026b4:	e7ee      	b.n	8002694 <memmove+0xa4>
 80026b6:	bf00      	nop

080026b8 <_read_r>:
_read_r():
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	460d      	mov	r5, r1
 80026bc:	4c08      	ldr	r4, [pc, #32]	; (80026e0 <_read_r+0x28>)
 80026be:	4611      	mov	r1, r2
 80026c0:	4606      	mov	r6, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4628      	mov	r0, r5
 80026c6:	2300      	movs	r3, #0
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	f7fd ffd9 	bl	8000680 <_read>
 80026ce:	1c43      	adds	r3, r0, #1
 80026d0:	d000      	beq.n	80026d4 <_read_r+0x1c>
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0fb      	beq.n	80026d2 <_read_r+0x1a>
 80026da:	6033      	str	r3, [r6, #0]
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	bf00      	nop
 80026e0:	20000b2c 	.word	0x20000b2c

080026e4 <_realloc_r>:
_realloc_r():
 80026e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e8:	4617      	mov	r7, r2
 80026ea:	b083      	sub	sp, #12
 80026ec:	2900      	cmp	r1, #0
 80026ee:	f000 80c1 	beq.w	8002874 <_realloc_r+0x190>
 80026f2:	460e      	mov	r6, r1
 80026f4:	4681      	mov	r9, r0
 80026f6:	f107 050b 	add.w	r5, r7, #11
 80026fa:	f7ff f879 	bl	80017f0 <__malloc_lock>
 80026fe:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8002702:	2d16      	cmp	r5, #22
 8002704:	f02e 0403 	bic.w	r4, lr, #3
 8002708:	f1a6 0808 	sub.w	r8, r6, #8
 800270c:	d840      	bhi.n	8002790 <_realloc_r+0xac>
 800270e:	2210      	movs	r2, #16
 8002710:	4615      	mov	r5, r2
 8002712:	42af      	cmp	r7, r5
 8002714:	d841      	bhi.n	800279a <_realloc_r+0xb6>
 8002716:	4294      	cmp	r4, r2
 8002718:	da75      	bge.n	8002806 <_realloc_r+0x122>
 800271a:	4bc9      	ldr	r3, [pc, #804]	; (8002a40 <_realloc_r+0x35c>)
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	eb08 0004 	add.w	r0, r8, r4
 8002722:	4288      	cmp	r0, r1
 8002724:	6841      	ldr	r1, [r0, #4]
 8002726:	f000 80d9 	beq.w	80028dc <_realloc_r+0x1f8>
 800272a:	f021 0301 	bic.w	r3, r1, #1
 800272e:	4403      	add	r3, r0
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	07db      	lsls	r3, r3, #31
 8002734:	d57d      	bpl.n	8002832 <_realloc_r+0x14e>
 8002736:	f01e 0f01 	tst.w	lr, #1
 800273a:	d035      	beq.n	80027a8 <_realloc_r+0xc4>
 800273c:	4639      	mov	r1, r7
 800273e:	4648      	mov	r0, r9
 8002740:	f7fe fcb6 	bl	80010b0 <_malloc_r>
 8002744:	4607      	mov	r7, r0
 8002746:	b1e0      	cbz	r0, 8002782 <_realloc_r+0x9e>
 8002748:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	4443      	add	r3, r8
 8002752:	f1a0 0208 	sub.w	r2, r0, #8
 8002756:	429a      	cmp	r2, r3
 8002758:	f000 8144 	beq.w	80029e4 <_realloc_r+0x300>
 800275c:	1f22      	subs	r2, r4, #4
 800275e:	2a24      	cmp	r2, #36	; 0x24
 8002760:	f200 8131 	bhi.w	80029c6 <_realloc_r+0x2e2>
 8002764:	2a13      	cmp	r2, #19
 8002766:	f200 8104 	bhi.w	8002972 <_realloc_r+0x28e>
 800276a:	4603      	mov	r3, r0
 800276c:	4632      	mov	r2, r6
 800276e:	6811      	ldr	r1, [r2, #0]
 8002770:	6019      	str	r1, [r3, #0]
 8002772:	6851      	ldr	r1, [r2, #4]
 8002774:	6059      	str	r1, [r3, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	4631      	mov	r1, r6
 800277c:	4648      	mov	r0, r9
 800277e:	f7ff fc69 	bl	8002054 <_free_r>
 8002782:	4648      	mov	r0, r9
 8002784:	f7ff f836 	bl	80017f4 <__malloc_unlock>
 8002788:	4638      	mov	r0, r7
 800278a:	b003      	add	sp, #12
 800278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002790:	f025 0507 	bic.w	r5, r5, #7
 8002794:	2d00      	cmp	r5, #0
 8002796:	462a      	mov	r2, r5
 8002798:	dabb      	bge.n	8002712 <_realloc_r+0x2e>
 800279a:	230c      	movs	r3, #12
 800279c:	2000      	movs	r0, #0
 800279e:	f8c9 3000 	str.w	r3, [r9]
 80027a2:	b003      	add	sp, #12
 80027a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80027ac:	ebc3 0a08 	rsb	sl, r3, r8
 80027b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80027b4:	f023 0c03 	bic.w	ip, r3, #3
 80027b8:	eb04 030c 	add.w	r3, r4, ip
 80027bc:	4293      	cmp	r3, r2
 80027be:	dbbd      	blt.n	800273c <_realloc_r+0x58>
 80027c0:	4657      	mov	r7, sl
 80027c2:	f8da 100c 	ldr.w	r1, [sl, #12]
 80027c6:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80027ca:	1f22      	subs	r2, r4, #4
 80027cc:	2a24      	cmp	r2, #36	; 0x24
 80027ce:	60c1      	str	r1, [r0, #12]
 80027d0:	6088      	str	r0, [r1, #8]
 80027d2:	f200 8117 	bhi.w	8002a04 <_realloc_r+0x320>
 80027d6:	2a13      	cmp	r2, #19
 80027d8:	f240 8112 	bls.w	8002a00 <_realloc_r+0x31c>
 80027dc:	6831      	ldr	r1, [r6, #0]
 80027de:	f8ca 1008 	str.w	r1, [sl, #8]
 80027e2:	6871      	ldr	r1, [r6, #4]
 80027e4:	f8ca 100c 	str.w	r1, [sl, #12]
 80027e8:	2a1b      	cmp	r2, #27
 80027ea:	f200 812b 	bhi.w	8002a44 <_realloc_r+0x360>
 80027ee:	3608      	adds	r6, #8
 80027f0:	f10a 0210 	add.w	r2, sl, #16
 80027f4:	6831      	ldr	r1, [r6, #0]
 80027f6:	6011      	str	r1, [r2, #0]
 80027f8:	6871      	ldr	r1, [r6, #4]
 80027fa:	6051      	str	r1, [r2, #4]
 80027fc:	68b1      	ldr	r1, [r6, #8]
 80027fe:	6091      	str	r1, [r2, #8]
 8002800:	463e      	mov	r6, r7
 8002802:	461c      	mov	r4, r3
 8002804:	46d0      	mov	r8, sl
 8002806:	1b63      	subs	r3, r4, r5
 8002808:	2b0f      	cmp	r3, #15
 800280a:	d81d      	bhi.n	8002848 <_realloc_r+0x164>
 800280c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	4323      	orrs	r3, r4
 8002816:	4444      	add	r4, r8
 8002818:	f8c8 3004 	str.w	r3, [r8, #4]
 800281c:	6863      	ldr	r3, [r4, #4]
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6063      	str	r3, [r4, #4]
 8002824:	4648      	mov	r0, r9
 8002826:	f7fe ffe5 	bl	80017f4 <__malloc_unlock>
 800282a:	4630      	mov	r0, r6
 800282c:	b003      	add	sp, #12
 800282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002832:	f021 0103 	bic.w	r1, r1, #3
 8002836:	4421      	add	r1, r4
 8002838:	4291      	cmp	r1, r2
 800283a:	db21      	blt.n	8002880 <_realloc_r+0x19c>
 800283c:	68c3      	ldr	r3, [r0, #12]
 800283e:	6882      	ldr	r2, [r0, #8]
 8002840:	460c      	mov	r4, r1
 8002842:	60d3      	str	r3, [r2, #12]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	e7de      	b.n	8002806 <_realloc_r+0x122>
 8002848:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800284c:	eb08 0105 	add.w	r1, r8, r5
 8002850:	f002 0201 	and.w	r2, r2, #1
 8002854:	4315      	orrs	r5, r2
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	440b      	add	r3, r1
 800285c:	f8c8 5004 	str.w	r5, [r8, #4]
 8002860:	604a      	str	r2, [r1, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	3108      	adds	r1, #8
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	4648      	mov	r0, r9
 800286e:	f7ff fbf1 	bl	8002054 <_free_r>
 8002872:	e7d7      	b.n	8002824 <_realloc_r+0x140>
 8002874:	4611      	mov	r1, r2
 8002876:	b003      	add	sp, #12
 8002878:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287c:	f7fe bc18 	b.w	80010b0 <_malloc_r>
 8002880:	f01e 0f01 	tst.w	lr, #1
 8002884:	f47f af5a 	bne.w	800273c <_realloc_r+0x58>
 8002888:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800288c:	ebc3 0a08 	rsb	sl, r3, r8
 8002890:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002894:	f023 0c03 	bic.w	ip, r3, #3
 8002898:	eb01 0e0c 	add.w	lr, r1, ip
 800289c:	4596      	cmp	lr, r2
 800289e:	db8b      	blt.n	80027b8 <_realloc_r+0xd4>
 80028a0:	68c3      	ldr	r3, [r0, #12]
 80028a2:	6882      	ldr	r2, [r0, #8]
 80028a4:	4657      	mov	r7, sl
 80028a6:	60d3      	str	r3, [r2, #12]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80028ae:	f8da 300c 	ldr.w	r3, [sl, #12]
 80028b2:	60cb      	str	r3, [r1, #12]
 80028b4:	1f22      	subs	r2, r4, #4
 80028b6:	2a24      	cmp	r2, #36	; 0x24
 80028b8:	6099      	str	r1, [r3, #8]
 80028ba:	f200 8099 	bhi.w	80029f0 <_realloc_r+0x30c>
 80028be:	2a13      	cmp	r2, #19
 80028c0:	d962      	bls.n	8002988 <_realloc_r+0x2a4>
 80028c2:	6833      	ldr	r3, [r6, #0]
 80028c4:	f8ca 3008 	str.w	r3, [sl, #8]
 80028c8:	6873      	ldr	r3, [r6, #4]
 80028ca:	f8ca 300c 	str.w	r3, [sl, #12]
 80028ce:	2a1b      	cmp	r2, #27
 80028d0:	f200 80a0 	bhi.w	8002a14 <_realloc_r+0x330>
 80028d4:	3608      	adds	r6, #8
 80028d6:	f10a 0310 	add.w	r3, sl, #16
 80028da:	e056      	b.n	800298a <_realloc_r+0x2a6>
 80028dc:	f021 0b03 	bic.w	fp, r1, #3
 80028e0:	44a3      	add	fp, r4
 80028e2:	f105 0010 	add.w	r0, r5, #16
 80028e6:	4583      	cmp	fp, r0
 80028e8:	da59      	bge.n	800299e <_realloc_r+0x2ba>
 80028ea:	f01e 0f01 	tst.w	lr, #1
 80028ee:	f47f af25 	bne.w	800273c <_realloc_r+0x58>
 80028f2:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80028f6:	ebc1 0a08 	rsb	sl, r1, r8
 80028fa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80028fe:	f021 0c03 	bic.w	ip, r1, #3
 8002902:	44e3      	add	fp, ip
 8002904:	4558      	cmp	r0, fp
 8002906:	f73f af57 	bgt.w	80027b8 <_realloc_r+0xd4>
 800290a:	4657      	mov	r7, sl
 800290c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8002910:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8002914:	1f22      	subs	r2, r4, #4
 8002916:	2a24      	cmp	r2, #36	; 0x24
 8002918:	60c1      	str	r1, [r0, #12]
 800291a:	6088      	str	r0, [r1, #8]
 800291c:	f200 80b4 	bhi.w	8002a88 <_realloc_r+0x3a4>
 8002920:	2a13      	cmp	r2, #19
 8002922:	f240 80a5 	bls.w	8002a70 <_realloc_r+0x38c>
 8002926:	6831      	ldr	r1, [r6, #0]
 8002928:	f8ca 1008 	str.w	r1, [sl, #8]
 800292c:	6871      	ldr	r1, [r6, #4]
 800292e:	f8ca 100c 	str.w	r1, [sl, #12]
 8002932:	2a1b      	cmp	r2, #27
 8002934:	f200 80af 	bhi.w	8002a96 <_realloc_r+0x3b2>
 8002938:	3608      	adds	r6, #8
 800293a:	f10a 0210 	add.w	r2, sl, #16
 800293e:	6831      	ldr	r1, [r6, #0]
 8002940:	6011      	str	r1, [r2, #0]
 8002942:	6871      	ldr	r1, [r6, #4]
 8002944:	6051      	str	r1, [r2, #4]
 8002946:	68b1      	ldr	r1, [r6, #8]
 8002948:	6091      	str	r1, [r2, #8]
 800294a:	eb0a 0105 	add.w	r1, sl, r5
 800294e:	ebc5 020b 	rsb	r2, r5, fp
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	6099      	str	r1, [r3, #8]
 8002958:	604a      	str	r2, [r1, #4]
 800295a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	431d      	orrs	r5, r3
 8002964:	4648      	mov	r0, r9
 8002966:	f8ca 5004 	str.w	r5, [sl, #4]
 800296a:	f7fe ff43 	bl	80017f4 <__malloc_unlock>
 800296e:	4638      	mov	r0, r7
 8002970:	e75c      	b.n	800282c <_realloc_r+0x148>
 8002972:	6833      	ldr	r3, [r6, #0]
 8002974:	6003      	str	r3, [r0, #0]
 8002976:	6873      	ldr	r3, [r6, #4]
 8002978:	6043      	str	r3, [r0, #4]
 800297a:	2a1b      	cmp	r2, #27
 800297c:	d827      	bhi.n	80029ce <_realloc_r+0x2ea>
 800297e:	f100 0308 	add.w	r3, r0, #8
 8002982:	f106 0208 	add.w	r2, r6, #8
 8002986:	e6f2      	b.n	800276e <_realloc_r+0x8a>
 8002988:	463b      	mov	r3, r7
 800298a:	6832      	ldr	r2, [r6, #0]
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	6872      	ldr	r2, [r6, #4]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	68b2      	ldr	r2, [r6, #8]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	463e      	mov	r6, r7
 8002998:	4674      	mov	r4, lr
 800299a:	46d0      	mov	r8, sl
 800299c:	e733      	b.n	8002806 <_realloc_r+0x122>
 800299e:	eb08 0105 	add.w	r1, r8, r5
 80029a2:	ebc5 0b0b 	rsb	fp, r5, fp
 80029a6:	f04b 0201 	orr.w	r2, fp, #1
 80029aa:	6099      	str	r1, [r3, #8]
 80029ac:	604a      	str	r2, [r1, #4]
 80029ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	431d      	orrs	r5, r3
 80029b8:	4648      	mov	r0, r9
 80029ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80029be:	f7fe ff19 	bl	80017f4 <__malloc_unlock>
 80029c2:	4630      	mov	r0, r6
 80029c4:	e732      	b.n	800282c <_realloc_r+0x148>
 80029c6:	4631      	mov	r1, r6
 80029c8:	f7ff fe12 	bl	80025f0 <memmove>
 80029cc:	e6d5      	b.n	800277a <_realloc_r+0x96>
 80029ce:	68b3      	ldr	r3, [r6, #8]
 80029d0:	6083      	str	r3, [r0, #8]
 80029d2:	68f3      	ldr	r3, [r6, #12]
 80029d4:	60c3      	str	r3, [r0, #12]
 80029d6:	2a24      	cmp	r2, #36	; 0x24
 80029d8:	d028      	beq.n	8002a2c <_realloc_r+0x348>
 80029da:	f100 0310 	add.w	r3, r0, #16
 80029de:	f106 0210 	add.w	r2, r6, #16
 80029e2:	e6c4      	b.n	800276e <_realloc_r+0x8a>
 80029e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80029e8:	f023 0303 	bic.w	r3, r3, #3
 80029ec:	441c      	add	r4, r3
 80029ee:	e70a      	b.n	8002806 <_realloc_r+0x122>
 80029f0:	4631      	mov	r1, r6
 80029f2:	4638      	mov	r0, r7
 80029f4:	4674      	mov	r4, lr
 80029f6:	46d0      	mov	r8, sl
 80029f8:	f7ff fdfa 	bl	80025f0 <memmove>
 80029fc:	463e      	mov	r6, r7
 80029fe:	e702      	b.n	8002806 <_realloc_r+0x122>
 8002a00:	463a      	mov	r2, r7
 8002a02:	e6f7      	b.n	80027f4 <_realloc_r+0x110>
 8002a04:	4631      	mov	r1, r6
 8002a06:	4638      	mov	r0, r7
 8002a08:	461c      	mov	r4, r3
 8002a0a:	46d0      	mov	r8, sl
 8002a0c:	f7ff fdf0 	bl	80025f0 <memmove>
 8002a10:	463e      	mov	r6, r7
 8002a12:	e6f8      	b.n	8002806 <_realloc_r+0x122>
 8002a14:	68b3      	ldr	r3, [r6, #8]
 8002a16:	f8ca 3010 	str.w	r3, [sl, #16]
 8002a1a:	68f3      	ldr	r3, [r6, #12]
 8002a1c:	f8ca 3014 	str.w	r3, [sl, #20]
 8002a20:	2a24      	cmp	r2, #36	; 0x24
 8002a22:	d01b      	beq.n	8002a5c <_realloc_r+0x378>
 8002a24:	3610      	adds	r6, #16
 8002a26:	f10a 0318 	add.w	r3, sl, #24
 8002a2a:	e7ae      	b.n	800298a <_realloc_r+0x2a6>
 8002a2c:	6933      	ldr	r3, [r6, #16]
 8002a2e:	6103      	str	r3, [r0, #16]
 8002a30:	6973      	ldr	r3, [r6, #20]
 8002a32:	6143      	str	r3, [r0, #20]
 8002a34:	f106 0218 	add.w	r2, r6, #24
 8002a38:	f100 0318 	add.w	r3, r0, #24
 8002a3c:	e697      	b.n	800276e <_realloc_r+0x8a>
 8002a3e:	bf00      	nop
 8002a40:	2000044c 	.word	0x2000044c
 8002a44:	68b1      	ldr	r1, [r6, #8]
 8002a46:	f8ca 1010 	str.w	r1, [sl, #16]
 8002a4a:	68f1      	ldr	r1, [r6, #12]
 8002a4c:	f8ca 1014 	str.w	r1, [sl, #20]
 8002a50:	2a24      	cmp	r2, #36	; 0x24
 8002a52:	d00f      	beq.n	8002a74 <_realloc_r+0x390>
 8002a54:	3610      	adds	r6, #16
 8002a56:	f10a 0218 	add.w	r2, sl, #24
 8002a5a:	e6cb      	b.n	80027f4 <_realloc_r+0x110>
 8002a5c:	6933      	ldr	r3, [r6, #16]
 8002a5e:	f8ca 3018 	str.w	r3, [sl, #24]
 8002a62:	6973      	ldr	r3, [r6, #20]
 8002a64:	f8ca 301c 	str.w	r3, [sl, #28]
 8002a68:	3618      	adds	r6, #24
 8002a6a:	f10a 0320 	add.w	r3, sl, #32
 8002a6e:	e78c      	b.n	800298a <_realloc_r+0x2a6>
 8002a70:	463a      	mov	r2, r7
 8002a72:	e764      	b.n	800293e <_realloc_r+0x25a>
 8002a74:	6932      	ldr	r2, [r6, #16]
 8002a76:	f8ca 2018 	str.w	r2, [sl, #24]
 8002a7a:	6972      	ldr	r2, [r6, #20]
 8002a7c:	f8ca 201c 	str.w	r2, [sl, #28]
 8002a80:	3618      	adds	r6, #24
 8002a82:	f10a 0220 	add.w	r2, sl, #32
 8002a86:	e6b5      	b.n	80027f4 <_realloc_r+0x110>
 8002a88:	4631      	mov	r1, r6
 8002a8a:	4638      	mov	r0, r7
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	f7ff fdaf 	bl	80025f0 <memmove>
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	e759      	b.n	800294a <_realloc_r+0x266>
 8002a96:	68b1      	ldr	r1, [r6, #8]
 8002a98:	f8ca 1010 	str.w	r1, [sl, #16]
 8002a9c:	68f1      	ldr	r1, [r6, #12]
 8002a9e:	f8ca 1014 	str.w	r1, [sl, #20]
 8002aa2:	2a24      	cmp	r2, #36	; 0x24
 8002aa4:	d003      	beq.n	8002aae <_realloc_r+0x3ca>
 8002aa6:	3610      	adds	r6, #16
 8002aa8:	f10a 0218 	add.w	r2, sl, #24
 8002aac:	e747      	b.n	800293e <_realloc_r+0x25a>
 8002aae:	6932      	ldr	r2, [r6, #16]
 8002ab0:	f8ca 2018 	str.w	r2, [sl, #24]
 8002ab4:	6972      	ldr	r2, [r6, #20]
 8002ab6:	f8ca 201c 	str.w	r2, [sl, #28]
 8002aba:	3618      	adds	r6, #24
 8002abc:	f10a 0220 	add.w	r2, sl, #32
 8002ac0:	e73d      	b.n	800293e <_realloc_r+0x25a>
 8002ac2:	bf00      	nop

08002ac4 <_svfprintf_r>:
_svfprintf_r():
 8002ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac8:	b0bf      	sub	sp, #252	; 0xfc
 8002aca:	460c      	mov	r4, r1
 8002acc:	9107      	str	r1, [sp, #28]
 8002ace:	4692      	mov	sl, r2
 8002ad0:	930d      	str	r3, [sp, #52]	; 0x34
 8002ad2:	9009      	str	r0, [sp, #36]	; 0x24
 8002ad4:	f002 fb54 	bl	8005180 <_localeconv_r>
 8002ad8:	6803      	ldr	r3, [r0, #0]
 8002ada:	9314      	str	r3, [sp, #80]	; 0x50
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f88f 	bl	8001c00 <strlen>
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	9015      	str	r0, [sp, #84]	; 0x54
 8002ae6:	061d      	lsls	r5, r3, #24
 8002ae8:	d503      	bpl.n	8002af2 <_svfprintf_r+0x2e>
 8002aea:	6923      	ldr	r3, [r4, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f001 8127 	beq.w	8003d40 <_svfprintf_r+0x127c>
 8002af2:	2300      	movs	r3, #0
 8002af4:	461a      	mov	r2, r3
 8002af6:	9311      	str	r3, [sp, #68]	; 0x44
 8002af8:	9323      	str	r3, [sp, #140]	; 0x8c
 8002afa:	9322      	str	r3, [sp, #136]	; 0x88
 8002afc:	9316      	str	r3, [sp, #88]	; 0x58
 8002afe:	930a      	str	r3, [sp, #40]	; 0x28
 8002b00:	ab2e      	add	r3, sp, #184	; 0xb8
 8002b02:	9321      	str	r3, [sp, #132]	; 0x84
 8002b04:	4699      	mov	r9, r3
 8002b06:	9212      	str	r2, [sp, #72]	; 0x48
 8002b08:	9213      	str	r2, [sp, #76]	; 0x4c
 8002b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b0e:	4654      	mov	r4, sl
 8002b10:	b1eb      	cbz	r3, 8002b4e <_svfprintf_r+0x8a>
 8002b12:	2b25      	cmp	r3, #37	; 0x25
 8002b14:	d102      	bne.n	8002b1c <_svfprintf_r+0x58>
 8002b16:	e01a      	b.n	8002b4e <_svfprintf_r+0x8a>
 8002b18:	2b25      	cmp	r3, #37	; 0x25
 8002b1a:	d003      	beq.n	8002b24 <_svfprintf_r+0x60>
 8002b1c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <_svfprintf_r+0x54>
 8002b24:	ebca 0504 	rsb	r5, sl, r4
 8002b28:	b18d      	cbz	r5, 8002b4e <_svfprintf_r+0x8a>
 8002b2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002b2e:	f8c9 a000 	str.w	sl, [r9]
 8002b32:	3301      	adds	r3, #1
 8002b34:	442a      	add	r2, r5
 8002b36:	2b07      	cmp	r3, #7
 8002b38:	f8c9 5004 	str.w	r5, [r9, #4]
 8002b3c:	9223      	str	r2, [sp, #140]	; 0x8c
 8002b3e:	9322      	str	r3, [sp, #136]	; 0x88
 8002b40:	f300 80a6 	bgt.w	8002c90 <_svfprintf_r+0x1cc>
 8002b44:	f109 0908 	add.w	r9, r9, #8
 8002b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b4a:	442b      	add	r3, r5
 8002b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8002b4e:	7823      	ldrb	r3, [r4, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a6 	beq.w	8002ca2 <_svfprintf_r+0x1de>
 8002b56:	2300      	movs	r3, #0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002b5e:	4619      	mov	r1, r3
 8002b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b62:	9306      	str	r3, [sp, #24]
 8002b64:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002b68:	7863      	ldrb	r3, [r4, #1]
 8002b6a:	f104 0a01 	add.w	sl, r4, #1
 8002b6e:	465d      	mov	r5, fp
 8002b70:	f10a 0a01 	add.w	sl, sl, #1
 8002b74:	f1a3 0020 	sub.w	r0, r3, #32
 8002b78:	2858      	cmp	r0, #88	; 0x58
 8002b7a:	f200 8418 	bhi.w	80033ae <_svfprintf_r+0x8ea>
 8002b7e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002b82:	037c      	.short	0x037c
 8002b84:	04160416 	.word	0x04160416
 8002b88:	04160384 	.word	0x04160384
 8002b8c:	04160416 	.word	0x04160416
 8002b90:	04160416 	.word	0x04160416
 8002b94:	038b0416 	.word	0x038b0416
 8002b98:	04160399 	.word	0x04160399
 8002b9c:	00e2005d 	.word	0x00e2005d
 8002ba0:	00fe0416 	.word	0x00fe0416
 8002ba4:	01050105 	.word	0x01050105
 8002ba8:	01050105 	.word	0x01050105
 8002bac:	01050105 	.word	0x01050105
 8002bb0:	01050105 	.word	0x01050105
 8002bb4:	04160105 	.word	0x04160105
 8002bb8:	04160416 	.word	0x04160416
 8002bbc:	04160416 	.word	0x04160416
 8002bc0:	04160416 	.word	0x04160416
 8002bc4:	04160416 	.word	0x04160416
 8002bc8:	01150416 	.word	0x01150416
 8002bcc:	04160284 	.word	0x04160284
 8002bd0:	04160284 	.word	0x04160284
 8002bd4:	04160416 	.word	0x04160416
 8002bd8:	02ba0416 	.word	0x02ba0416
 8002bdc:	04160416 	.word	0x04160416
 8002be0:	041602c1 	.word	0x041602c1
 8002be4:	04160416 	.word	0x04160416
 8002be8:	04160416 	.word	0x04160416
 8002bec:	041602eb 	.word	0x041602eb
 8002bf0:	03190416 	.word	0x03190416
 8002bf4:	04160416 	.word	0x04160416
 8002bf8:	04160416 	.word	0x04160416
 8002bfc:	04160416 	.word	0x04160416
 8002c00:	04160416 	.word	0x04160416
 8002c04:	04160416 	.word	0x04160416
 8002c08:	036d035a 	.word	0x036d035a
 8002c0c:	02840284 	.word	0x02840284
 8002c10:	03750284 	.word	0x03750284
 8002c14:	0416036d 	.word	0x0416036d
 8002c18:	03c40416 	.word	0x03c40416
 8002c1c:	03ce0416 	.word	0x03ce0416
 8002c20:	006400a3 	.word	0x006400a3
 8002c24:	041603e1 	.word	0x041603e1
 8002c28:	041603e8 	.word	0x041603e8
 8002c2c:	0416039e 	.word	0x0416039e
 8002c30:	03af0416 	.word	0x03af0416
 8002c34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002c36:	930d      	str	r3, [sp, #52]	; 0x34
 8002c38:	4240      	negs	r0, r0
 8002c3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8002c3c:	9b06      	ldr	r3, [sp, #24]
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	9306      	str	r3, [sp, #24]
 8002c44:	f89a 3000 	ldrb.w	r3, [sl]
 8002c48:	e792      	b.n	8002b70 <_svfprintf_r+0xac>
 8002c4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002c4c:	46ab      	mov	fp, r5
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6804      	ldr	r4, [r0, #0]
 8002c52:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002c56:	1d07      	adds	r7, r0, #4
 8002c58:	9806      	ldr	r0, [sp, #24]
 8002c5a:	2330      	movs	r3, #48	; 0x30
 8002c5c:	2278      	movs	r2, #120	; 0x78
 8002c5e:	458b      	cmp	fp, r1
 8002c60:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8002c64:	f04f 0500 	mov.w	r5, #0
 8002c68:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8002c6c:	f040 0302 	orr.w	r3, r0, #2
 8002c70:	f2c0 83ba 	blt.w	80033e8 <_svfprintf_r+0x924>
 8002c74:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	9306      	str	r3, [sp, #24]
 8002c7e:	ea54 0305 	orrs.w	r3, r4, r5
 8002c82:	970d      	str	r7, [sp, #52]	; 0x34
 8002c84:	f000 8386 	beq.w	8003394 <_svfprintf_r+0x8d0>
 8002c88:	460f      	mov	r7, r1
 8002c8a:	920f      	str	r2, [sp, #60]	; 0x3c
 8002c8c:	48b2      	ldr	r0, [pc, #712]	; (8002f58 <_svfprintf_r+0x494>)
 8002c8e:	e2c2      	b.n	8003216 <_svfprintf_r+0x752>
 8002c90:	aa21      	add	r2, sp, #132	; 0x84
 8002c92:	9907      	ldr	r1, [sp, #28]
 8002c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c96:	f002 fe1f 	bl	80058d8 <__ssprint_r>
 8002c9a:	b948      	cbnz	r0, 8002cb0 <_svfprintf_r+0x1ec>
 8002c9c:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002ca0:	e752      	b.n	8002b48 <_svfprintf_r+0x84>
 8002ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ca4:	b123      	cbz	r3, 8002cb0 <_svfprintf_r+0x1ec>
 8002ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ca8:	9907      	ldr	r1, [sp, #28]
 8002caa:	aa21      	add	r2, sp, #132	; 0x84
 8002cac:	f002 fe14 	bl	80058d8 <__ssprint_r>
 8002cb0:	9b07      	ldr	r3, [sp, #28]
 8002cb2:	899b      	ldrh	r3, [r3, #12]
 8002cb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cba:	bf18      	it	ne
 8002cbc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	b03f      	add	sp, #252	; 0xfc
 8002cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002cca:	46ab      	mov	fp, r5
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	f041 8204 	bne.w	80040da <_svfprintf_r+0x1616>
 8002cd2:	9a06      	ldr	r2, [sp, #24]
 8002cd4:	f012 0320 	ands.w	r3, r2, #32
 8002cd8:	f000 8222 	beq.w	8003120 <_svfprintf_r+0x65c>
 8002cdc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002cde:	3707      	adds	r7, #7
 8002ce0:	f027 0307 	bic.w	r3, r7, #7
 8002ce4:	2700      	movs	r7, #0
 8002ce6:	f103 0108 	add.w	r1, r3, #8
 8002cea:	45bb      	cmp	fp, r7
 8002cec:	910d      	str	r1, [sp, #52]	; 0x34
 8002cee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002cf2:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8002cf6:	f2c0 86a6 	blt.w	8003a46 <_svfprintf_r+0xf82>
 8002cfa:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002cfe:	9306      	str	r3, [sp, #24]
 8002d00:	ea54 0305 	orrs.w	r3, r4, r5
 8002d04:	f000 8368 	beq.w	80033d8 <_svfprintf_r+0x914>
 8002d08:	ae2e      	add	r6, sp, #184	; 0xb8
 8002d0a:	08e2      	lsrs	r2, r4, #3
 8002d0c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8002d10:	08e9      	lsrs	r1, r5, #3
 8002d12:	f004 0307 	and.w	r3, r4, #7
 8002d16:	460d      	mov	r5, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	3330      	adds	r3, #48	; 0x30
 8002d1c:	ea54 0205 	orrs.w	r2, r4, r5
 8002d20:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8002d24:	d1f1      	bne.n	8002d0a <_svfprintf_r+0x246>
 8002d26:	9a06      	ldr	r2, [sp, #24]
 8002d28:	07d1      	lsls	r1, r2, #31
 8002d2a:	f140 8084 	bpl.w	8002e36 <_svfprintf_r+0x372>
 8002d2e:	2b30      	cmp	r3, #48	; 0x30
 8002d30:	f000 8081 	beq.w	8002e36 <_svfprintf_r+0x372>
 8002d34:	2230      	movs	r2, #48	; 0x30
 8002d36:	1e73      	subs	r3, r6, #1
 8002d38:	f806 2c01 	strb.w	r2, [r6, #-1]
 8002d3c:	aa2e      	add	r2, sp, #184	; 0xb8
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	920c      	str	r2, [sp, #48]	; 0x30
 8002d42:	461e      	mov	r6, r3
 8002d44:	e07a      	b.n	8002e3c <_svfprintf_r+0x378>
 8002d46:	f89a 3000 	ldrb.w	r3, [sl]
 8002d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d4c:	f10a 0401 	add.w	r4, sl, #1
 8002d50:	f001 818a 	beq.w	8004068 <_svfprintf_r+0x15a4>
 8002d54:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002d58:	2809      	cmp	r0, #9
 8002d5a:	bf98      	it	ls
 8002d5c:	2500      	movls	r5, #0
 8002d5e:	f201 80ea 	bhi.w	8003f36 <_svfprintf_r+0x1472>
 8002d62:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002d66:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002d6a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8002d6e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002d72:	2809      	cmp	r0, #9
 8002d74:	d9f5      	bls.n	8002d62 <_svfprintf_r+0x29e>
 8002d76:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8002d7a:	46a2      	mov	sl, r4
 8002d7c:	e6fa      	b.n	8002b74 <_svfprintf_r+0xb0>
 8002d7e:	9b06      	ldr	r3, [sp, #24]
 8002d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d84:	9306      	str	r3, [sp, #24]
 8002d86:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8a:	e6f1      	b.n	8002b70 <_svfprintf_r+0xac>
 8002d8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002d90:	2300      	movs	r3, #0
 8002d92:	461c      	mov	r4, r3
 8002d94:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8002d98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002d9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002da0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002da4:	2809      	cmp	r0, #9
 8002da6:	d9f5      	bls.n	8002d94 <_svfprintf_r+0x2d0>
 8002da8:	940b      	str	r4, [sp, #44]	; 0x2c
 8002daa:	e6e3      	b.n	8002b74 <_svfprintf_r+0xb0>
 8002dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8002dae:	46ab      	mov	fp, r5
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	f041 81bb 	bne.w	800412c <_svfprintf_r+0x1668>
 8002db6:	9b06      	ldr	r3, [sp, #24]
 8002db8:	f043 0310 	orr.w	r3, r3, #16
 8002dbc:	9306      	str	r3, [sp, #24]
 8002dbe:	9b06      	ldr	r3, [sp, #24]
 8002dc0:	0698      	lsls	r0, r3, #26
 8002dc2:	f140 8520 	bpl.w	8003806 <_svfprintf_r+0xd42>
 8002dc6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002dc8:	3707      	adds	r7, #7
 8002dca:	f027 0707 	bic.w	r7, r7, #7
 8002dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dd2:	f107 0108 	add.w	r1, r7, #8
 8002dd6:	910d      	str	r1, [sp, #52]	; 0x34
 8002dd8:	4614      	mov	r4, r2
 8002dda:	461d      	mov	r5, r3
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	f173 0300 	sbcs.w	r3, r3, #0
 8002de2:	f2c0 854d 	blt.w	8003880 <_svfprintf_r+0xdbc>
 8002de6:	f1bb 0f00 	cmp.w	fp, #0
 8002dea:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8002dee:	f2c0 8535 	blt.w	800385c <_svfprintf_r+0xd98>
 8002df2:	9b06      	ldr	r3, [sp, #24]
 8002df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df8:	9306      	str	r3, [sp, #24]
 8002dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8002dfe:	f000 81cf 	beq.w	80031a0 <_svfprintf_r+0x6dc>
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	bf08      	it	eq
 8002e06:	2c0a      	cmpeq	r4, #10
 8002e08:	f0c0 81cf 	bcc.w	80031aa <_svfprintf_r+0x6e6>
 8002e0c:	ae2e      	add	r6, sp, #184	; 0xb8
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	220a      	movs	r2, #10
 8002e14:	2300      	movs	r3, #0
 8002e16:	f003 faaf 	bl	8006378 <__aeabi_uldivmod>
 8002e1a:	3230      	adds	r2, #48	; 0x30
 8002e1c:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8002e20:	4620      	mov	r0, r4
 8002e22:	4629      	mov	r1, r5
 8002e24:	2300      	movs	r3, #0
 8002e26:	220a      	movs	r2, #10
 8002e28:	f003 faa6 	bl	8006378 <__aeabi_uldivmod>
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	460d      	mov	r5, r1
 8002e30:	ea54 0305 	orrs.w	r3, r4, r5
 8002e34:	d1eb      	bne.n	8002e0e <_svfprintf_r+0x34a>
 8002e36:	ab2e      	add	r3, sp, #184	; 0xb8
 8002e38:	1b9b      	subs	r3, r3, r6
 8002e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8002e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e3e:	455b      	cmp	r3, fp
 8002e40:	bfb8      	it	lt
 8002e42:	465b      	movlt	r3, fp
 8002e44:	9308      	str	r3, [sp, #32]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9310      	str	r3, [sp, #64]	; 0x40
 8002e4a:	b117      	cbz	r7, 8002e52 <_svfprintf_r+0x38e>
 8002e4c:	9b08      	ldr	r3, [sp, #32]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	9308      	str	r3, [sp, #32]
 8002e52:	9b06      	ldr	r3, [sp, #24]
 8002e54:	f013 0302 	ands.w	r3, r3, #2
 8002e58:	930e      	str	r3, [sp, #56]	; 0x38
 8002e5a:	d002      	beq.n	8002e62 <_svfprintf_r+0x39e>
 8002e5c:	9b08      	ldr	r3, [sp, #32]
 8002e5e:	3302      	adds	r3, #2
 8002e60:	9308      	str	r3, [sp, #32]
 8002e62:	9b06      	ldr	r3, [sp, #24]
 8002e64:	f013 0884 	ands.w	r8, r3, #132	; 0x84
 8002e68:	f040 82cb 	bne.w	8003402 <_svfprintf_r+0x93e>
 8002e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e6e:	9a08      	ldr	r2, [sp, #32]
 8002e70:	1a9d      	subs	r5, r3, r2
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	f340 82c5 	ble.w	8003402 <_svfprintf_r+0x93e>
 8002e78:	2d10      	cmp	r5, #16
 8002e7a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002e7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002e7e:	4f37      	ldr	r7, [pc, #220]	; (8002f5c <_svfprintf_r+0x498>)
 8002e80:	dd23      	ble.n	8002eca <_svfprintf_r+0x406>
 8002e82:	4648      	mov	r0, r9
 8002e84:	2410      	movs	r4, #16
 8002e86:	46c1      	mov	r9, r8
 8002e88:	46b0      	mov	r8, r6
 8002e8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002e8c:	e004      	b.n	8002e98 <_svfprintf_r+0x3d4>
 8002e8e:	3d10      	subs	r5, #16
 8002e90:	2d10      	cmp	r5, #16
 8002e92:	f100 0008 	add.w	r0, r0, #8
 8002e96:	dd15      	ble.n	8002ec4 <_svfprintf_r+0x400>
 8002e98:	3201      	adds	r2, #1
 8002e9a:	3110      	adds	r1, #16
 8002e9c:	2a07      	cmp	r2, #7
 8002e9e:	9123      	str	r1, [sp, #140]	; 0x8c
 8002ea0:	9222      	str	r2, [sp, #136]	; 0x88
 8002ea2:	6007      	str	r7, [r0, #0]
 8002ea4:	6044      	str	r4, [r0, #4]
 8002ea6:	ddf2      	ble.n	8002e8e <_svfprintf_r+0x3ca>
 8002ea8:	aa21      	add	r2, sp, #132	; 0x84
 8002eaa:	9907      	ldr	r1, [sp, #28]
 8002eac:	4630      	mov	r0, r6
 8002eae:	f002 fd13 	bl	80058d8 <__ssprint_r>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	f47f aefc 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8002eb8:	3d10      	subs	r5, #16
 8002eba:	2d10      	cmp	r5, #16
 8002ebc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002ebe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002ec0:	a82e      	add	r0, sp, #184	; 0xb8
 8002ec2:	dce9      	bgt.n	8002e98 <_svfprintf_r+0x3d4>
 8002ec4:	4646      	mov	r6, r8
 8002ec6:	46c8      	mov	r8, r9
 8002ec8:	4681      	mov	r9, r0
 8002eca:	3201      	adds	r2, #1
 8002ecc:	186c      	adds	r4, r5, r1
 8002ece:	2a07      	cmp	r2, #7
 8002ed0:	9423      	str	r4, [sp, #140]	; 0x8c
 8002ed2:	9222      	str	r2, [sp, #136]	; 0x88
 8002ed4:	f8c9 7000 	str.w	r7, [r9]
 8002ed8:	f8c9 5004 	str.w	r5, [r9, #4]
 8002edc:	f300 841f 	bgt.w	800371e <_svfprintf_r+0xc5a>
 8002ee0:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8002ee4:	f109 0908 	add.w	r9, r9, #8
 8002ee8:	b177      	cbz	r7, 8002f08 <_svfprintf_r+0x444>
 8002eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002eec:	3301      	adds	r3, #1
 8002eee:	3401      	adds	r4, #1
 8002ef0:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	9423      	str	r4, [sp, #140]	; 0x8c
 8002efa:	9322      	str	r3, [sp, #136]	; 0x88
 8002efc:	e889 0006 	stmia.w	r9, {r1, r2}
 8002f00:	f300 8396 	bgt.w	8003630 <_svfprintf_r+0xb6c>
 8002f04:	f109 0908 	add.w	r9, r9, #8
 8002f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f0a:	b16b      	cbz	r3, 8002f28 <_svfprintf_r+0x464>
 8002f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f0e:	3301      	adds	r3, #1
 8002f10:	3402      	adds	r4, #2
 8002f12:	a91a      	add	r1, sp, #104	; 0x68
 8002f14:	2202      	movs	r2, #2
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	9423      	str	r4, [sp, #140]	; 0x8c
 8002f1a:	9322      	str	r3, [sp, #136]	; 0x88
 8002f1c:	e889 0006 	stmia.w	r9, {r1, r2}
 8002f20:	f300 8392 	bgt.w	8003648 <_svfprintf_r+0xb84>
 8002f24:	f109 0908 	add.w	r9, r9, #8
 8002f28:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8002f2c:	f000 82cd 	beq.w	80034ca <_svfprintf_r+0xa06>
 8002f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f32:	ebc3 070b 	rsb	r7, r3, fp
 8002f36:	2f00      	cmp	r7, #0
 8002f38:	dd41      	ble.n	8002fbe <_svfprintf_r+0x4fa>
 8002f3a:	2f10      	cmp	r7, #16
 8002f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f3e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8002f60 <_svfprintf_r+0x49c>
 8002f42:	dd2f      	ble.n	8002fa4 <_svfprintf_r+0x4e0>
 8002f44:	4641      	mov	r1, r8
 8002f46:	4622      	mov	r2, r4
 8002f48:	46b0      	mov	r8, r6
 8002f4a:	f04f 0b10 	mov.w	fp, #16
 8002f4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002f50:	9c07      	ldr	r4, [sp, #28]
 8002f52:	460e      	mov	r6, r1
 8002f54:	e00b      	b.n	8002f6e <_svfprintf_r+0x4aa>
 8002f56:	bf00      	nop
 8002f58:	08006930 	.word	0x08006930
 8002f5c:	080068fc 	.word	0x080068fc
 8002f60:	08006950 	.word	0x08006950
 8002f64:	3f10      	subs	r7, #16
 8002f66:	2f10      	cmp	r7, #16
 8002f68:	f109 0908 	add.w	r9, r9, #8
 8002f6c:	dd16      	ble.n	8002f9c <_svfprintf_r+0x4d8>
 8002f6e:	3301      	adds	r3, #1
 8002f70:	3210      	adds	r2, #16
 8002f72:	2b07      	cmp	r3, #7
 8002f74:	9223      	str	r2, [sp, #140]	; 0x8c
 8002f76:	9322      	str	r3, [sp, #136]	; 0x88
 8002f78:	e889 0840 	stmia.w	r9, {r6, fp}
 8002f7c:	ddf2      	ble.n	8002f64 <_svfprintf_r+0x4a0>
 8002f7e:	aa21      	add	r2, sp, #132	; 0x84
 8002f80:	4621      	mov	r1, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	f002 fca8 	bl	80058d8 <__ssprint_r>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	f47f ae91 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8002f8e:	3f10      	subs	r7, #16
 8002f90:	2f10      	cmp	r7, #16
 8002f92:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002f94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f96:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002f9a:	dce8      	bgt.n	8002f6e <_svfprintf_r+0x4aa>
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	4632      	mov	r2, r6
 8002fa0:	4646      	mov	r6, r8
 8002fa2:	4690      	mov	r8, r2
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	443c      	add	r4, r7
 8002fa8:	2b07      	cmp	r3, #7
 8002faa:	9423      	str	r4, [sp, #140]	; 0x8c
 8002fac:	9322      	str	r3, [sp, #136]	; 0x88
 8002fae:	f8c9 8000 	str.w	r8, [r9]
 8002fb2:	f8c9 7004 	str.w	r7, [r9, #4]
 8002fb6:	f300 832f 	bgt.w	8003618 <_svfprintf_r+0xb54>
 8002fba:	f109 0908 	add.w	r9, r9, #8
 8002fbe:	9b06      	ldr	r3, [sp, #24]
 8002fc0:	05da      	lsls	r2, r3, #23
 8002fc2:	f100 8220 	bmi.w	8003406 <_svfprintf_r+0x942>
 8002fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fca:	f8c9 6000 	str.w	r6, [r9]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	440c      	add	r4, r1
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	9423      	str	r4, [sp, #140]	; 0x8c
 8002fd6:	f8c9 1004 	str.w	r1, [r9, #4]
 8002fda:	9322      	str	r3, [sp, #136]	; 0x88
 8002fdc:	f300 8306 	bgt.w	80035ec <_svfprintf_r+0xb28>
 8002fe0:	f109 0908 	add.w	r9, r9, #8
 8002fe4:	9b06      	ldr	r3, [sp, #24]
 8002fe6:	0759      	lsls	r1, r3, #29
 8002fe8:	d53f      	bpl.n	800306a <_svfprintf_r+0x5a6>
 8002fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fec:	9a08      	ldr	r2, [sp, #32]
 8002fee:	1a9d      	subs	r5, r3, r2
 8002ff0:	2d00      	cmp	r5, #0
 8002ff2:	dd3a      	ble.n	800306a <_svfprintf_r+0x5a6>
 8002ff4:	2d10      	cmp	r5, #16
 8002ff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ff8:	4fb5      	ldr	r7, [pc, #724]	; (80032d0 <_svfprintf_r+0x80c>)
 8002ffa:	dd23      	ble.n	8003044 <_svfprintf_r+0x580>
 8002ffc:	2610      	movs	r6, #16
 8002ffe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003002:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003006:	e004      	b.n	8003012 <_svfprintf_r+0x54e>
 8003008:	3d10      	subs	r5, #16
 800300a:	2d10      	cmp	r5, #16
 800300c:	f109 0908 	add.w	r9, r9, #8
 8003010:	dd18      	ble.n	8003044 <_svfprintf_r+0x580>
 8003012:	3301      	adds	r3, #1
 8003014:	3410      	adds	r4, #16
 8003016:	2b07      	cmp	r3, #7
 8003018:	9423      	str	r4, [sp, #140]	; 0x8c
 800301a:	9322      	str	r3, [sp, #136]	; 0x88
 800301c:	f8c9 7000 	str.w	r7, [r9]
 8003020:	f8c9 6004 	str.w	r6, [r9, #4]
 8003024:	ddf0      	ble.n	8003008 <_svfprintf_r+0x544>
 8003026:	aa21      	add	r2, sp, #132	; 0x84
 8003028:	4659      	mov	r1, fp
 800302a:	4640      	mov	r0, r8
 800302c:	f002 fc54 	bl	80058d8 <__ssprint_r>
 8003030:	2800      	cmp	r0, #0
 8003032:	f47f ae3d 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003036:	3d10      	subs	r5, #16
 8003038:	2d10      	cmp	r5, #16
 800303a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800303c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800303e:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003042:	dce6      	bgt.n	8003012 <_svfprintf_r+0x54e>
 8003044:	3301      	adds	r3, #1
 8003046:	442c      	add	r4, r5
 8003048:	2b07      	cmp	r3, #7
 800304a:	9423      	str	r4, [sp, #140]	; 0x8c
 800304c:	9322      	str	r3, [sp, #136]	; 0x88
 800304e:	f8c9 7000 	str.w	r7, [r9]
 8003052:	f8c9 5004 	str.w	r5, [r9, #4]
 8003056:	dd08      	ble.n	800306a <_svfprintf_r+0x5a6>
 8003058:	aa21      	add	r2, sp, #132	; 0x84
 800305a:	9907      	ldr	r1, [sp, #28]
 800305c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800305e:	f002 fc3b 	bl	80058d8 <__ssprint_r>
 8003062:	2800      	cmp	r0, #0
 8003064:	f47f ae24 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003068:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800306a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800306c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800306e:	9908      	ldr	r1, [sp, #32]
 8003070:	428a      	cmp	r2, r1
 8003072:	bfac      	ite	ge
 8003074:	189b      	addge	r3, r3, r2
 8003076:	185b      	addlt	r3, r3, r1
 8003078:	930a      	str	r3, [sp, #40]	; 0x28
 800307a:	2c00      	cmp	r4, #0
 800307c:	f040 82c2 	bne.w	8003604 <_svfprintf_r+0xb40>
 8003080:	2300      	movs	r3, #0
 8003082:	9322      	str	r3, [sp, #136]	; 0x88
 8003084:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003088:	e53f      	b.n	8002b0a <_svfprintf_r+0x46>
 800308a:	930f      	str	r3, [sp, #60]	; 0x3c
 800308c:	46ab      	mov	fp, r5
 800308e:	2a00      	cmp	r2, #0
 8003090:	f041 8048 	bne.w	8004124 <_svfprintf_r+0x1660>
 8003094:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003096:	3707      	adds	r7, #7
 8003098:	f027 0307 	bic.w	r3, r7, #7
 800309c:	f103 0208 	add.w	r2, r3, #8
 80030a0:	920d      	str	r2, [sp, #52]	; 0x34
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	9212      	str	r2, [sp, #72]	; 0x48
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80030aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80030ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80030ae:	4628      	mov	r0, r5
 80030b0:	4621      	mov	r1, r4
 80030b2:	f002 fbe7 	bl	8005884 <__fpclassifyd>
 80030b6:	2801      	cmp	r0, #1
 80030b8:	f040 8499 	bne.w	80039ee <_svfprintf_r+0xf2a>
 80030bc:	4628      	mov	r0, r5
 80030be:	4621      	mov	r1, r4
 80030c0:	2200      	movs	r2, #0
 80030c2:	2300      	movs	r3, #0
 80030c4:	f003 f908 	bl	80062d8 <__aeabi_dcmplt>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	f040 86c7 	bne.w	8003e5c <_svfprintf_r+0x1398>
 80030ce:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 80030d2:	9906      	ldr	r1, [sp, #24]
 80030d4:	4e7f      	ldr	r6, [pc, #508]	; (80032d4 <_svfprintf_r+0x810>)
 80030d6:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <_svfprintf_r+0x814>)
 80030d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80030dc:	9106      	str	r1, [sp, #24]
 80030de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030e0:	2203      	movs	r2, #3
 80030e2:	f04f 0b00 	mov.w	fp, #0
 80030e6:	9208      	str	r2, [sp, #32]
 80030e8:	2947      	cmp	r1, #71	; 0x47
 80030ea:	bfd8      	it	le
 80030ec:	461e      	movle	r6, r3
 80030ee:	920c      	str	r2, [sp, #48]	; 0x30
 80030f0:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80030f4:	e6a9      	b.n	8002e4a <_svfprintf_r+0x386>
 80030f6:	9b06      	ldr	r3, [sp, #24]
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	9306      	str	r3, [sp, #24]
 80030fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003102:	e535      	b.n	8002b70 <_svfprintf_r+0xac>
 8003104:	930f      	str	r3, [sp, #60]	; 0x3c
 8003106:	46ab      	mov	fp, r5
 8003108:	2a00      	cmp	r2, #0
 800310a:	f040 87f7 	bne.w	80040fc <_svfprintf_r+0x1638>
 800310e:	9b06      	ldr	r3, [sp, #24]
 8003110:	f043 0310 	orr.w	r3, r3, #16
 8003114:	9306      	str	r3, [sp, #24]
 8003116:	9a06      	ldr	r2, [sp, #24]
 8003118:	f012 0320 	ands.w	r3, r2, #32
 800311c:	f47f adde 	bne.w	8002cdc <_svfprintf_r+0x218>
 8003120:	9906      	ldr	r1, [sp, #24]
 8003122:	f011 0210 	ands.w	r2, r1, #16
 8003126:	f000 847c 	beq.w	8003a22 <_svfprintf_r+0xf5e>
 800312a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800312c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003130:	f1bb 0f00 	cmp.w	fp, #0
 8003134:	6804      	ldr	r4, [r0, #0]
 8003136:	f100 0704 	add.w	r7, r0, #4
 800313a:	f04f 0500 	mov.w	r5, #0
 800313e:	f2c0 8481 	blt.w	8003a44 <_svfprintf_r+0xf80>
 8003142:	460a      	mov	r2, r1
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	9206      	str	r2, [sp, #24]
 800314a:	ea54 0205 	orrs.w	r2, r4, r5
 800314e:	970d      	str	r7, [sp, #52]	; 0x34
 8003150:	f000 8142 	beq.w	80033d8 <_svfprintf_r+0x914>
 8003154:	461f      	mov	r7, r3
 8003156:	e5d7      	b.n	8002d08 <_svfprintf_r+0x244>
 8003158:	930f      	str	r3, [sp, #60]	; 0x3c
 800315a:	46ab      	mov	fp, r5
 800315c:	2a00      	cmp	r2, #0
 800315e:	f040 87d9 	bne.w	8004114 <_svfprintf_r+0x1650>
 8003162:	9b06      	ldr	r3, [sp, #24]
 8003164:	f043 0310 	orr.w	r3, r3, #16
 8003168:	9306      	str	r3, [sp, #24]
 800316a:	9a06      	ldr	r2, [sp, #24]
 800316c:	f012 0320 	ands.w	r3, r2, #32
 8003170:	f000 832e 	beq.w	80037d0 <_svfprintf_r+0xd0c>
 8003174:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003176:	3707      	adds	r7, #7
 8003178:	f027 0307 	bic.w	r3, r7, #7
 800317c:	2700      	movs	r7, #0
 800317e:	f103 0108 	add.w	r1, r3, #8
 8003182:	45bb      	cmp	fp, r7
 8003184:	910d      	str	r1, [sp, #52]	; 0x34
 8003186:	e9d3 4500 	ldrd	r4, r5, [r3]
 800318a:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 800318e:	f2c0 8365 	blt.w	800385c <_svfprintf_r+0xd98>
 8003192:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8003196:	9306      	str	r3, [sp, #24]
 8003198:	ea54 0305 	orrs.w	r3, r4, r5
 800319c:	f47f ae31 	bne.w	8002e02 <_svfprintf_r+0x33e>
 80031a0:	f1bb 0f00 	cmp.w	fp, #0
 80031a4:	f000 80fd 	beq.w	80033a2 <_svfprintf_r+0x8de>
 80031a8:	2400      	movs	r4, #0
 80031aa:	ae3e      	add	r6, sp, #248	; 0xf8
 80031ac:	3430      	adds	r4, #48	; 0x30
 80031ae:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80031b2:	e640      	b.n	8002e36 <_svfprintf_r+0x372>
 80031b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80031b6:	46ab      	mov	fp, r5
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	f040 87a7 	bne.w	800410c <_svfprintf_r+0x1648>
 80031be:	9b06      	ldr	r3, [sp, #24]
 80031c0:	4846      	ldr	r0, [pc, #280]	; (80032dc <_svfprintf_r+0x818>)
 80031c2:	069d      	lsls	r5, r3, #26
 80031c4:	f140 8096 	bpl.w	80032f4 <_svfprintf_r+0x830>
 80031c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80031ca:	3707      	adds	r7, #7
 80031cc:	f027 0307 	bic.w	r3, r7, #7
 80031d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031d4:	f103 0208 	add.w	r2, r3, #8
 80031d8:	920d      	str	r2, [sp, #52]	; 0x34
 80031da:	9a06      	ldr	r2, [sp, #24]
 80031dc:	f012 0701 	ands.w	r7, r2, #1
 80031e0:	f000 823e 	beq.w	8003660 <_svfprintf_r+0xb9c>
 80031e4:	ea54 0305 	orrs.w	r3, r4, r5
 80031e8:	f000 8471 	beq.w	8003ace <_svfprintf_r+0x100a>
 80031ec:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80031f0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80031f4:	2700      	movs	r7, #0
 80031f6:	9a06      	ldr	r2, [sp, #24]
 80031f8:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 80031fc:	2330      	movs	r3, #48	; 0x30
 80031fe:	45bb      	cmp	fp, r7
 8003200:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003204:	f042 0302 	orr.w	r3, r2, #2
 8003208:	f2c0 8625 	blt.w	8003e56 <_svfprintf_r+0x1392>
 800320c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	9306      	str	r3, [sp, #24]
 8003216:	ae2e      	add	r6, sp, #184	; 0xb8
 8003218:	0923      	lsrs	r3, r4, #4
 800321a:	f004 010f 	and.w	r1, r4, #15
 800321e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8003222:	092a      	lsrs	r2, r5, #4
 8003224:	461c      	mov	r4, r3
 8003226:	4615      	mov	r5, r2
 8003228:	5c43      	ldrb	r3, [r0, r1]
 800322a:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800322e:	ea54 0305 	orrs.w	r3, r4, r5
 8003232:	d1f1      	bne.n	8003218 <_svfprintf_r+0x754>
 8003234:	e5ff      	b.n	8002e36 <_svfprintf_r+0x372>
 8003236:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003238:	930f      	str	r3, [sp, #60]	; 0x3c
 800323a:	680a      	ldr	r2, [r1, #0]
 800323c:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8003240:	2300      	movs	r3, #0
 8003242:	460a      	mov	r2, r1
 8003244:	461f      	mov	r7, r3
 8003246:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800324a:	3204      	adds	r2, #4
 800324c:	2301      	movs	r3, #1
 800324e:	9308      	str	r3, [sp, #32]
 8003250:	46bb      	mov	fp, r7
 8003252:	9710      	str	r7, [sp, #64]	; 0x40
 8003254:	920d      	str	r2, [sp, #52]	; 0x34
 8003256:	930c      	str	r3, [sp, #48]	; 0x30
 8003258:	ae24      	add	r6, sp, #144	; 0x90
 800325a:	e5fa      	b.n	8002e52 <_svfprintf_r+0x38e>
 800325c:	930f      	str	r3, [sp, #60]	; 0x3c
 800325e:	46ab      	mov	fp, r5
 8003260:	2a00      	cmp	r2, #0
 8003262:	f43f adac 	beq.w	8002dbe <_svfprintf_r+0x2fa>
 8003266:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 800326a:	e5a8      	b.n	8002dbe <_svfprintf_r+0x2fa>
 800326c:	9b06      	ldr	r3, [sp, #24]
 800326e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003272:	9306      	str	r3, [sp, #24]
 8003274:	f89a 3000 	ldrb.w	r3, [sl]
 8003278:	e47a      	b.n	8002b70 <_svfprintf_r+0xac>
 800327a:	f89a 3000 	ldrb.w	r3, [sl]
 800327e:	2900      	cmp	r1, #0
 8003280:	f47f ac76 	bne.w	8002b70 <_svfprintf_r+0xac>
 8003284:	2201      	movs	r2, #1
 8003286:	2120      	movs	r1, #32
 8003288:	e472      	b.n	8002b70 <_svfprintf_r+0xac>
 800328a:	9b06      	ldr	r3, [sp, #24]
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	9306      	str	r3, [sp, #24]
 8003292:	f89a 3000 	ldrb.w	r3, [sl]
 8003296:	e46b      	b.n	8002b70 <_svfprintf_r+0xac>
 8003298:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	930b      	str	r3, [sp, #44]	; 0x2c
 800329e:	4618      	mov	r0, r3
 80032a0:	2800      	cmp	r0, #0
 80032a2:	4623      	mov	r3, r4
 80032a4:	f103 0304 	add.w	r3, r3, #4
 80032a8:	f6ff acc4 	blt.w	8002c34 <_svfprintf_r+0x170>
 80032ac:	930d      	str	r3, [sp, #52]	; 0x34
 80032ae:	f89a 3000 	ldrb.w	r3, [sl]
 80032b2:	e45d      	b.n	8002b70 <_svfprintf_r+0xac>
 80032b4:	f89a 3000 	ldrb.w	r3, [sl]
 80032b8:	2201      	movs	r2, #1
 80032ba:	212b      	movs	r1, #43	; 0x2b
 80032bc:	e458      	b.n	8002b70 <_svfprintf_r+0xac>
 80032be:	930f      	str	r3, [sp, #60]	; 0x3c
 80032c0:	46ab      	mov	fp, r5
 80032c2:	2a00      	cmp	r2, #0
 80032c4:	f43f af51 	beq.w	800316a <_svfprintf_r+0x6a6>
 80032c8:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 80032cc:	e74d      	b.n	800316a <_svfprintf_r+0x6a6>
 80032ce:	bf00      	nop
 80032d0:	080068fc 	.word	0x080068fc
 80032d4:	08006910 	.word	0x08006910
 80032d8:	0800690c 	.word	0x0800690c
 80032dc:	0800691c 	.word	0x0800691c
 80032e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80032e2:	46ab      	mov	fp, r5
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	f040 870d 	bne.w	8004104 <_svfprintf_r+0x1640>
 80032ea:	9b06      	ldr	r3, [sp, #24]
 80032ec:	4898      	ldr	r0, [pc, #608]	; (8003550 <_svfprintf_r+0xa8c>)
 80032ee:	069d      	lsls	r5, r3, #26
 80032f0:	f53f af6a 	bmi.w	80031c8 <_svfprintf_r+0x704>
 80032f4:	9b06      	ldr	r3, [sp, #24]
 80032f6:	06dc      	lsls	r4, r3, #27
 80032f8:	f140 83bf 	bpl.w	8003a7a <_svfprintf_r+0xfb6>
 80032fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80032fe:	4613      	mov	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	6814      	ldr	r4, [r2, #0]
 8003304:	930d      	str	r3, [sp, #52]	; 0x34
 8003306:	2500      	movs	r5, #0
 8003308:	e767      	b.n	80031da <_svfprintf_r+0x716>
 800330a:	f89a 3000 	ldrb.w	r3, [sl]
 800330e:	2b6c      	cmp	r3, #108	; 0x6c
 8003310:	f000 846d 	beq.w	8003bee <_svfprintf_r+0x112a>
 8003314:	9806      	ldr	r0, [sp, #24]
 8003316:	f040 0010 	orr.w	r0, r0, #16
 800331a:	9006      	str	r0, [sp, #24]
 800331c:	e428      	b.n	8002b70 <_svfprintf_r+0xac>
 800331e:	2a00      	cmp	r2, #0
 8003320:	f040 86fc 	bne.w	800411c <_svfprintf_r+0x1658>
 8003324:	9b06      	ldr	r3, [sp, #24]
 8003326:	069b      	lsls	r3, r3, #26
 8003328:	f140 8390 	bpl.w	8003a4c <_svfprintf_r+0xf88>
 800332c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800332e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	17cd      	asrs	r5, r1, #31
 8003334:	4608      	mov	r0, r1
 8003336:	3204      	adds	r2, #4
 8003338:	4629      	mov	r1, r5
 800333a:	920d      	str	r2, [sp, #52]	; 0x34
 800333c:	e9c3 0100 	strd	r0, r1, [r3]
 8003340:	f7ff bbe3 	b.w	8002b0a <_svfprintf_r+0x46>
 8003344:	9b06      	ldr	r3, [sp, #24]
 8003346:	f043 0320 	orr.w	r3, r3, #32
 800334a:	9306      	str	r3, [sp, #24]
 800334c:	f89a 3000 	ldrb.w	r3, [sl]
 8003350:	e40e      	b.n	8002b70 <_svfprintf_r+0xac>
 8003352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003354:	930f      	str	r3, [sp, #60]	; 0x3c
 8003356:	6816      	ldr	r6, [r2, #0]
 8003358:	2400      	movs	r4, #0
 800335a:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
 800335e:	1d17      	adds	r7, r2, #4
 8003360:	2e00      	cmp	r6, #0
 8003362:	f000 8569 	beq.w	8003e38 <_svfprintf_r+0x1374>
 8003366:	2d00      	cmp	r5, #0
 8003368:	f2c0 8525 	blt.w	8003db6 <_svfprintf_r+0x12f2>
 800336c:	462a      	mov	r2, r5
 800336e:	4621      	mov	r1, r4
 8003370:	4630      	mov	r0, r6
 8003372:	f7ff f8ed 	bl	8002550 <memchr>
 8003376:	2800      	cmp	r0, #0
 8003378:	f000 8599 	beq.w	8003eae <_svfprintf_r+0x13ea>
 800337c:	1b83      	subs	r3, r0, r6
 800337e:	930c      	str	r3, [sp, #48]	; 0x30
 8003380:	46a3      	mov	fp, r4
 8003382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003386:	970d      	str	r7, [sp, #52]	; 0x34
 8003388:	9308      	str	r3, [sp, #32]
 800338a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800338e:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8003392:	e55a      	b.n	8002e4a <_svfprintf_r+0x386>
 8003394:	486e      	ldr	r0, [pc, #440]	; (8003550 <_svfprintf_r+0xa8c>)
 8003396:	920f      	str	r2, [sp, #60]	; 0x3c
 8003398:	f1bb 0f00 	cmp.w	fp, #0
 800339c:	f040 8171 	bne.w	8003682 <_svfprintf_r+0xbbe>
 80033a0:	465f      	mov	r7, fp
 80033a2:	f04f 0b00 	mov.w	fp, #0
 80033a6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80033aa:	ae2e      	add	r6, sp, #184	; 0xb8
 80033ac:	e546      	b.n	8002e3c <_svfprintf_r+0x378>
 80033ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80033b0:	2a00      	cmp	r2, #0
 80033b2:	f040 869d 	bne.w	80040f0 <_svfprintf_r+0x162c>
 80033b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80033b8:	2a00      	cmp	r2, #0
 80033ba:	f43f ac72 	beq.w	8002ca2 <_svfprintf_r+0x1de>
 80033be:	2300      	movs	r3, #0
 80033c0:	2101      	movs	r1, #1
 80033c2:	461f      	mov	r7, r3
 80033c4:	9108      	str	r1, [sp, #32]
 80033c6:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80033ca:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80033ce:	469b      	mov	fp, r3
 80033d0:	9310      	str	r3, [sp, #64]	; 0x40
 80033d2:	910c      	str	r1, [sp, #48]	; 0x30
 80033d4:	ae24      	add	r6, sp, #144	; 0x90
 80033d6:	e53c      	b.n	8002e52 <_svfprintf_r+0x38e>
 80033d8:	f1bb 0f00 	cmp.w	fp, #0
 80033dc:	f000 8652 	beq.w	8004084 <_svfprintf_r+0x15c0>
 80033e0:	2700      	movs	r7, #0
 80033e2:	2400      	movs	r4, #0
 80033e4:	2500      	movs	r5, #0
 80033e6:	e48f      	b.n	8002d08 <_svfprintf_r+0x244>
 80033e8:	4859      	ldr	r0, [pc, #356]	; (8003550 <_svfprintf_r+0xa8c>)
 80033ea:	9306      	str	r3, [sp, #24]
 80033ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80033ee:	ea54 0305 	orrs.w	r3, r4, r5
 80033f2:	970d      	str	r7, [sp, #52]	; 0x34
 80033f4:	f04f 0700 	mov.w	r7, #0
 80033f8:	f47f af0d 	bne.w	8003216 <_svfprintf_r+0x752>
 80033fc:	2400      	movs	r4, #0
 80033fe:	2500      	movs	r5, #0
 8003400:	e709      	b.n	8003216 <_svfprintf_r+0x752>
 8003402:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003404:	e570      	b.n	8002ee8 <_svfprintf_r+0x424>
 8003406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003408:	2b65      	cmp	r3, #101	; 0x65
 800340a:	f340 80a7 	ble.w	800355c <_svfprintf_r+0xa98>
 800340e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003410:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003412:	2200      	movs	r2, #0
 8003414:	2300      	movs	r3, #0
 8003416:	f002 ff55 	bl	80062c4 <__aeabi_dcmpeq>
 800341a:	2800      	cmp	r0, #0
 800341c:	f000 8133 	beq.w	8003686 <_svfprintf_r+0xbc2>
 8003420:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003422:	4a4c      	ldr	r2, [pc, #304]	; (8003554 <_svfprintf_r+0xa90>)
 8003424:	f8c9 2000 	str.w	r2, [r9]
 8003428:	3301      	adds	r3, #1
 800342a:	3401      	adds	r4, #1
 800342c:	2201      	movs	r2, #1
 800342e:	2b07      	cmp	r3, #7
 8003430:	9423      	str	r4, [sp, #140]	; 0x8c
 8003432:	9322      	str	r3, [sp, #136]	; 0x88
 8003434:	f8c9 2004 	str.w	r2, [r9, #4]
 8003438:	f300 8366 	bgt.w	8003b08 <_svfprintf_r+0x1044>
 800343c:	f109 0908 	add.w	r9, r9, #8
 8003440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003442:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003444:	4293      	cmp	r3, r2
 8003446:	db03      	blt.n	8003450 <_svfprintf_r+0x98c>
 8003448:	9b06      	ldr	r3, [sp, #24]
 800344a:	07db      	lsls	r3, r3, #31
 800344c:	f57f adca 	bpl.w	8002fe4 <_svfprintf_r+0x520>
 8003450:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003452:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003456:	f8c9 2000 	str.w	r2, [r9]
 800345a:	3301      	adds	r3, #1
 800345c:	440c      	add	r4, r1
 800345e:	2b07      	cmp	r3, #7
 8003460:	9423      	str	r4, [sp, #140]	; 0x8c
 8003462:	f8c9 1004 	str.w	r1, [r9, #4]
 8003466:	9322      	str	r3, [sp, #136]	; 0x88
 8003468:	f300 83cb 	bgt.w	8003c02 <_svfprintf_r+0x113e>
 800346c:	f109 0908 	add.w	r9, r9, #8
 8003470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003472:	1e5d      	subs	r5, r3, #1
 8003474:	2d00      	cmp	r5, #0
 8003476:	f77f adb5 	ble.w	8002fe4 <_svfprintf_r+0x520>
 800347a:	2d10      	cmp	r5, #16
 800347c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800347e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003558 <_svfprintf_r+0xa94>
 8003482:	f340 81d1 	ble.w	8003828 <_svfprintf_r+0xd64>
 8003486:	2610      	movs	r6, #16
 8003488:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800348a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800348e:	e005      	b.n	800349c <_svfprintf_r+0x9d8>
 8003490:	f109 0908 	add.w	r9, r9, #8
 8003494:	3d10      	subs	r5, #16
 8003496:	2d10      	cmp	r5, #16
 8003498:	f340 81c6 	ble.w	8003828 <_svfprintf_r+0xd64>
 800349c:	3301      	adds	r3, #1
 800349e:	3410      	adds	r4, #16
 80034a0:	2b07      	cmp	r3, #7
 80034a2:	9423      	str	r4, [sp, #140]	; 0x8c
 80034a4:	9322      	str	r3, [sp, #136]	; 0x88
 80034a6:	f8c9 8000 	str.w	r8, [r9]
 80034aa:	f8c9 6004 	str.w	r6, [r9, #4]
 80034ae:	ddef      	ble.n	8003490 <_svfprintf_r+0x9cc>
 80034b0:	aa21      	add	r2, sp, #132	; 0x84
 80034b2:	4659      	mov	r1, fp
 80034b4:	4638      	mov	r0, r7
 80034b6:	f002 fa0f 	bl	80058d8 <__ssprint_r>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	f47f abf8 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 80034c0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80034c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034c4:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80034c8:	e7e4      	b.n	8003494 <_svfprintf_r+0x9d0>
 80034ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034cc:	9a08      	ldr	r2, [sp, #32]
 80034ce:	1a9f      	subs	r7, r3, r2
 80034d0:	2f00      	cmp	r7, #0
 80034d2:	f77f ad2d 	ble.w	8002f30 <_svfprintf_r+0x46c>
 80034d6:	2f10      	cmp	r7, #16
 80034d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003558 <_svfprintf_r+0xa94>
 80034de:	dd29      	ble.n	8003534 <_svfprintf_r+0xa70>
 80034e0:	4640      	mov	r0, r8
 80034e2:	464a      	mov	r2, r9
 80034e4:	4621      	mov	r1, r4
 80034e6:	46b0      	mov	r8, r6
 80034e8:	2510      	movs	r5, #16
 80034ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80034ec:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80034f0:	4606      	mov	r6, r0
 80034f2:	e004      	b.n	80034fe <_svfprintf_r+0xa3a>
 80034f4:	3f10      	subs	r7, #16
 80034f6:	2f10      	cmp	r7, #16
 80034f8:	f102 0208 	add.w	r2, r2, #8
 80034fc:	dd15      	ble.n	800352a <_svfprintf_r+0xa66>
 80034fe:	3301      	adds	r3, #1
 8003500:	3110      	adds	r1, #16
 8003502:	2b07      	cmp	r3, #7
 8003504:	9123      	str	r1, [sp, #140]	; 0x8c
 8003506:	9322      	str	r3, [sp, #136]	; 0x88
 8003508:	6016      	str	r6, [r2, #0]
 800350a:	6055      	str	r5, [r2, #4]
 800350c:	ddf2      	ble.n	80034f4 <_svfprintf_r+0xa30>
 800350e:	aa21      	add	r2, sp, #132	; 0x84
 8003510:	4649      	mov	r1, r9
 8003512:	4620      	mov	r0, r4
 8003514:	f002 f9e0 	bl	80058d8 <__ssprint_r>
 8003518:	2800      	cmp	r0, #0
 800351a:	f47f abc9 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 800351e:	3f10      	subs	r7, #16
 8003520:	2f10      	cmp	r7, #16
 8003522:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003526:	aa2e      	add	r2, sp, #184	; 0xb8
 8003528:	dce9      	bgt.n	80034fe <_svfprintf_r+0xa3a>
 800352a:	4691      	mov	r9, r2
 800352c:	4632      	mov	r2, r6
 800352e:	460c      	mov	r4, r1
 8003530:	4646      	mov	r6, r8
 8003532:	4690      	mov	r8, r2
 8003534:	3301      	adds	r3, #1
 8003536:	443c      	add	r4, r7
 8003538:	2b07      	cmp	r3, #7
 800353a:	9423      	str	r4, [sp, #140]	; 0x8c
 800353c:	9322      	str	r3, [sp, #136]	; 0x88
 800353e:	f8c9 8000 	str.w	r8, [r9]
 8003542:	f8c9 7004 	str.w	r7, [r9, #4]
 8003546:	f300 8245 	bgt.w	80039d4 <_svfprintf_r+0xf10>
 800354a:	f109 0908 	add.w	r9, r9, #8
 800354e:	e4ef      	b.n	8002f30 <_svfprintf_r+0x46c>
 8003550:	08006930 	.word	0x08006930
 8003554:	0800694c 	.word	0x0800694c
 8003558:	08006950 	.word	0x08006950
 800355c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800355e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8003560:	2b01      	cmp	r3, #1
 8003562:	f340 820c 	ble.w	800397e <_svfprintf_r+0xeba>
 8003566:	3501      	adds	r5, #1
 8003568:	3401      	adds	r4, #1
 800356a:	2301      	movs	r3, #1
 800356c:	2d07      	cmp	r5, #7
 800356e:	9423      	str	r4, [sp, #140]	; 0x8c
 8003570:	9522      	str	r5, [sp, #136]	; 0x88
 8003572:	f8c9 6000 	str.w	r6, [r9]
 8003576:	f8c9 3004 	str.w	r3, [r9, #4]
 800357a:	f300 8211 	bgt.w	80039a0 <_svfprintf_r+0xedc>
 800357e:	f109 0908 	add.w	r9, r9, #8
 8003582:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003586:	f8c9 3000 	str.w	r3, [r9]
 800358a:	3501      	adds	r5, #1
 800358c:	4414      	add	r4, r2
 800358e:	2d07      	cmp	r5, #7
 8003590:	9423      	str	r4, [sp, #140]	; 0x8c
 8003592:	9522      	str	r5, [sp, #136]	; 0x88
 8003594:	f8c9 2004 	str.w	r2, [r9, #4]
 8003598:	f300 820f 	bgt.w	80039ba <_svfprintf_r+0xef6>
 800359c:	f109 0908 	add.w	r9, r9, #8
 80035a0:	2300      	movs	r3, #0
 80035a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80035a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80035a6:	2200      	movs	r2, #0
 80035a8:	f002 fe8c 	bl	80062c4 <__aeabi_dcmpeq>
 80035ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035ae:	2800      	cmp	r0, #0
 80035b0:	f040 80c4 	bne.w	800373c <_svfprintf_r+0xc78>
 80035b4:	3b01      	subs	r3, #1
 80035b6:	3501      	adds	r5, #1
 80035b8:	3601      	adds	r6, #1
 80035ba:	441c      	add	r4, r3
 80035bc:	2d07      	cmp	r5, #7
 80035be:	9522      	str	r5, [sp, #136]	; 0x88
 80035c0:	9423      	str	r4, [sp, #140]	; 0x8c
 80035c2:	f8c9 6000 	str.w	r6, [r9]
 80035c6:	f8c9 3004 	str.w	r3, [r9, #4]
 80035ca:	f300 80f4 	bgt.w	80037b6 <_svfprintf_r+0xcf2>
 80035ce:	f109 0908 	add.w	r9, r9, #8
 80035d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80035d4:	f8c9 2004 	str.w	r2, [r9, #4]
 80035d8:	3501      	adds	r5, #1
 80035da:	4414      	add	r4, r2
 80035dc:	ab1d      	add	r3, sp, #116	; 0x74
 80035de:	2d07      	cmp	r5, #7
 80035e0:	9423      	str	r4, [sp, #140]	; 0x8c
 80035e2:	9522      	str	r5, [sp, #136]	; 0x88
 80035e4:	f8c9 3000 	str.w	r3, [r9]
 80035e8:	f77f acfa 	ble.w	8002fe0 <_svfprintf_r+0x51c>
 80035ec:	aa21      	add	r2, sp, #132	; 0x84
 80035ee:	9907      	ldr	r1, [sp, #28]
 80035f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f2:	f002 f971 	bl	80058d8 <__ssprint_r>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	f47f ab5a 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 80035fc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80035fe:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003602:	e4ef      	b.n	8002fe4 <_svfprintf_r+0x520>
 8003604:	aa21      	add	r2, sp, #132	; 0x84
 8003606:	9907      	ldr	r1, [sp, #28]
 8003608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800360a:	f002 f965 	bl	80058d8 <__ssprint_r>
 800360e:	2800      	cmp	r0, #0
 8003610:	f43f ad36 	beq.w	8003080 <_svfprintf_r+0x5bc>
 8003614:	f7ff bb4c 	b.w	8002cb0 <_svfprintf_r+0x1ec>
 8003618:	aa21      	add	r2, sp, #132	; 0x84
 800361a:	9907      	ldr	r1, [sp, #28]
 800361c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800361e:	f002 f95b 	bl	80058d8 <__ssprint_r>
 8003622:	2800      	cmp	r0, #0
 8003624:	f47f ab44 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003628:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800362a:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800362e:	e4c6      	b.n	8002fbe <_svfprintf_r+0x4fa>
 8003630:	aa21      	add	r2, sp, #132	; 0x84
 8003632:	9907      	ldr	r1, [sp, #28]
 8003634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003636:	f002 f94f 	bl	80058d8 <__ssprint_r>
 800363a:	2800      	cmp	r0, #0
 800363c:	f47f ab38 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003640:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003642:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003646:	e45f      	b.n	8002f08 <_svfprintf_r+0x444>
 8003648:	aa21      	add	r2, sp, #132	; 0x84
 800364a:	9907      	ldr	r1, [sp, #28]
 800364c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800364e:	f002 f943 	bl	80058d8 <__ssprint_r>
 8003652:	2800      	cmp	r0, #0
 8003654:	f47f ab2c 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003658:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800365a:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800365e:	e463      	b.n	8002f28 <_svfprintf_r+0x464>
 8003660:	f1bb 0f00 	cmp.w	fp, #0
 8003664:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8003668:	f2c0 825a 	blt.w	8003b20 <_svfprintf_r+0x105c>
 800366c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8003670:	9306      	str	r3, [sp, #24]
 8003672:	ea54 0305 	orrs.w	r3, r4, r5
 8003676:	f47f adce 	bne.w	8003216 <_svfprintf_r+0x752>
 800367a:	f1bb 0f00 	cmp.w	fp, #0
 800367e:	f43f ae8f 	beq.w	80033a0 <_svfprintf_r+0x8dc>
 8003682:	2700      	movs	r7, #0
 8003684:	e6ba      	b.n	80033fc <_svfprintf_r+0x938>
 8003686:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003688:	2d00      	cmp	r5, #0
 800368a:	f340 824b 	ble.w	8003b24 <_svfprintf_r+0x1060>
 800368e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003690:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003692:	4293      	cmp	r3, r2
 8003694:	bfa8      	it	ge
 8003696:	4613      	movge	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	461d      	mov	r5, r3
 800369c:	dd0d      	ble.n	80036ba <_svfprintf_r+0xbf6>
 800369e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036a0:	f8c9 6000 	str.w	r6, [r9]
 80036a4:	3301      	adds	r3, #1
 80036a6:	442c      	add	r4, r5
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	9423      	str	r4, [sp, #140]	; 0x8c
 80036ac:	f8c9 5004 	str.w	r5, [r9, #4]
 80036b0:	9322      	str	r3, [sp, #136]	; 0x88
 80036b2:	f300 8388 	bgt.w	8003dc6 <_svfprintf_r+0x1302>
 80036b6:	f109 0908 	add.w	r9, r9, #8
 80036ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036bc:	2d00      	cmp	r5, #0
 80036be:	bfa8      	it	ge
 80036c0:	1b5b      	subge	r3, r3, r5
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	461d      	mov	r5, r3
 80036c6:	f340 80f7 	ble.w	80038b8 <_svfprintf_r+0xdf4>
 80036ca:	2d10      	cmp	r5, #16
 80036cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036ce:	f8df 8558 	ldr.w	r8, [pc, #1368]	; 8003c28 <_svfprintf_r+0x1164>
 80036d2:	f340 820b 	ble.w	8003aec <_svfprintf_r+0x1028>
 80036d6:	4641      	mov	r1, r8
 80036d8:	4622      	mov	r2, r4
 80036da:	46b0      	mov	r8, r6
 80036dc:	2710      	movs	r7, #16
 80036de:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80036e2:	9c07      	ldr	r4, [sp, #28]
 80036e4:	460e      	mov	r6, r1
 80036e6:	e005      	b.n	80036f4 <_svfprintf_r+0xc30>
 80036e8:	f109 0908 	add.w	r9, r9, #8
 80036ec:	3d10      	subs	r5, #16
 80036ee:	2d10      	cmp	r5, #16
 80036f0:	f340 81f8 	ble.w	8003ae4 <_svfprintf_r+0x1020>
 80036f4:	3301      	adds	r3, #1
 80036f6:	3210      	adds	r2, #16
 80036f8:	2b07      	cmp	r3, #7
 80036fa:	9223      	str	r2, [sp, #140]	; 0x8c
 80036fc:	9322      	str	r3, [sp, #136]	; 0x88
 80036fe:	e889 00c0 	stmia.w	r9, {r6, r7}
 8003702:	ddf1      	ble.n	80036e8 <_svfprintf_r+0xc24>
 8003704:	aa21      	add	r2, sp, #132	; 0x84
 8003706:	4621      	mov	r1, r4
 8003708:	4658      	mov	r0, fp
 800370a:	f002 f8e5 	bl	80058d8 <__ssprint_r>
 800370e:	2800      	cmp	r0, #0
 8003710:	f47f aace 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003714:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003718:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800371c:	e7e6      	b.n	80036ec <_svfprintf_r+0xc28>
 800371e:	aa21      	add	r2, sp, #132	; 0x84
 8003720:	9907      	ldr	r1, [sp, #28]
 8003722:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003724:	f002 f8d8 	bl	80058d8 <__ssprint_r>
 8003728:	2800      	cmp	r0, #0
 800372a:	f47f aac1 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 800372e:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8003732:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003734:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003738:	f7ff bbd6 	b.w	8002ee8 <_svfprintf_r+0x424>
 800373c:	1e5e      	subs	r6, r3, #1
 800373e:	2e00      	cmp	r6, #0
 8003740:	f77f af47 	ble.w	80035d2 <_svfprintf_r+0xb0e>
 8003744:	2e10      	cmp	r6, #16
 8003746:	f8df 84e0 	ldr.w	r8, [pc, #1248]	; 8003c28 <_svfprintf_r+0x1164>
 800374a:	dd29      	ble.n	80037a0 <_svfprintf_r+0xcdc>
 800374c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003750:	2710      	movs	r7, #16
 8003752:	46c2      	mov	sl, r8
 8003754:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003758:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800375c:	e004      	b.n	8003768 <_svfprintf_r+0xca4>
 800375e:	3e10      	subs	r6, #16
 8003760:	2e10      	cmp	r6, #16
 8003762:	f109 0908 	add.w	r9, r9, #8
 8003766:	dd18      	ble.n	800379a <_svfprintf_r+0xcd6>
 8003768:	3501      	adds	r5, #1
 800376a:	3410      	adds	r4, #16
 800376c:	2d07      	cmp	r5, #7
 800376e:	9423      	str	r4, [sp, #140]	; 0x8c
 8003770:	9522      	str	r5, [sp, #136]	; 0x88
 8003772:	f8c9 a000 	str.w	sl, [r9]
 8003776:	f8c9 7004 	str.w	r7, [r9, #4]
 800377a:	ddf0      	ble.n	800375e <_svfprintf_r+0xc9a>
 800377c:	aa21      	add	r2, sp, #132	; 0x84
 800377e:	4641      	mov	r1, r8
 8003780:	4658      	mov	r0, fp
 8003782:	f002 f8a9 	bl	80058d8 <__ssprint_r>
 8003786:	2800      	cmp	r0, #0
 8003788:	f47f aa92 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 800378c:	3e10      	subs	r6, #16
 800378e:	2e10      	cmp	r6, #16
 8003790:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003792:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8003794:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003798:	dce6      	bgt.n	8003768 <_svfprintf_r+0xca4>
 800379a:	46d0      	mov	r8, sl
 800379c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037a0:	f8c9 8000 	str.w	r8, [r9]
 80037a4:	3501      	adds	r5, #1
 80037a6:	4434      	add	r4, r6
 80037a8:	2d07      	cmp	r5, #7
 80037aa:	9423      	str	r4, [sp, #140]	; 0x8c
 80037ac:	9522      	str	r5, [sp, #136]	; 0x88
 80037ae:	f8c9 6004 	str.w	r6, [r9, #4]
 80037b2:	f77f af0c 	ble.w	80035ce <_svfprintf_r+0xb0a>
 80037b6:	aa21      	add	r2, sp, #132	; 0x84
 80037b8:	9907      	ldr	r1, [sp, #28]
 80037ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037bc:	f002 f88c 	bl	80058d8 <__ssprint_r>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f47f aa75 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 80037c6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80037c8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80037ca:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80037ce:	e700      	b.n	80035d2 <_svfprintf_r+0xb0e>
 80037d0:	9906      	ldr	r1, [sp, #24]
 80037d2:	f011 0210 	ands.w	r2, r1, #16
 80037d6:	f000 815e 	beq.w	8003a96 <_svfprintf_r+0xfd2>
 80037da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80037dc:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80037e0:	f1bb 0f00 	cmp.w	fp, #0
 80037e4:	6804      	ldr	r4, [r0, #0]
 80037e6:	f100 0704 	add.w	r7, r0, #4
 80037ea:	f04f 0500 	mov.w	r5, #0
 80037ee:	db33      	blt.n	8003858 <_svfprintf_r+0xd94>
 80037f0:	460a      	mov	r2, r1
 80037f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f6:	9206      	str	r2, [sp, #24]
 80037f8:	ea54 0205 	orrs.w	r2, r4, r5
 80037fc:	970d      	str	r7, [sp, #52]	; 0x34
 80037fe:	461f      	mov	r7, r3
 8003800:	f47f aaff 	bne.w	8002e02 <_svfprintf_r+0x33e>
 8003804:	e4cc      	b.n	80031a0 <_svfprintf_r+0x6dc>
 8003806:	9b06      	ldr	r3, [sp, #24]
 8003808:	06d9      	lsls	r1, r3, #27
 800380a:	d42c      	bmi.n	8003866 <_svfprintf_r+0xda2>
 800380c:	9b06      	ldr	r3, [sp, #24]
 800380e:	065a      	lsls	r2, r3, #25
 8003810:	d529      	bpl.n	8003866 <_svfprintf_r+0xda2>
 8003812:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003814:	f9b1 4000 	ldrsh.w	r4, [r1]
 8003818:	3104      	adds	r1, #4
 800381a:	17e5      	asrs	r5, r4, #31
 800381c:	4622      	mov	r2, r4
 800381e:	462b      	mov	r3, r5
 8003820:	910d      	str	r1, [sp, #52]	; 0x34
 8003822:	f7ff badb 	b.w	8002ddc <_svfprintf_r+0x318>
 8003826:	46b8      	mov	r8, r7
 8003828:	3301      	adds	r3, #1
 800382a:	442c      	add	r4, r5
 800382c:	2b07      	cmp	r3, #7
 800382e:	9423      	str	r4, [sp, #140]	; 0x8c
 8003830:	9322      	str	r3, [sp, #136]	; 0x88
 8003832:	f8c9 8000 	str.w	r8, [r9]
 8003836:	f8c9 5004 	str.w	r5, [r9, #4]
 800383a:	f77f abd1 	ble.w	8002fe0 <_svfprintf_r+0x51c>
 800383e:	e6d5      	b.n	80035ec <_svfprintf_r+0xb28>
 8003840:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003842:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003846:	f1bb 0f00 	cmp.w	fp, #0
 800384a:	680c      	ldr	r4, [r1, #0]
 800384c:	f101 0704 	add.w	r7, r1, #4
 8003850:	f04f 0500 	mov.w	r5, #0
 8003854:	f280 81ba 	bge.w	8003bcc <_svfprintf_r+0x1108>
 8003858:	970d      	str	r7, [sp, #52]	; 0x34
 800385a:	461f      	mov	r7, r3
 800385c:	ea54 0305 	orrs.w	r3, r4, r5
 8003860:	f47f aacf 	bne.w	8002e02 <_svfprintf_r+0x33e>
 8003864:	e4a1      	b.n	80031aa <_svfprintf_r+0x6e6>
 8003866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003868:	6814      	ldr	r4, [r2, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	3304      	adds	r3, #4
 800386e:	17e5      	asrs	r5, r4, #31
 8003870:	4622      	mov	r2, r4
 8003872:	930d      	str	r3, [sp, #52]	; 0x34
 8003874:	2a00      	cmp	r2, #0
 8003876:	462b      	mov	r3, r5
 8003878:	f173 0300 	sbcs.w	r3, r3, #0
 800387c:	f6bf aab3 	bge.w	8002de6 <_svfprintf_r+0x322>
 8003880:	4264      	negs	r4, r4
 8003882:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8003886:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800388a:	f1bb 0f00 	cmp.w	fp, #0
 800388e:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8003892:	f6ff aab6 	blt.w	8002e02 <_svfprintf_r+0x33e>
 8003896:	9b06      	ldr	r3, [sp, #24]
 8003898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389c:	9306      	str	r3, [sp, #24]
 800389e:	f7ff bab0 	b.w	8002e02 <_svfprintf_r+0x33e>
 80038a2:	aa21      	add	r2, sp, #132	; 0x84
 80038a4:	9907      	ldr	r1, [sp, #28]
 80038a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038a8:	f002 f816 	bl	80058d8 <__ssprint_r>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	f47f a9ff 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 80038b2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80038b4:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80038b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80038ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80038bc:	4432      	add	r2, r6
 80038be:	4617      	mov	r7, r2
 80038c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80038c2:	4293      	cmp	r3, r2
 80038c4:	db4a      	blt.n	800395c <_svfprintf_r+0xe98>
 80038c6:	9a06      	ldr	r2, [sp, #24]
 80038c8:	07d5      	lsls	r5, r2, #31
 80038ca:	d447      	bmi.n	800395c <_svfprintf_r+0xe98>
 80038cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80038ce:	440e      	add	r6, r1
 80038d0:	1bf5      	subs	r5, r6, r7
 80038d2:	1acb      	subs	r3, r1, r3
 80038d4:	429d      	cmp	r5, r3
 80038d6:	bfa8      	it	ge
 80038d8:	461d      	movge	r5, r3
 80038da:	2d00      	cmp	r5, #0
 80038dc:	462e      	mov	r6, r5
 80038de:	dd0d      	ble.n	80038fc <_svfprintf_r+0xe38>
 80038e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80038e2:	f8c9 7000 	str.w	r7, [r9]
 80038e6:	3201      	adds	r2, #1
 80038e8:	442c      	add	r4, r5
 80038ea:	2a07      	cmp	r2, #7
 80038ec:	9423      	str	r4, [sp, #140]	; 0x8c
 80038ee:	f8c9 5004 	str.w	r5, [r9, #4]
 80038f2:	9222      	str	r2, [sp, #136]	; 0x88
 80038f4:	f300 8291 	bgt.w	8003e1a <_svfprintf_r+0x1356>
 80038f8:	f109 0908 	add.w	r9, r9, #8
 80038fc:	2e00      	cmp	r6, #0
 80038fe:	bfac      	ite	ge
 8003900:	1b9d      	subge	r5, r3, r6
 8003902:	461d      	movlt	r5, r3
 8003904:	2d00      	cmp	r5, #0
 8003906:	f77f ab6d 	ble.w	8002fe4 <_svfprintf_r+0x520>
 800390a:	2d10      	cmp	r5, #16
 800390c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800390e:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8003c28 <_svfprintf_r+0x1164>
 8003912:	dd89      	ble.n	8003828 <_svfprintf_r+0xd64>
 8003914:	4647      	mov	r7, r8
 8003916:	2610      	movs	r6, #16
 8003918:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800391c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003920:	e005      	b.n	800392e <_svfprintf_r+0xe6a>
 8003922:	f109 0908 	add.w	r9, r9, #8
 8003926:	3d10      	subs	r5, #16
 8003928:	2d10      	cmp	r5, #16
 800392a:	f77f af7c 	ble.w	8003826 <_svfprintf_r+0xd62>
 800392e:	3301      	adds	r3, #1
 8003930:	3410      	adds	r4, #16
 8003932:	2b07      	cmp	r3, #7
 8003934:	9423      	str	r4, [sp, #140]	; 0x8c
 8003936:	9322      	str	r3, [sp, #136]	; 0x88
 8003938:	f8c9 7000 	str.w	r7, [r9]
 800393c:	f8c9 6004 	str.w	r6, [r9, #4]
 8003940:	ddef      	ble.n	8003922 <_svfprintf_r+0xe5e>
 8003942:	aa21      	add	r2, sp, #132	; 0x84
 8003944:	4659      	mov	r1, fp
 8003946:	4640      	mov	r0, r8
 8003948:	f001 ffc6 	bl	80058d8 <__ssprint_r>
 800394c:	2800      	cmp	r0, #0
 800394e:	f47f a9af 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003952:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003956:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800395a:	e7e4      	b.n	8003926 <_svfprintf_r+0xe62>
 800395c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800395e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003960:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003962:	f8c9 1000 	str.w	r1, [r9]
 8003966:	3201      	adds	r2, #1
 8003968:	4404      	add	r4, r0
 800396a:	2a07      	cmp	r2, #7
 800396c:	9423      	str	r4, [sp, #140]	; 0x8c
 800396e:	f8c9 0004 	str.w	r0, [r9, #4]
 8003972:	9222      	str	r2, [sp, #136]	; 0x88
 8003974:	f300 8233 	bgt.w	8003dde <_svfprintf_r+0x131a>
 8003978:	f109 0908 	add.w	r9, r9, #8
 800397c:	e7a6      	b.n	80038cc <_svfprintf_r+0xe08>
 800397e:	9b06      	ldr	r3, [sp, #24]
 8003980:	07d8      	lsls	r0, r3, #31
 8003982:	f53f adf0 	bmi.w	8003566 <_svfprintf_r+0xaa2>
 8003986:	3501      	adds	r5, #1
 8003988:	3401      	adds	r4, #1
 800398a:	2301      	movs	r3, #1
 800398c:	2d07      	cmp	r5, #7
 800398e:	9423      	str	r4, [sp, #140]	; 0x8c
 8003990:	9522      	str	r5, [sp, #136]	; 0x88
 8003992:	f8c9 6000 	str.w	r6, [r9]
 8003996:	f8c9 3004 	str.w	r3, [r9, #4]
 800399a:	f77f ae18 	ble.w	80035ce <_svfprintf_r+0xb0a>
 800399e:	e70a      	b.n	80037b6 <_svfprintf_r+0xcf2>
 80039a0:	aa21      	add	r2, sp, #132	; 0x84
 80039a2:	9907      	ldr	r1, [sp, #28]
 80039a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039a6:	f001 ff97 	bl	80058d8 <__ssprint_r>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	f47f a980 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 80039b0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80039b2:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80039b4:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80039b8:	e5e3      	b.n	8003582 <_svfprintf_r+0xabe>
 80039ba:	aa21      	add	r2, sp, #132	; 0x84
 80039bc:	9907      	ldr	r1, [sp, #28]
 80039be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039c0:	f001 ff8a 	bl	80058d8 <__ssprint_r>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	f47f a973 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 80039ca:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80039cc:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80039ce:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80039d2:	e5e5      	b.n	80035a0 <_svfprintf_r+0xadc>
 80039d4:	aa21      	add	r2, sp, #132	; 0x84
 80039d6:	9907      	ldr	r1, [sp, #28]
 80039d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039da:	f001 ff7d 	bl	80058d8 <__ssprint_r>
 80039de:	2800      	cmp	r0, #0
 80039e0:	f47f a966 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 80039e4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80039e6:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80039ea:	f7ff baa1 	b.w	8002f30 <_svfprintf_r+0x46c>
 80039ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80039f0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80039f2:	f001 ff47 	bl	8005884 <__fpclassifyd>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	f040 8118 	bne.w	8003c2c <_svfprintf_r+0x1168>
 80039fc:	9906      	ldr	r1, [sp, #24]
 80039fe:	4e87      	ldr	r6, [pc, #540]	; (8003c1c <_svfprintf_r+0x1158>)
 8003a00:	4b87      	ldr	r3, [pc, #540]	; (8003c20 <_svfprintf_r+0x115c>)
 8003a02:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8003a06:	9010      	str	r0, [sp, #64]	; 0x40
 8003a08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003a0c:	9106      	str	r1, [sp, #24]
 8003a0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a10:	2203      	movs	r2, #3
 8003a12:	4683      	mov	fp, r0
 8003a14:	9208      	str	r2, [sp, #32]
 8003a16:	2947      	cmp	r1, #71	; 0x47
 8003a18:	bfd8      	it	le
 8003a1a:	461e      	movle	r6, r3
 8003a1c:	920c      	str	r2, [sp, #48]	; 0x30
 8003a1e:	f7ff ba14 	b.w	8002e4a <_svfprintf_r+0x386>
 8003a22:	9906      	ldr	r1, [sp, #24]
 8003a24:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8003a28:	f000 80d2 	beq.w	8003bd0 <_svfprintf_r+0x110c>
 8003a2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a2e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003a32:	f1bb 0f00 	cmp.w	fp, #0
 8003a36:	8804      	ldrh	r4, [r0, #0]
 8003a38:	f100 0704 	add.w	r7, r0, #4
 8003a3c:	f04f 0500 	mov.w	r5, #0
 8003a40:	f280 8173 	bge.w	8003d2a <_svfprintf_r+0x1266>
 8003a44:	970d      	str	r7, [sp, #52]	; 0x34
 8003a46:	2700      	movs	r7, #0
 8003a48:	f7ff b95e 	b.w	8002d08 <_svfprintf_r+0x244>
 8003a4c:	9b06      	ldr	r3, [sp, #24]
 8003a4e:	06df      	lsls	r7, r3, #27
 8003a50:	d40b      	bmi.n	8003a6a <_svfprintf_r+0xfa6>
 8003a52:	9b06      	ldr	r3, [sp, #24]
 8003a54:	065e      	lsls	r6, r3, #25
 8003a56:	d508      	bpl.n	8003a6a <_svfprintf_r+0xfa6>
 8003a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	3204      	adds	r2, #4
 8003a5e:	920d      	str	r2, [sp, #52]	; 0x34
 8003a60:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	f7ff b850 	b.w	8002b0a <_svfprintf_r+0x46>
 8003a6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	3204      	adds	r2, #4
 8003a70:	920d      	str	r2, [sp, #52]	; 0x34
 8003a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f7ff b848 	b.w	8002b0a <_svfprintf_r+0x46>
 8003a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a7c:	9b06      	ldr	r3, [sp, #24]
 8003a7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a82:	4613      	mov	r3, r2
 8003a84:	f103 0304 	add.w	r3, r3, #4
 8003a88:	bf0c      	ite	eq
 8003a8a:	6814      	ldreq	r4, [r2, #0]
 8003a8c:	8814      	ldrhne	r4, [r2, #0]
 8003a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8003a90:	2500      	movs	r5, #0
 8003a92:	f7ff bba2 	b.w	80031da <_svfprintf_r+0x716>
 8003a96:	9906      	ldr	r1, [sp, #24]
 8003a98:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8003a9c:	f43f aed0 	beq.w	8003840 <_svfprintf_r+0xd7c>
 8003aa0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003aa2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003aa6:	f1bb 0f00 	cmp.w	fp, #0
 8003aaa:	8804      	ldrh	r4, [r0, #0]
 8003aac:	f100 0704 	add.w	r7, r0, #4
 8003ab0:	f04f 0500 	mov.w	r5, #0
 8003ab4:	f2c0 8163 	blt.w	8003d7e <_svfprintf_r+0x12ba>
 8003ab8:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8003abc:	9306      	str	r3, [sp, #24]
 8003abe:	ea54 0305 	orrs.w	r3, r4, r5
 8003ac2:	970d      	str	r7, [sp, #52]	; 0x34
 8003ac4:	4617      	mov	r7, r2
 8003ac6:	f47f a99c 	bne.w	8002e02 <_svfprintf_r+0x33e>
 8003aca:	f7ff bb69 	b.w	80031a0 <_svfprintf_r+0x6dc>
 8003ace:	2700      	movs	r7, #0
 8003ad0:	45bb      	cmp	fp, r7
 8003ad2:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8003ad6:	f6ff ac91 	blt.w	80033fc <_svfprintf_r+0x938>
 8003ada:	9b06      	ldr	r3, [sp, #24]
 8003adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae0:	9306      	str	r3, [sp, #24]
 8003ae2:	e459      	b.n	8003398 <_svfprintf_r+0x8d4>
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	4646      	mov	r6, r8
 8003aea:	4690      	mov	r8, r2
 8003aec:	3301      	adds	r3, #1
 8003aee:	442c      	add	r4, r5
 8003af0:	2b07      	cmp	r3, #7
 8003af2:	9423      	str	r4, [sp, #140]	; 0x8c
 8003af4:	9322      	str	r3, [sp, #136]	; 0x88
 8003af6:	f8c9 8000 	str.w	r8, [r9]
 8003afa:	f8c9 5004 	str.w	r5, [r9, #4]
 8003afe:	f73f aed0 	bgt.w	80038a2 <_svfprintf_r+0xdde>
 8003b02:	f109 0908 	add.w	r9, r9, #8
 8003b06:	e6d7      	b.n	80038b8 <_svfprintf_r+0xdf4>
 8003b08:	aa21      	add	r2, sp, #132	; 0x84
 8003b0a:	9907      	ldr	r1, [sp, #28]
 8003b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b0e:	f001 fee3 	bl	80058d8 <__ssprint_r>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	f47f a8cc 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003b18:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003b1a:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003b1e:	e48f      	b.n	8003440 <_svfprintf_r+0x97c>
 8003b20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003b22:	e464      	b.n	80033ee <_svfprintf_r+0x92a>
 8003b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b26:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <_svfprintf_r+0x1160>)
 8003b28:	f8c9 2000 	str.w	r2, [r9]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	3401      	adds	r4, #1
 8003b30:	2201      	movs	r2, #1
 8003b32:	2b07      	cmp	r3, #7
 8003b34:	9423      	str	r4, [sp, #140]	; 0x8c
 8003b36:	9322      	str	r3, [sp, #136]	; 0x88
 8003b38:	f8c9 2004 	str.w	r2, [r9, #4]
 8003b3c:	f300 810f 	bgt.w	8003d5e <_svfprintf_r+0x129a>
 8003b40:	f109 0908 	add.w	r9, r9, #8
 8003b44:	b92d      	cbnz	r5, 8003b52 <_svfprintf_r+0x108e>
 8003b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b48:	b91b      	cbnz	r3, 8003b52 <_svfprintf_r+0x108e>
 8003b4a:	9b06      	ldr	r3, [sp, #24]
 8003b4c:	07df      	lsls	r7, r3, #31
 8003b4e:	f57f aa49 	bpl.w	8002fe4 <_svfprintf_r+0x520>
 8003b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b54:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003b56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003b58:	f8c9 2000 	str.w	r2, [r9]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	440c      	add	r4, r1
 8003b60:	2b07      	cmp	r3, #7
 8003b62:	9423      	str	r4, [sp, #140]	; 0x8c
 8003b64:	f8c9 1004 	str.w	r1, [r9, #4]
 8003b68:	9322      	str	r3, [sp, #136]	; 0x88
 8003b6a:	f300 81d6 	bgt.w	8003f1a <_svfprintf_r+0x1456>
 8003b6e:	f109 0908 	add.w	r9, r9, #8
 8003b72:	426d      	negs	r5, r5
 8003b74:	2d00      	cmp	r5, #0
 8003b76:	f340 8111 	ble.w	8003d9c <_svfprintf_r+0x12d8>
 8003b7a:	2d10      	cmp	r5, #16
 8003b7c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003c28 <_svfprintf_r+0x1164>
 8003b80:	f340 813e 	ble.w	8003e00 <_svfprintf_r+0x133c>
 8003b84:	4641      	mov	r1, r8
 8003b86:	4622      	mov	r2, r4
 8003b88:	46b0      	mov	r8, r6
 8003b8a:	2710      	movs	r7, #16
 8003b8c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003b90:	9c07      	ldr	r4, [sp, #28]
 8003b92:	460e      	mov	r6, r1
 8003b94:	e005      	b.n	8003ba2 <_svfprintf_r+0x10de>
 8003b96:	f109 0908 	add.w	r9, r9, #8
 8003b9a:	3d10      	subs	r5, #16
 8003b9c:	2d10      	cmp	r5, #16
 8003b9e:	f340 812b 	ble.w	8003df8 <_svfprintf_r+0x1334>
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	3210      	adds	r2, #16
 8003ba6:	2b07      	cmp	r3, #7
 8003ba8:	9223      	str	r2, [sp, #140]	; 0x8c
 8003baa:	9322      	str	r3, [sp, #136]	; 0x88
 8003bac:	e889 00c0 	stmia.w	r9, {r6, r7}
 8003bb0:	ddf1      	ble.n	8003b96 <_svfprintf_r+0x10d2>
 8003bb2:	aa21      	add	r2, sp, #132	; 0x84
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4658      	mov	r0, fp
 8003bb8:	f001 fe8e 	bl	80058d8 <__ssprint_r>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	f47f a877 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003bc2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003bc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bc6:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003bca:	e7e6      	b.n	8003b9a <_svfprintf_r+0x10d6>
 8003bcc:	9a06      	ldr	r2, [sp, #24]
 8003bce:	e610      	b.n	80037f2 <_svfprintf_r+0xd2e>
 8003bd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bd2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003bd6:	f1bb 0f00 	cmp.w	fp, #0
 8003bda:	680c      	ldr	r4, [r1, #0]
 8003bdc:	f101 0704 	add.w	r7, r1, #4
 8003be0:	f04f 0500 	mov.w	r5, #0
 8003be4:	f6ff af2e 	blt.w	8003a44 <_svfprintf_r+0xf80>
 8003be8:	9a06      	ldr	r2, [sp, #24]
 8003bea:	f7ff baab 	b.w	8003144 <_svfprintf_r+0x680>
 8003bee:	9b06      	ldr	r3, [sp, #24]
 8003bf0:	f043 0320 	orr.w	r3, r3, #32
 8003bf4:	9306      	str	r3, [sp, #24]
 8003bf6:	f10a 0a01 	add.w	sl, sl, #1
 8003bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfe:	f7fe bfb7 	b.w	8002b70 <_svfprintf_r+0xac>
 8003c02:	aa21      	add	r2, sp, #132	; 0x84
 8003c04:	9907      	ldr	r1, [sp, #28]
 8003c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c08:	f001 fe66 	bl	80058d8 <__ssprint_r>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f47f a84f 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003c12:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003c14:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003c18:	e42a      	b.n	8003470 <_svfprintf_r+0x9ac>
 8003c1a:	bf00      	nop
 8003c1c:	08006918 	.word	0x08006918
 8003c20:	08006914 	.word	0x08006914
 8003c24:	0800694c 	.word	0x0800694c
 8003c28:	08006950 	.word	0x08006950
 8003c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c2e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8003c32:	f023 0320 	bic.w	r3, r3, #32
 8003c36:	9308      	str	r3, [sp, #32]
 8003c38:	f000 809e 	beq.w	8003d78 <_svfprintf_r+0x12b4>
 8003c3c:	2b47      	cmp	r3, #71	; 0x47
 8003c3e:	d104      	bne.n	8003c4a <_svfprintf_r+0x1186>
 8003c40:	f1bb 0f00 	cmp.w	fp, #0
 8003c44:	bf08      	it	eq
 8003c46:	f04f 0b01 	moveq.w	fp, #1
 8003c4a:	9b06      	ldr	r3, [sp, #24]
 8003c4c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	930e      	str	r3, [sp, #56]	; 0x38
 8003c56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c58:	1e1f      	subs	r7, r3, #0
 8003c5a:	bfb6      	itet	lt
 8003c5c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 8003c60:	2300      	movge	r3, #0
 8003c62:	232d      	movlt	r3, #45	; 0x2d
 8003c64:	9317      	str	r3, [sp, #92]	; 0x5c
 8003c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c68:	2b66      	cmp	r3, #102	; 0x66
 8003c6a:	f000 8177 	beq.w	8003f5c <_svfprintf_r+0x1498>
 8003c6e:	2b46      	cmp	r3, #70	; 0x46
 8003c70:	f000 819b 	beq.w	8003faa <_svfprintf_r+0x14e6>
 8003c74:	9b08      	ldr	r3, [sp, #32]
 8003c76:	a81f      	add	r0, sp, #124	; 0x7c
 8003c78:	2b45      	cmp	r3, #69	; 0x45
 8003c7a:	a91c      	add	r1, sp, #112	; 0x70
 8003c7c:	bf0c      	ite	eq
 8003c7e:	f10b 0501 	addeq.w	r5, fp, #1
 8003c82:	465d      	movne	r5, fp
 8003c84:	9004      	str	r0, [sp, #16]
 8003c86:	9103      	str	r1, [sp, #12]
 8003c88:	a81b      	add	r0, sp, #108	; 0x6c
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	9002      	str	r0, [sp, #8]
 8003c90:	4642      	mov	r2, r8
 8003c92:	9501      	str	r5, [sp, #4]
 8003c94:	9100      	str	r1, [sp, #0]
 8003c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c98:	f000 fb46 	bl	8004328 <_dtoa_r>
 8003c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c9e:	2b67      	cmp	r3, #103	; 0x67
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	f000 80e0 	beq.w	8003e66 <_svfprintf_r+0x13a2>
 8003ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ca8:	2b47      	cmp	r3, #71	; 0x47
 8003caa:	f000 80ec 	beq.w	8003e86 <_svfprintf_r+0x13c2>
 8003cae:	1974      	adds	r4, r6, r5
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f002 fb04 	bl	80062c4 <__aeabi_dcmpeq>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	f040 80f4 	bne.w	8003eaa <_svfprintf_r+0x13e6>
 8003cc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	d906      	bls.n	8003cd6 <_svfprintf_r+0x1212>
 8003cc8:	2130      	movs	r1, #48	; 0x30
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	921f      	str	r2, [sp, #124]	; 0x7c
 8003cce:	7019      	strb	r1, [r3, #0]
 8003cd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d8f9      	bhi.n	8003cca <_svfprintf_r+0x1206>
 8003cd6:	1b9b      	subs	r3, r3, r6
 8003cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8003cda:	9b08      	ldr	r3, [sp, #32]
 8003cdc:	2b47      	cmp	r3, #71	; 0x47
 8003cde:	f000 80dd 	beq.w	8003e9c <_svfprintf_r+0x13d8>
 8003ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ce4:	2b65      	cmp	r3, #101	; 0x65
 8003ce6:	f340 8207 	ble.w	80040f8 <_svfprintf_r+0x1634>
 8003cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cec:	2b66      	cmp	r3, #102	; 0x66
 8003cee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cf0:	9310      	str	r3, [sp, #64]	; 0x40
 8003cf2:	f000 814c 	beq.w	8003f8e <_svfprintf_r+0x14ca>
 8003cf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003cf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003cfa:	428a      	cmp	r2, r1
 8003cfc:	f2c0 811f 	blt.w	8003f3e <_svfprintf_r+0x147a>
 8003d00:	9b06      	ldr	r3, [sp, #24]
 8003d02:	07d9      	lsls	r1, r3, #31
 8003d04:	f100 8193 	bmi.w	800402e <_svfprintf_r+0x156a>
 8003d08:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003d0c:	920c      	str	r2, [sp, #48]	; 0x30
 8003d0e:	2267      	movs	r2, #103	; 0x67
 8003d10:	920f      	str	r2, [sp, #60]	; 0x3c
 8003d12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	f040 80ac 	bne.w	8003e72 <_svfprintf_r+0x13ae>
 8003d1a:	9308      	str	r3, [sp, #32]
 8003d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d1e:	9306      	str	r3, [sp, #24]
 8003d20:	4693      	mov	fp, r2
 8003d22:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8003d26:	f7ff b890 	b.w	8002e4a <_svfprintf_r+0x386>
 8003d2a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8003d2e:	9306      	str	r3, [sp, #24]
 8003d30:	ea54 0305 	orrs.w	r3, r4, r5
 8003d34:	970d      	str	r7, [sp, #52]	; 0x34
 8003d36:	f43f ab4f 	beq.w	80033d8 <_svfprintf_r+0x914>
 8003d3a:	4617      	mov	r7, r2
 8003d3c:	f7fe bfe4 	b.w	8002d08 <_svfprintf_r+0x244>
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d44:	f7fd f9b4 	bl	80010b0 <_malloc_r>
 8003d48:	9a07      	ldr	r2, [sp, #28]
 8003d4a:	6010      	str	r0, [r2, #0]
 8003d4c:	6110      	str	r0, [r2, #16]
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	f000 81c7 	beq.w	80040e2 <_svfprintf_r+0x161e>
 8003d54:	9a07      	ldr	r2, [sp, #28]
 8003d56:	2340      	movs	r3, #64	; 0x40
 8003d58:	6153      	str	r3, [r2, #20]
 8003d5a:	f7fe beca 	b.w	8002af2 <_svfprintf_r+0x2e>
 8003d5e:	aa21      	add	r2, sp, #132	; 0x84
 8003d60:	9907      	ldr	r1, [sp, #28]
 8003d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d64:	f001 fdb8 	bl	80058d8 <__ssprint_r>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	f47e afa1 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003d6e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003d70:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003d72:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003d76:	e6e5      	b.n	8003b44 <_svfprintf_r+0x1080>
 8003d78:	f04f 0b06 	mov.w	fp, #6
 8003d7c:	e765      	b.n	8003c4a <_svfprintf_r+0x1186>
 8003d7e:	970d      	str	r7, [sp, #52]	; 0x34
 8003d80:	4617      	mov	r7, r2
 8003d82:	e56b      	b.n	800385c <_svfprintf_r+0xd98>
 8003d84:	aa21      	add	r2, sp, #132	; 0x84
 8003d86:	9907      	ldr	r1, [sp, #28]
 8003d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d8a:	f001 fda5 	bl	80058d8 <__ssprint_r>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	f47e af8e 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003d94:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003d96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d98:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003d9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003d9e:	f8c9 6000 	str.w	r6, [r9]
 8003da2:	3301      	adds	r3, #1
 8003da4:	440c      	add	r4, r1
 8003da6:	2b07      	cmp	r3, #7
 8003da8:	9423      	str	r4, [sp, #140]	; 0x8c
 8003daa:	9322      	str	r3, [sp, #136]	; 0x88
 8003dac:	f8c9 1004 	str.w	r1, [r9, #4]
 8003db0:	f77f a916 	ble.w	8002fe0 <_svfprintf_r+0x51c>
 8003db4:	e41a      	b.n	80035ec <_svfprintf_r+0xb28>
 8003db6:	4630      	mov	r0, r6
 8003db8:	f7fd ff22 	bl	8001c00 <strlen>
 8003dbc:	46a3      	mov	fp, r4
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	900c      	str	r0, [sp, #48]	; 0x30
 8003dc2:	f7ff bade 	b.w	8003382 <_svfprintf_r+0x8be>
 8003dc6:	aa21      	add	r2, sp, #132	; 0x84
 8003dc8:	9907      	ldr	r1, [sp, #28]
 8003dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dcc:	f001 fd84 	bl	80058d8 <__ssprint_r>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	f47e af6d 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003dd6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003dd8:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003ddc:	e46d      	b.n	80036ba <_svfprintf_r+0xbf6>
 8003dde:	aa21      	add	r2, sp, #132	; 0x84
 8003de0:	9907      	ldr	r1, [sp, #28]
 8003de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de4:	f001 fd78 	bl	80058d8 <__ssprint_r>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	f47e af61 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003df0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003df2:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003df6:	e569      	b.n	80038cc <_svfprintf_r+0xe08>
 8003df8:	4614      	mov	r4, r2
 8003dfa:	4632      	mov	r2, r6
 8003dfc:	4646      	mov	r6, r8
 8003dfe:	4690      	mov	r8, r2
 8003e00:	3301      	adds	r3, #1
 8003e02:	442c      	add	r4, r5
 8003e04:	2b07      	cmp	r3, #7
 8003e06:	9423      	str	r4, [sp, #140]	; 0x8c
 8003e08:	9322      	str	r3, [sp, #136]	; 0x88
 8003e0a:	f8c9 8000 	str.w	r8, [r9]
 8003e0e:	f8c9 5004 	str.w	r5, [r9, #4]
 8003e12:	dcb7      	bgt.n	8003d84 <_svfprintf_r+0x12c0>
 8003e14:	f109 0908 	add.w	r9, r9, #8
 8003e18:	e7c0      	b.n	8003d9c <_svfprintf_r+0x12d8>
 8003e1a:	aa21      	add	r2, sp, #132	; 0x84
 8003e1c:	9907      	ldr	r1, [sp, #28]
 8003e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e20:	f001 fd5a 	bl	80058d8 <__ssprint_r>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	f47e af43 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003e2e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003e36:	e561      	b.n	80038fc <_svfprintf_r+0xe38>
 8003e38:	2d06      	cmp	r5, #6
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	bf28      	it	cs
 8003e3e:	2306      	movcs	r3, #6
 8003e40:	930c      	str	r3, [sp, #48]	; 0x30
 8003e42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e46:	46b3      	mov	fp, r6
 8003e48:	970d      	str	r7, [sp, #52]	; 0x34
 8003e4a:	9610      	str	r6, [sp, #64]	; 0x40
 8003e4c:	4637      	mov	r7, r6
 8003e4e:	9308      	str	r3, [sp, #32]
 8003e50:	4eb8      	ldr	r6, [pc, #736]	; (8004134 <_svfprintf_r+0x1670>)
 8003e52:	f7fe bffa 	b.w	8002e4a <_svfprintf_r+0x386>
 8003e56:	9306      	str	r3, [sp, #24]
 8003e58:	f7ff b9dd 	b.w	8003216 <_svfprintf_r+0x752>
 8003e5c:	272d      	movs	r7, #45	; 0x2d
 8003e5e:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8003e62:	f7ff b936 	b.w	80030d2 <_svfprintf_r+0x60e>
 8003e66:	9b06      	ldr	r3, [sp, #24]
 8003e68:	07da      	lsls	r2, r3, #31
 8003e6a:	f53f af20 	bmi.w	8003cae <_svfprintf_r+0x11ea>
 8003e6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e70:	e731      	b.n	8003cd6 <_svfprintf_r+0x1212>
 8003e72:	272d      	movs	r7, #45	; 0x2d
 8003e74:	9308      	str	r3, [sp, #32]
 8003e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e78:	9306      	str	r3, [sp, #24]
 8003e7a:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8003e7e:	f04f 0b00 	mov.w	fp, #0
 8003e82:	f7fe bfe3 	b.w	8002e4c <_svfprintf_r+0x388>
 8003e86:	9b06      	ldr	r3, [sp, #24]
 8003e88:	07db      	lsls	r3, r3, #31
 8003e8a:	f100 809f 	bmi.w	8003fcc <_svfprintf_r+0x1508>
 8003e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e90:	1b9b      	subs	r3, r3, r6
 8003e92:	9311      	str	r3, [sp, #68]	; 0x44
 8003e94:	9b08      	ldr	r3, [sp, #32]
 8003e96:	2b47      	cmp	r3, #71	; 0x47
 8003e98:	f040 812e 	bne.w	80040f8 <_svfprintf_r+0x1634>
 8003e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e9e:	1cdd      	adds	r5, r3, #3
 8003ea0:	db10      	blt.n	8003ec4 <_svfprintf_r+0x1400>
 8003ea2:	459b      	cmp	fp, r3
 8003ea4:	db0e      	blt.n	8003ec4 <_svfprintf_r+0x1400>
 8003ea6:	9310      	str	r3, [sp, #64]	; 0x40
 8003ea8:	e725      	b.n	8003cf6 <_svfprintf_r+0x1232>
 8003eaa:	4623      	mov	r3, r4
 8003eac:	e713      	b.n	8003cd6 <_svfprintf_r+0x1212>
 8003eae:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003eb2:	970d      	str	r7, [sp, #52]	; 0x34
 8003eb4:	9308      	str	r3, [sp, #32]
 8003eb6:	950c      	str	r5, [sp, #48]	; 0x30
 8003eb8:	4683      	mov	fp, r0
 8003eba:	9010      	str	r0, [sp, #64]	; 0x40
 8003ebc:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8003ec0:	f7fe bfc3 	b.w	8002e4a <_svfprintf_r+0x386>
 8003ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ec6:	3a02      	subs	r2, #2
 8003ec8:	920f      	str	r2, [sp, #60]	; 0x3c
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8003ed2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ed4:	bfb8      	it	lt
 8003ed6:	425b      	neglt	r3, r3
 8003ed8:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
 8003edc:	bfb4      	ite	lt
 8003ede:	222d      	movlt	r2, #45	; 0x2d
 8003ee0:	222b      	movge	r2, #43	; 0x2b
 8003ee2:	2b09      	cmp	r3, #9
 8003ee4:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8003ee8:	dc76      	bgt.n	8003fd8 <_svfprintf_r+0x1514>
 8003eea:	3330      	adds	r3, #48	; 0x30
 8003eec:	2230      	movs	r2, #48	; 0x30
 8003eee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8003ef2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8003ef6:	ab1e      	add	r3, sp, #120	; 0x78
 8003ef8:	aa1d      	add	r2, sp, #116	; 0x74
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003efe:	9316      	str	r3, [sp, #88]	; 0x58
 8003f00:	2a01      	cmp	r2, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	930c      	str	r3, [sp, #48]	; 0x30
 8003f06:	f340 80d5 	ble.w	80040b4 <_svfprintf_r+0x15f0>
 8003f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	3301      	adds	r3, #1
 8003f10:	930c      	str	r3, [sp, #48]	; 0x30
 8003f12:	9210      	str	r2, [sp, #64]	; 0x40
 8003f14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003f18:	e6fb      	b.n	8003d12 <_svfprintf_r+0x124e>
 8003f1a:	aa21      	add	r2, sp, #132	; 0x84
 8003f1c:	9907      	ldr	r1, [sp, #28]
 8003f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f20:	f001 fcda 	bl	80058d8 <__ssprint_r>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	f47e aec3 	bne.w	8002cb0 <_svfprintf_r+0x1ec>
 8003f2a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f2c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8003f2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f30:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003f34:	e61d      	b.n	8003b72 <_svfprintf_r+0x10ae>
 8003f36:	46a2      	mov	sl, r4
 8003f38:	2500      	movs	r5, #0
 8003f3a:	f7fe be1b 	b.w	8002b74 <_svfprintf_r+0xb0>
 8003f3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bfd8      	it	le
 8003f44:	f1c3 0502 	rsble	r5, r3, #2
 8003f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f4a:	bfc8      	it	gt
 8003f4c:	2501      	movgt	r5, #1
 8003f4e:	18eb      	adds	r3, r5, r3
 8003f50:	2267      	movs	r2, #103	; 0x67
 8003f52:	930c      	str	r3, [sp, #48]	; 0x30
 8003f54:	920f      	str	r2, [sp, #60]	; 0x3c
 8003f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003f5a:	e6da      	b.n	8003d12 <_svfprintf_r+0x124e>
 8003f5c:	a81f      	add	r0, sp, #124	; 0x7c
 8003f5e:	a91c      	add	r1, sp, #112	; 0x70
 8003f60:	9004      	str	r0, [sp, #16]
 8003f62:	9103      	str	r1, [sp, #12]
 8003f64:	a81b      	add	r0, sp, #108	; 0x6c
 8003f66:	2103      	movs	r1, #3
 8003f68:	9002      	str	r0, [sp, #8]
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	f8cd b004 	str.w	fp, [sp, #4]
 8003f72:	9100      	str	r1, [sp, #0]
 8003f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f76:	f000 f9d7 	bl	8004328 <_dtoa_r>
 8003f7a:	465d      	mov	r5, fp
 8003f7c:	4606      	mov	r6, r0
 8003f7e:	eb00 040b 	add.w	r4, r0, fp
 8003f82:	7833      	ldrb	r3, [r6, #0]
 8003f84:	2b30      	cmp	r3, #48	; 0x30
 8003f86:	d062      	beq.n	800404e <_svfprintf_r+0x158a>
 8003f88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f8a:	442c      	add	r4, r5
 8003f8c:	e690      	b.n	8003cb0 <_svfprintf_r+0x11ec>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f340 8087 	ble.w	80040a2 <_svfprintf_r+0x15de>
 8003f94:	f1bb 0f00 	cmp.w	fp, #0
 8003f98:	d151      	bne.n	800403e <_svfprintf_r+0x157a>
 8003f9a:	9a06      	ldr	r2, [sp, #24]
 8003f9c:	07d4      	lsls	r4, r2, #31
 8003f9e:	d44e      	bmi.n	800403e <_svfprintf_r+0x157a>
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	920c      	str	r2, [sp, #48]	; 0x30
 8003fa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003fa8:	e6b3      	b.n	8003d12 <_svfprintf_r+0x124e>
 8003faa:	a81f      	add	r0, sp, #124	; 0x7c
 8003fac:	a91c      	add	r1, sp, #112	; 0x70
 8003fae:	9004      	str	r0, [sp, #16]
 8003fb0:	9103      	str	r1, [sp, #12]
 8003fb2:	a81b      	add	r0, sp, #108	; 0x6c
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	9002      	str	r0, [sp, #8]
 8003fb8:	4642      	mov	r2, r8
 8003fba:	463b      	mov	r3, r7
 8003fbc:	f8cd b004 	str.w	fp, [sp, #4]
 8003fc0:	9100      	str	r1, [sp, #0]
 8003fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc4:	f000 f9b0 	bl	8004328 <_dtoa_r>
 8003fc8:	465d      	mov	r5, fp
 8003fca:	4606      	mov	r6, r0
 8003fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fce:	2b46      	cmp	r3, #70	; 0x46
 8003fd0:	eb06 0405 	add.w	r4, r6, r5
 8003fd4:	d0d5      	beq.n	8003f82 <_svfprintf_r+0x14be>
 8003fd6:	e66b      	b.n	8003cb0 <_svfprintf_r+0x11ec>
 8003fd8:	f10d 0483 	add.w	r4, sp, #131	; 0x83
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4a56      	ldr	r2, [pc, #344]	; (8004138 <_svfprintf_r+0x1674>)
 8003fe0:	fb82 2103 	smull	r2, r1, r2, r3
 8003fe4:	17da      	asrs	r2, r3, #31
 8003fe6:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003fea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003fee:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003ff2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003ff6:	2a09      	cmp	r2, #9
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8003ffe:	dcee      	bgt.n	8003fde <_svfprintf_r+0x151a>
 8004000:	4602      	mov	r2, r0
 8004002:	3330      	adds	r3, #48	; 0x30
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800400a:	4294      	cmp	r4, r2
 800400c:	d962      	bls.n	80040d4 <_svfprintf_r+0x1610>
 800400e:	f10d 0176 	add.w	r1, sp, #118	; 0x76
 8004012:	4602      	mov	r2, r0
 8004014:	e001      	b.n	800401a <_svfprintf_r+0x1556>
 8004016:	f812 3b01 	ldrb.w	r3, [r2], #1
 800401a:	f801 3b01 	strb.w	r3, [r1], #1
 800401e:	4294      	cmp	r4, r2
 8004020:	d1f9      	bne.n	8004016 <_svfprintf_r+0x1552>
 8004022:	1c63      	adds	r3, r4, #1
 8004024:	1a1b      	subs	r3, r3, r0
 8004026:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 800402a:	4413      	add	r3, r2
 800402c:	e764      	b.n	8003ef8 <_svfprintf_r+0x1434>
 800402e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004030:	2267      	movs	r2, #103	; 0x67
 8004032:	3301      	adds	r3, #1
 8004034:	930c      	str	r3, [sp, #48]	; 0x30
 8004036:	920f      	str	r2, [sp, #60]	; 0x3c
 8004038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800403c:	e669      	b.n	8003d12 <_svfprintf_r+0x124e>
 800403e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004040:	f10b 0501 	add.w	r5, fp, #1
 8004044:	442b      	add	r3, r5
 8004046:	930c      	str	r3, [sp, #48]	; 0x30
 8004048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800404c:	e661      	b.n	8003d12 <_svfprintf_r+0x124e>
 800404e:	4640      	mov	r0, r8
 8004050:	4639      	mov	r1, r7
 8004052:	2200      	movs	r2, #0
 8004054:	2300      	movs	r3, #0
 8004056:	f002 f935 	bl	80062c4 <__aeabi_dcmpeq>
 800405a:	2800      	cmp	r0, #0
 800405c:	d194      	bne.n	8003f88 <_svfprintf_r+0x14c4>
 800405e:	f1c5 0501 	rsb	r5, r5, #1
 8004062:	951b      	str	r5, [sp, #108]	; 0x6c
 8004064:	442c      	add	r4, r5
 8004066:	e623      	b.n	8003cb0 <_svfprintf_r+0x11ec>
 8004068:	980d      	ldr	r0, [sp, #52]	; 0x34
 800406a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800406e:	6805      	ldr	r5, [r0, #0]
 8004070:	3004      	adds	r0, #4
 8004072:	2d00      	cmp	r5, #0
 8004074:	900d      	str	r0, [sp, #52]	; 0x34
 8004076:	46a2      	mov	sl, r4
 8004078:	f6be ad7a 	bge.w	8002b70 <_svfprintf_r+0xac>
 800407c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004080:	f7fe bd76 	b.w	8002b70 <_svfprintf_r+0xac>
 8004084:	9b06      	ldr	r3, [sp, #24]
 8004086:	07db      	lsls	r3, r3, #31
 8004088:	465f      	mov	r7, fp
 800408a:	d505      	bpl.n	8004098 <_svfprintf_r+0x15d4>
 800408c:	ae3e      	add	r6, sp, #248	; 0xf8
 800408e:	2330      	movs	r3, #48	; 0x30
 8004090:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8004094:	f7fe becf 	b.w	8002e36 <_svfprintf_r+0x372>
 8004098:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800409c:	ae2e      	add	r6, sp, #184	; 0xb8
 800409e:	f7fe becd 	b.w	8002e3c <_svfprintf_r+0x378>
 80040a2:	f1bb 0f00 	cmp.w	fp, #0
 80040a6:	d10f      	bne.n	80040c8 <_svfprintf_r+0x1604>
 80040a8:	9b06      	ldr	r3, [sp, #24]
 80040aa:	07d8      	lsls	r0, r3, #31
 80040ac:	d40c      	bmi.n	80040c8 <_svfprintf_r+0x1604>
 80040ae:	2301      	movs	r3, #1
 80040b0:	930c      	str	r3, [sp, #48]	; 0x30
 80040b2:	e62e      	b.n	8003d12 <_svfprintf_r+0x124e>
 80040b4:	9b06      	ldr	r3, [sp, #24]
 80040b6:	f013 0301 	ands.w	r3, r3, #1
 80040ba:	f47f af26 	bne.w	8003f0a <_svfprintf_r+0x1446>
 80040be:	9310      	str	r3, [sp, #64]	; 0x40
 80040c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040c6:	e624      	b.n	8003d12 <_svfprintf_r+0x124e>
 80040c8:	f10b 0302 	add.w	r3, fp, #2
 80040cc:	930c      	str	r3, [sp, #48]	; 0x30
 80040ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040d2:	e61e      	b.n	8003d12 <_svfprintf_r+0x124e>
 80040d4:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80040d8:	e70e      	b.n	8003ef8 <_svfprintf_r+0x1434>
 80040da:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 80040de:	f7fe bdf8 	b.w	8002cd2 <_svfprintf_r+0x20e>
 80040e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040e4:	230c      	movs	r3, #12
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ec:	f7fe bde9 	b.w	8002cc2 <_svfprintf_r+0x1fe>
 80040f0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 80040f4:	f7ff b95f 	b.w	80033b6 <_svfprintf_r+0x8f2>
 80040f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040fa:	e6e6      	b.n	8003eca <_svfprintf_r+0x1406>
 80040fc:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8004100:	f7ff b805 	b.w	800310e <_svfprintf_r+0x64a>
 8004104:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8004108:	f7ff b8ef 	b.w	80032ea <_svfprintf_r+0x826>
 800410c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8004110:	f7ff b855 	b.w	80031be <_svfprintf_r+0x6fa>
 8004114:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8004118:	f7ff b823 	b.w	8003162 <_svfprintf_r+0x69e>
 800411c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8004120:	f7ff b900 	b.w	8003324 <_svfprintf_r+0x860>
 8004124:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8004128:	f7fe bfb4 	b.w	8003094 <_svfprintf_r+0x5d0>
 800412c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8004130:	f7fe be41 	b.w	8002db6 <_svfprintf_r+0x2f2>
 8004134:	08006944 	.word	0x08006944
 8004138:	66666667 	.word	0x66666667

0800413c <__swsetup_r>:
__swsetup_r():
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <__swsetup_r+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4605      	mov	r5, r0
 8004144:	460c      	mov	r4, r1
 8004146:	b113      	cbz	r3, 800414e <__swsetup_r+0x12>
 8004148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414a:	2a00      	cmp	r2, #0
 800414c:	d036      	beq.n	80041bc <__swsetup_r+0x80>
 800414e:	89a2      	ldrh	r2, [r4, #12]
 8004150:	b293      	uxth	r3, r2
 8004152:	0718      	lsls	r0, r3, #28
 8004154:	d50c      	bpl.n	8004170 <__swsetup_r+0x34>
 8004156:	6920      	ldr	r0, [r4, #16]
 8004158:	b1a8      	cbz	r0, 8004186 <__swsetup_r+0x4a>
 800415a:	f013 0201 	ands.w	r2, r3, #1
 800415e:	d01e      	beq.n	800419e <__swsetup_r+0x62>
 8004160:	6963      	ldr	r3, [r4, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	425b      	negs	r3, r3
 8004166:	61a3      	str	r3, [r4, #24]
 8004168:	60a2      	str	r2, [r4, #8]
 800416a:	b1f0      	cbz	r0, 80041aa <__swsetup_r+0x6e>
 800416c:	2000      	movs	r0, #0
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	06d9      	lsls	r1, r3, #27
 8004172:	d53b      	bpl.n	80041ec <__swsetup_r+0xb0>
 8004174:	0758      	lsls	r0, r3, #29
 8004176:	d425      	bmi.n	80041c4 <__swsetup_r+0x88>
 8004178:	6920      	ldr	r0, [r4, #16]
 800417a:	f042 0308 	orr.w	r3, r2, #8
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	b29b      	uxth	r3, r3
 8004182:	2800      	cmp	r0, #0
 8004184:	d1e9      	bne.n	800415a <__swsetup_r+0x1e>
 8004186:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800418a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800418e:	d0e4      	beq.n	800415a <__swsetup_r+0x1e>
 8004190:	4628      	mov	r0, r5
 8004192:	4621      	mov	r1, r4
 8004194:	f000 fff8 	bl	8005188 <__smakebuf_r>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	6920      	ldr	r0, [r4, #16]
 800419c:	e7dd      	b.n	800415a <__swsetup_r+0x1e>
 800419e:	0799      	lsls	r1, r3, #30
 80041a0:	bf58      	it	pl
 80041a2:	6962      	ldrpl	r2, [r4, #20]
 80041a4:	60a2      	str	r2, [r4, #8]
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d1e0      	bne.n	800416c <__swsetup_r+0x30>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	061a      	lsls	r2, r3, #24
 80041ae:	d5de      	bpl.n	800416e <__swsetup_r+0x32>
 80041b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b4:	81a3      	strh	r3, [r4, #12]
 80041b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc ff43 	bl	8001048 <__sinit>
 80041c2:	e7c4      	b.n	800414e <__swsetup_r+0x12>
 80041c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80041c6:	b149      	cbz	r1, 80041dc <__swsetup_r+0xa0>
 80041c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d003      	beq.n	80041d8 <__swsetup_r+0x9c>
 80041d0:	4628      	mov	r0, r5
 80041d2:	f7fd ff3f 	bl	8002054 <_free_r>
 80041d6:	89a2      	ldrh	r2, [r4, #12]
 80041d8:	2300      	movs	r3, #0
 80041da:	6323      	str	r3, [r4, #48]	; 0x30
 80041dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80041e0:	2300      	movs	r3, #0
 80041e2:	6920      	ldr	r0, [r4, #16]
 80041e4:	6063      	str	r3, [r4, #4]
 80041e6:	b292      	uxth	r2, r2
 80041e8:	6020      	str	r0, [r4, #0]
 80041ea:	e7c6      	b.n	800417a <__swsetup_r+0x3e>
 80041ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f0:	2309      	movs	r3, #9
 80041f2:	602b      	str	r3, [r5, #0]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f8:	81a2      	strh	r2, [r4, #12]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	20000448 	.word	0x20000448

08004200 <quorem>:
quorem():
 8004200:	6902      	ldr	r2, [r0, #16]
 8004202:	690b      	ldr	r3, [r1, #16]
 8004204:	4293      	cmp	r3, r2
 8004206:	f300 808d 	bgt.w	8004324 <quorem+0x124>
 800420a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004212:	f101 0714 	add.w	r7, r1, #20
 8004216:	f100 0b14 	add.w	fp, r0, #20
 800421a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800421e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8004222:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8004226:	b083      	sub	sp, #12
 8004228:	3201      	adds	r2, #1
 800422a:	fbb3 f9f2 	udiv	r9, r3, r2
 800422e:	eb0b 0304 	add.w	r3, fp, r4
 8004232:	9400      	str	r4, [sp, #0]
 8004234:	eb07 0a04 	add.w	sl, r7, r4
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	f1b9 0f00 	cmp.w	r9, #0
 800423e:	d039      	beq.n	80042b4 <quorem+0xb4>
 8004240:	2500      	movs	r5, #0
 8004242:	46bc      	mov	ip, r7
 8004244:	46de      	mov	lr, fp
 8004246:	462b      	mov	r3, r5
 8004248:	f85c 6b04 	ldr.w	r6, [ip], #4
 800424c:	f8de 2000 	ldr.w	r2, [lr]
 8004250:	b2b4      	uxth	r4, r6
 8004252:	fb09 5504 	mla	r5, r9, r4, r5
 8004256:	0c36      	lsrs	r6, r6, #16
 8004258:	0c2c      	lsrs	r4, r5, #16
 800425a:	fb09 4406 	mla	r4, r9, r6, r4
 800425e:	b2ad      	uxth	r5, r5
 8004260:	1b5b      	subs	r3, r3, r5
 8004262:	b2a6      	uxth	r6, r4
 8004264:	fa13 f382 	uxtah	r3, r3, r2
 8004268:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800426c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8004270:	b29b      	uxth	r3, r3
 8004272:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004276:	45e2      	cmp	sl, ip
 8004278:	f84e 3b04 	str.w	r3, [lr], #4
 800427c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8004280:	ea4f 4326 	mov.w	r3, r6, asr #16
 8004284:	d2e0      	bcs.n	8004248 <quorem+0x48>
 8004286:	9b00      	ldr	r3, [sp, #0]
 8004288:	f85b 3003 	ldr.w	r3, [fp, r3]
 800428c:	b993      	cbnz	r3, 80042b4 <quorem+0xb4>
 800428e:	9c01      	ldr	r4, [sp, #4]
 8004290:	1f23      	subs	r3, r4, #4
 8004292:	459b      	cmp	fp, r3
 8004294:	d20c      	bcs.n	80042b0 <quorem+0xb0>
 8004296:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800429a:	b94b      	cbnz	r3, 80042b0 <quorem+0xb0>
 800429c:	f1a4 0308 	sub.w	r3, r4, #8
 80042a0:	e002      	b.n	80042a8 <quorem+0xa8>
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	3b04      	subs	r3, #4
 80042a6:	b91a      	cbnz	r2, 80042b0 <quorem+0xb0>
 80042a8:	459b      	cmp	fp, r3
 80042aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80042ae:	d3f8      	bcc.n	80042a2 <quorem+0xa2>
 80042b0:	f8c0 8010 	str.w	r8, [r0, #16]
 80042b4:	4604      	mov	r4, r0
 80042b6:	f001 f9df 	bl	8005678 <__mcmp>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	db2e      	blt.n	800431c <quorem+0x11c>
 80042be:	f109 0901 	add.w	r9, r9, #1
 80042c2:	465d      	mov	r5, fp
 80042c4:	2300      	movs	r3, #0
 80042c6:	f857 1b04 	ldr.w	r1, [r7], #4
 80042ca:	6828      	ldr	r0, [r5, #0]
 80042cc:	b28a      	uxth	r2, r1
 80042ce:	1a9a      	subs	r2, r3, r2
 80042d0:	0c09      	lsrs	r1, r1, #16
 80042d2:	fa12 f280 	uxtah	r2, r2, r0
 80042d6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80042da:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80042de:	b291      	uxth	r1, r2
 80042e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80042e4:	45ba      	cmp	sl, r7
 80042e6:	f845 1b04 	str.w	r1, [r5], #4
 80042ea:	ea4f 4323 	mov.w	r3, r3, asr #16
 80042ee:	d2ea      	bcs.n	80042c6 <quorem+0xc6>
 80042f0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80042f4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80042f8:	b982      	cbnz	r2, 800431c <quorem+0x11c>
 80042fa:	1f1a      	subs	r2, r3, #4
 80042fc:	4593      	cmp	fp, r2
 80042fe:	d20b      	bcs.n	8004318 <quorem+0x118>
 8004300:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8004304:	b942      	cbnz	r2, 8004318 <quorem+0x118>
 8004306:	3b08      	subs	r3, #8
 8004308:	e002      	b.n	8004310 <quorem+0x110>
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	3b04      	subs	r3, #4
 800430e:	b91a      	cbnz	r2, 8004318 <quorem+0x118>
 8004310:	459b      	cmp	fp, r3
 8004312:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004316:	d3f8      	bcc.n	800430a <quorem+0x10a>
 8004318:	f8c4 8010 	str.w	r8, [r4, #16]
 800431c:	4648      	mov	r0, r9
 800431e:	b003      	add	sp, #12
 8004320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004324:	2000      	movs	r0, #0
 8004326:	4770      	bx	lr

08004328 <_dtoa_r>:
_dtoa_r():
 8004328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800432e:	b097      	sub	sp, #92	; 0x5c
 8004330:	4681      	mov	r9, r0
 8004332:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8004334:	4692      	mov	sl, r2
 8004336:	469b      	mov	fp, r3
 8004338:	b149      	cbz	r1, 800434e <_dtoa_r+0x26>
 800433a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800433c:	604a      	str	r2, [r1, #4]
 800433e:	2301      	movs	r3, #1
 8004340:	4093      	lsls	r3, r2
 8004342:	608b      	str	r3, [r1, #8]
 8004344:	f000 ffb6 	bl	80052b4 <_Bfree>
 8004348:	2300      	movs	r3, #0
 800434a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800434e:	f1bb 0f00 	cmp.w	fp, #0
 8004352:	46d8      	mov	r8, fp
 8004354:	db33      	blt.n	80043be <_dtoa_r+0x96>
 8004356:	2300      	movs	r3, #0
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	4ba5      	ldr	r3, [pc, #660]	; (80045f0 <_dtoa_r+0x2c8>)
 800435c:	461a      	mov	r2, r3
 800435e:	ea08 0303 	and.w	r3, r8, r3
 8004362:	4293      	cmp	r3, r2
 8004364:	d014      	beq.n	8004390 <_dtoa_r+0x68>
 8004366:	4650      	mov	r0, sl
 8004368:	4659      	mov	r1, fp
 800436a:	2200      	movs	r2, #0
 800436c:	2300      	movs	r3, #0
 800436e:	f001 ffa9 	bl	80062c4 <__aeabi_dcmpeq>
 8004372:	4605      	mov	r5, r0
 8004374:	b348      	cbz	r0, 80043ca <_dtoa_r+0xa2>
 8004376:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004378:	2301      	movs	r3, #1
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80c5 	beq.w	800450e <_dtoa_r+0x1e6>
 8004384:	489b      	ldr	r0, [pc, #620]	; (80045f4 <_dtoa_r+0x2cc>)
 8004386:	6018      	str	r0, [r3, #0]
 8004388:	3801      	subs	r0, #1
 800438a:	b017      	add	sp, #92	; 0x5c
 800438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004390:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004392:	f242 730f 	movw	r3, #9999	; 0x270f
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	f1ba 0f00 	cmp.w	sl, #0
 800439c:	f000 80a2 	beq.w	80044e4 <_dtoa_r+0x1bc>
 80043a0:	4895      	ldr	r0, [pc, #596]	; (80045f8 <_dtoa_r+0x2d0>)
 80043a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <_dtoa_r+0x62>
 80043a8:	78c3      	ldrb	r3, [r0, #3]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80b1 	beq.w	8004512 <_dtoa_r+0x1ea>
 80043b0:	f100 0308 	add.w	r3, r0, #8
 80043b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	b017      	add	sp, #92	; 0x5c
 80043ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043be:	2301      	movs	r3, #1
 80043c0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	46c3      	mov	fp, r8
 80043c8:	e7c7      	b.n	800435a <_dtoa_r+0x32>
 80043ca:	aa14      	add	r2, sp, #80	; 0x50
 80043cc:	ab15      	add	r3, sp, #84	; 0x54
 80043ce:	9201      	str	r2, [sp, #4]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	4652      	mov	r2, sl
 80043d4:	465b      	mov	r3, fp
 80043d6:	4648      	mov	r0, r9
 80043d8:	f001 f9f8 	bl	80057cc <__d2b>
 80043dc:	ea5f 5418 	movs.w	r4, r8, lsr #20
 80043e0:	9008      	str	r0, [sp, #32]
 80043e2:	f040 8088 	bne.w	80044f6 <_dtoa_r+0x1ce>
 80043e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80043e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80043ea:	442c      	add	r4, r5
 80043ec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	f340 8291 	ble.w	8004918 <_dtoa_r+0x5f0>
 80043f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80043fa:	f204 4012 	addw	r0, r4, #1042	; 0x412
 80043fe:	fa08 f803 	lsl.w	r8, r8, r3
 8004402:	fa2a f000 	lsr.w	r0, sl, r0
 8004406:	ea40 0008 	orr.w	r0, r0, r8
 800440a:	f001 fc7d 	bl	8005d08 <__aeabi_ui2d>
 800440e:	2301      	movs	r3, #1
 8004410:	3c01      	subs	r4, #1
 8004412:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004416:	9310      	str	r3, [sp, #64]	; 0x40
 8004418:	2200      	movs	r2, #0
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <_dtoa_r+0x2d4>)
 800441c:	f001 fb36 	bl	8005a8c <__aeabi_dsub>
 8004420:	a36d      	add	r3, pc, #436	; (adr r3, 80045d8 <_dtoa_r+0x2b0>)
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f001 fce5 	bl	8005df4 <__aeabi_dmul>
 800442a:	a36d      	add	r3, pc, #436	; (adr r3, 80045e0 <_dtoa_r+0x2b8>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f001 fb2e 	bl	8005a90 <__adddf3>
 8004434:	4606      	mov	r6, r0
 8004436:	4620      	mov	r0, r4
 8004438:	460f      	mov	r7, r1
 800443a:	f001 fc75 	bl	8005d28 <__aeabi_i2d>
 800443e:	a36a      	add	r3, pc, #424	; (adr r3, 80045e8 <_dtoa_r+0x2c0>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f001 fcd6 	bl	8005df4 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4630      	mov	r0, r6
 800444e:	4639      	mov	r1, r7
 8004450:	f001 fb1e 	bl	8005a90 <__adddf3>
 8004454:	4606      	mov	r6, r0
 8004456:	460f      	mov	r7, r1
 8004458:	f001 ff66 	bl	8006328 <__aeabi_d2iz>
 800445c:	2200      	movs	r2, #0
 800445e:	9004      	str	r0, [sp, #16]
 8004460:	2300      	movs	r3, #0
 8004462:	4630      	mov	r0, r6
 8004464:	4639      	mov	r1, r7
 8004466:	f001 ff37 	bl	80062d8 <__aeabi_dcmplt>
 800446a:	2800      	cmp	r0, #0
 800446c:	f040 8230 	bne.w	80048d0 <_dtoa_r+0x5a8>
 8004470:	9e04      	ldr	r6, [sp, #16]
 8004472:	2e16      	cmp	r6, #22
 8004474:	f200 8229 	bhi.w	80048ca <_dtoa_r+0x5a2>
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <_dtoa_r+0x2d8>)
 800447a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800447e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004482:	4652      	mov	r2, sl
 8004484:	465b      	mov	r3, fp
 8004486:	f001 ff45 	bl	8006314 <__aeabi_dcmpgt>
 800448a:	2800      	cmp	r0, #0
 800448c:	f000 8249 	beq.w	8004922 <_dtoa_r+0x5fa>
 8004490:	1e73      	subs	r3, r6, #1
 8004492:	9304      	str	r3, [sp, #16]
 8004494:	2300      	movs	r3, #0
 8004496:	930c      	str	r3, [sp, #48]	; 0x30
 8004498:	1b2c      	subs	r4, r5, r4
 800449a:	1e63      	subs	r3, r4, #1
 800449c:	9302      	str	r3, [sp, #8]
 800449e:	f100 8232 	bmi.w	8004906 <_dtoa_r+0x5de>
 80044a2:	2300      	movs	r3, #0
 80044a4:	9305      	str	r3, [sp, #20]
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f2c0 8223 	blt.w	80048f4 <_dtoa_r+0x5cc>
 80044ae:	9a02      	ldr	r2, [sp, #8]
 80044b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044b2:	4611      	mov	r1, r2
 80044b4:	4419      	add	r1, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	9102      	str	r1, [sp, #8]
 80044ba:	930a      	str	r3, [sp, #40]	; 0x28
 80044bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044be:	2b09      	cmp	r3, #9
 80044c0:	d829      	bhi.n	8004516 <_dtoa_r+0x1ee>
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	f340 8658 	ble.w	8005178 <_dtoa_r+0xe50>
 80044c8:	3b04      	subs	r3, #4
 80044ca:	9320      	str	r3, [sp, #128]	; 0x80
 80044cc:	2500      	movs	r5, #0
 80044ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044d0:	3b02      	subs	r3, #2
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	f200 8635 	bhi.w	8005142 <_dtoa_r+0xe1a>
 80044d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044dc:	0228032c 	.word	0x0228032c
 80044e0:	04590337 	.word	0x04590337
 80044e4:	4b44      	ldr	r3, [pc, #272]	; (80045f8 <_dtoa_r+0x2d0>)
 80044e6:	4a47      	ldr	r2, [pc, #284]	; (8004604 <_dtoa_r+0x2dc>)
 80044e8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80044ec:	2800      	cmp	r0, #0
 80044ee:	bf14      	ite	ne
 80044f0:	4618      	movne	r0, r3
 80044f2:	4610      	moveq	r0, r2
 80044f4:	e755      	b.n	80043a2 <_dtoa_r+0x7a>
 80044f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044fa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80044fe:	9510      	str	r5, [sp, #64]	; 0x40
 8004500:	4650      	mov	r0, sl
 8004502:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004506:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800450a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800450c:	e784      	b.n	8004418 <_dtoa_r+0xf0>
 800450e:	483e      	ldr	r0, [pc, #248]	; (8004608 <_dtoa_r+0x2e0>)
 8004510:	e73b      	b.n	800438a <_dtoa_r+0x62>
 8004512:	1cc3      	adds	r3, r0, #3
 8004514:	e74e      	b.n	80043b4 <_dtoa_r+0x8c>
 8004516:	2100      	movs	r1, #0
 8004518:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800451c:	4648      	mov	r0, r9
 800451e:	9120      	str	r1, [sp, #128]	; 0x80
 8004520:	f000 fea2 	bl	8005268 <_Balloc>
 8004524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004528:	9306      	str	r3, [sp, #24]
 800452a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800452c:	930d      	str	r3, [sp, #52]	; 0x34
 800452e:	2301      	movs	r3, #1
 8004530:	9007      	str	r0, [sp, #28]
 8004532:	9221      	str	r2, [sp, #132]	; 0x84
 8004534:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8004538:	9309      	str	r3, [sp, #36]	; 0x24
 800453a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800453c:	2b00      	cmp	r3, #0
 800453e:	f2c0 80d1 	blt.w	80046e4 <_dtoa_r+0x3bc>
 8004542:	9a04      	ldr	r2, [sp, #16]
 8004544:	2a0e      	cmp	r2, #14
 8004546:	f300 80cd 	bgt.w	80046e4 <_dtoa_r+0x3bc>
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <_dtoa_r+0x2d8>)
 800454c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004550:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004554:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800455a:	2b00      	cmp	r3, #0
 800455c:	f2c0 8300 	blt.w	8004b60 <_dtoa_r+0x838>
 8004560:	4656      	mov	r6, sl
 8004562:	465f      	mov	r7, fp
 8004564:	4650      	mov	r0, sl
 8004566:	4659      	mov	r1, fp
 8004568:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800456c:	4652      	mov	r2, sl
 800456e:	465b      	mov	r3, fp
 8004570:	f001 fd6a 	bl	8006048 <__aeabi_ddiv>
 8004574:	f001 fed8 	bl	8006328 <__aeabi_d2iz>
 8004578:	4604      	mov	r4, r0
 800457a:	f001 fbd5 	bl	8005d28 <__aeabi_i2d>
 800457e:	4652      	mov	r2, sl
 8004580:	465b      	mov	r3, fp
 8004582:	f001 fc37 	bl	8005df4 <__aeabi_dmul>
 8004586:	460b      	mov	r3, r1
 8004588:	4602      	mov	r2, r0
 800458a:	4639      	mov	r1, r7
 800458c:	4630      	mov	r0, r6
 800458e:	f001 fa7d 	bl	8005a8c <__aeabi_dsub>
 8004592:	9d07      	ldr	r5, [sp, #28]
 8004594:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8004598:	702b      	strb	r3, [r5, #0]
 800459a:	9b06      	ldr	r3, [sp, #24]
 800459c:	2b01      	cmp	r3, #1
 800459e:	4606      	mov	r6, r0
 80045a0:	460f      	mov	r7, r1
 80045a2:	f105 0501 	add.w	r5, r5, #1
 80045a6:	d062      	beq.n	800466e <_dtoa_r+0x346>
 80045a8:	2200      	movs	r2, #0
 80045aa:	4b18      	ldr	r3, [pc, #96]	; (800460c <_dtoa_r+0x2e4>)
 80045ac:	f001 fc22 	bl	8005df4 <__aeabi_dmul>
 80045b0:	2200      	movs	r2, #0
 80045b2:	2300      	movs	r3, #0
 80045b4:	4606      	mov	r6, r0
 80045b6:	460f      	mov	r7, r1
 80045b8:	f001 fe84 	bl	80062c4 <__aeabi_dcmpeq>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d17e      	bne.n	80046be <_dtoa_r+0x396>
 80045c0:	f8cd 9014 	str.w	r9, [sp, #20]
 80045c4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80045c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80045cc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80045d0:	e029      	b.n	8004626 <_dtoa_r+0x2fe>
 80045d2:	bf00      	nop
 80045d4:	f3af 8000 	nop.w
 80045d8:	636f4361 	.word	0x636f4361
 80045dc:	3fd287a7 	.word	0x3fd287a7
 80045e0:	8b60c8b3 	.word	0x8b60c8b3
 80045e4:	3fc68a28 	.word	0x3fc68a28
 80045e8:	509f79fb 	.word	0x509f79fb
 80045ec:	3fd34413 	.word	0x3fd34413
 80045f0:	7ff00000 	.word	0x7ff00000
 80045f4:	0800694d 	.word	0x0800694d
 80045f8:	0800696c 	.word	0x0800696c
 80045fc:	3ff80000 	.word	0x3ff80000
 8004600:	08006988 	.word	0x08006988
 8004604:	08006960 	.word	0x08006960
 8004608:	0800694c 	.word	0x0800694c
 800460c:	40240000 	.word	0x40240000
 8004610:	f001 fbf0 	bl	8005df4 <__aeabi_dmul>
 8004614:	2200      	movs	r2, #0
 8004616:	2300      	movs	r3, #0
 8004618:	4606      	mov	r6, r0
 800461a:	460f      	mov	r7, r1
 800461c:	f001 fe52 	bl	80062c4 <__aeabi_dcmpeq>
 8004620:	2800      	cmp	r0, #0
 8004622:	f040 83b7 	bne.w	8004d94 <_dtoa_r+0xa6c>
 8004626:	4642      	mov	r2, r8
 8004628:	464b      	mov	r3, r9
 800462a:	4630      	mov	r0, r6
 800462c:	4639      	mov	r1, r7
 800462e:	f001 fd0b 	bl	8006048 <__aeabi_ddiv>
 8004632:	f001 fe79 	bl	8006328 <__aeabi_d2iz>
 8004636:	4604      	mov	r4, r0
 8004638:	f001 fb76 	bl	8005d28 <__aeabi_i2d>
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	f001 fbd8 	bl	8005df4 <__aeabi_dmul>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4630      	mov	r0, r6
 800464a:	4639      	mov	r1, r7
 800464c:	f001 fa1e 	bl	8005a8c <__aeabi_dsub>
 8004650:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8004654:	f805 eb01 	strb.w	lr, [r5], #1
 8004658:	ebcb 0e05 	rsb	lr, fp, r5
 800465c:	45d6      	cmp	lr, sl
 800465e:	4606      	mov	r6, r0
 8004660:	460f      	mov	r7, r1
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	4bb0      	ldr	r3, [pc, #704]	; (8004928 <_dtoa_r+0x600>)
 8004668:	d1d2      	bne.n	8004610 <_dtoa_r+0x2e8>
 800466a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800466e:	4632      	mov	r2, r6
 8004670:	463b      	mov	r3, r7
 8004672:	4630      	mov	r0, r6
 8004674:	4639      	mov	r1, r7
 8004676:	f001 fa0b 	bl	8005a90 <__adddf3>
 800467a:	4606      	mov	r6, r0
 800467c:	460f      	mov	r7, r1
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004686:	f001 fe27 	bl	80062d8 <__aeabi_dcmplt>
 800468a:	b940      	cbnz	r0, 800469e <_dtoa_r+0x376>
 800468c:	4632      	mov	r2, r6
 800468e:	463b      	mov	r3, r7
 8004690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004694:	f001 fe16 	bl	80062c4 <__aeabi_dcmpeq>
 8004698:	b188      	cbz	r0, 80046be <_dtoa_r+0x396>
 800469a:	07e3      	lsls	r3, r4, #31
 800469c:	d50f      	bpl.n	80046be <_dtoa_r+0x396>
 800469e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80046a2:	9a07      	ldr	r2, [sp, #28]
 80046a4:	1e6b      	subs	r3, r5, #1
 80046a6:	e004      	b.n	80046b2 <_dtoa_r+0x38a>
 80046a8:	429a      	cmp	r2, r3
 80046aa:	f000 842c 	beq.w	8004f06 <_dtoa_r+0xbde>
 80046ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046b2:	2c39      	cmp	r4, #57	; 0x39
 80046b4:	f103 0501 	add.w	r5, r3, #1
 80046b8:	d0f6      	beq.n	80046a8 <_dtoa_r+0x380>
 80046ba:	3401      	adds	r4, #1
 80046bc:	701c      	strb	r4, [r3, #0]
 80046be:	9908      	ldr	r1, [sp, #32]
 80046c0:	4648      	mov	r0, r9
 80046c2:	f000 fdf7 	bl	80052b4 <_Bfree>
 80046c6:	2200      	movs	r2, #0
 80046c8:	9b04      	ldr	r3, [sp, #16]
 80046ca:	702a      	strb	r2, [r5, #0]
 80046cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80046ce:	3301      	adds	r3, #1
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 83a7 	beq.w	8004e28 <_dtoa_r+0xb00>
 80046da:	9807      	ldr	r0, [sp, #28]
 80046dc:	601d      	str	r5, [r3, #0]
 80046de:	b017      	add	sp, #92	; 0x5c
 80046e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	f000 8112 	beq.w	8004910 <_dtoa_r+0x5e8>
 80046ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046ee:	2a01      	cmp	r2, #1
 80046f0:	f340 8258 	ble.w	8004ba4 <_dtoa_r+0x87c>
 80046f4:	9b06      	ldr	r3, [sp, #24]
 80046f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046f8:	1e5f      	subs	r7, r3, #1
 80046fa:	42ba      	cmp	r2, r7
 80046fc:	f2c0 8397 	blt.w	8004e2e <_dtoa_r+0xb06>
 8004700:	1bd7      	subs	r7, r2, r7
 8004702:	9b06      	ldr	r3, [sp, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f2c0 848a 	blt.w	800501e <_dtoa_r+0xcf6>
 800470a:	9d05      	ldr	r5, [sp, #20]
 800470c:	9b06      	ldr	r3, [sp, #24]
 800470e:	9a05      	ldr	r2, [sp, #20]
 8004710:	441a      	add	r2, r3
 8004712:	9205      	str	r2, [sp, #20]
 8004714:	9a02      	ldr	r2, [sp, #8]
 8004716:	2101      	movs	r1, #1
 8004718:	441a      	add	r2, r3
 800471a:	4648      	mov	r0, r9
 800471c:	9202      	str	r2, [sp, #8]
 800471e:	f000 fe61 	bl	80053e4 <__i2b>
 8004722:	4606      	mov	r6, r0
 8004724:	b165      	cbz	r5, 8004740 <_dtoa_r+0x418>
 8004726:	9902      	ldr	r1, [sp, #8]
 8004728:	2900      	cmp	r1, #0
 800472a:	460b      	mov	r3, r1
 800472c:	dd08      	ble.n	8004740 <_dtoa_r+0x418>
 800472e:	42a9      	cmp	r1, r5
 8004730:	9a05      	ldr	r2, [sp, #20]
 8004732:	bfa8      	it	ge
 8004734:	462b      	movge	r3, r5
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	1aed      	subs	r5, r5, r3
 800473a:	1acb      	subs	r3, r1, r3
 800473c:	9205      	str	r2, [sp, #20]
 800473e:	9302      	str	r3, [sp, #8]
 8004740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004742:	2b00      	cmp	r3, #0
 8004744:	f340 82fc 	ble.w	8004d40 <_dtoa_r+0xa18>
 8004748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800474a:	2a00      	cmp	r2, #0
 800474c:	f000 8201 	beq.w	8004b52 <_dtoa_r+0x82a>
 8004750:	2f00      	cmp	r7, #0
 8004752:	f000 81fe 	beq.w	8004b52 <_dtoa_r+0x82a>
 8004756:	4631      	mov	r1, r6
 8004758:	463a      	mov	r2, r7
 800475a:	4648      	mov	r0, r9
 800475c:	f000 fee4 	bl	8005528 <__pow5mult>
 8004760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004764:	4601      	mov	r1, r0
 8004766:	4642      	mov	r2, r8
 8004768:	4606      	mov	r6, r0
 800476a:	4648      	mov	r0, r9
 800476c:	f000 fe44 	bl	80053f8 <__multiply>
 8004770:	4641      	mov	r1, r8
 8004772:	4604      	mov	r4, r0
 8004774:	4648      	mov	r0, r9
 8004776:	f000 fd9d 	bl	80052b4 <_Bfree>
 800477a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800477c:	1bdb      	subs	r3, r3, r7
 800477e:	930a      	str	r3, [sp, #40]	; 0x28
 8004780:	f040 81e6 	bne.w	8004b50 <_dtoa_r+0x828>
 8004784:	2101      	movs	r1, #1
 8004786:	4648      	mov	r0, r9
 8004788:	f000 fe2c 	bl	80053e4 <__i2b>
 800478c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800478e:	4680      	mov	r8, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8219 	beq.w	8004bc8 <_dtoa_r+0x8a0>
 8004796:	4601      	mov	r1, r0
 8004798:	461a      	mov	r2, r3
 800479a:	4648      	mov	r0, r9
 800479c:	f000 fec4 	bl	8005528 <__pow5mult>
 80047a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	4680      	mov	r8, r0
 80047a6:	f340 82f8 	ble.w	8004d9a <_dtoa_r+0xa72>
 80047aa:	2700      	movs	r7, #0
 80047ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80047b0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80047b4:	6918      	ldr	r0, [r3, #16]
 80047b6:	f000 fdc7 	bl	8005348 <__hi0bits>
 80047ba:	f1c0 0020 	rsb	r0, r0, #32
 80047be:	9a02      	ldr	r2, [sp, #8]
 80047c0:	4410      	add	r0, r2
 80047c2:	f010 001f 	ands.w	r0, r0, #31
 80047c6:	f000 81f6 	beq.w	8004bb6 <_dtoa_r+0x88e>
 80047ca:	f1c0 0320 	rsb	r3, r0, #32
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	f340 84ca 	ble.w	8005168 <_dtoa_r+0xe40>
 80047d4:	9b05      	ldr	r3, [sp, #20]
 80047d6:	f1c0 001c 	rsb	r0, r0, #28
 80047da:	4403      	add	r3, r0
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	4613      	mov	r3, r2
 80047e0:	4403      	add	r3, r0
 80047e2:	4405      	add	r5, r0
 80047e4:	9302      	str	r3, [sp, #8]
 80047e6:	9b05      	ldr	r3, [sp, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dd05      	ble.n	80047f8 <_dtoa_r+0x4d0>
 80047ec:	4621      	mov	r1, r4
 80047ee:	461a      	mov	r2, r3
 80047f0:	4648      	mov	r0, r9
 80047f2:	f000 fee9 	bl	80055c8 <__lshift>
 80047f6:	4604      	mov	r4, r0
 80047f8:	9b02      	ldr	r3, [sp, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	dd05      	ble.n	800480a <_dtoa_r+0x4e2>
 80047fe:	4641      	mov	r1, r8
 8004800:	461a      	mov	r2, r3
 8004802:	4648      	mov	r0, r9
 8004804:	f000 fee0 	bl	80055c8 <__lshift>
 8004808:	4680      	mov	r8, r0
 800480a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	f040 827c 	bne.w	8004d0a <_dtoa_r+0x9e2>
 8004812:	9b06      	ldr	r3, [sp, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f340 8295 	ble.w	8004d44 <_dtoa_r+0xa1c>
 800481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 81f5 	bne.w	8004c0c <_dtoa_r+0x8e4>
 8004822:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8004826:	9f06      	ldr	r7, [sp, #24]
 8004828:	465d      	mov	r5, fp
 800482a:	e002      	b.n	8004832 <_dtoa_r+0x50a>
 800482c:	f000 fd4c 	bl	80052c8 <__multadd>
 8004830:	4604      	mov	r4, r0
 8004832:	4641      	mov	r1, r8
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff fce3 	bl	8004200 <quorem>
 800483a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800483e:	f805 ab01 	strb.w	sl, [r5], #1
 8004842:	ebcb 0305 	rsb	r3, fp, r5
 8004846:	42bb      	cmp	r3, r7
 8004848:	f04f 020a 	mov.w	r2, #10
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	4621      	mov	r1, r4
 8004852:	4648      	mov	r0, r9
 8004854:	dbea      	blt.n	800482c <_dtoa_r+0x504>
 8004856:	9b07      	ldr	r3, [sp, #28]
 8004858:	9a06      	ldr	r2, [sp, #24]
 800485a:	2a01      	cmp	r2, #1
 800485c:	bfac      	ite	ge
 800485e:	189b      	addge	r3, r3, r2
 8004860:	3301      	addlt	r3, #1
 8004862:	461d      	mov	r5, r3
 8004864:	f04f 0b00 	mov.w	fp, #0
 8004868:	4621      	mov	r1, r4
 800486a:	2201      	movs	r2, #1
 800486c:	4648      	mov	r0, r9
 800486e:	f000 feab 	bl	80055c8 <__lshift>
 8004872:	4641      	mov	r1, r8
 8004874:	9008      	str	r0, [sp, #32]
 8004876:	f000 feff 	bl	8005678 <__mcmp>
 800487a:	2800      	cmp	r0, #0
 800487c:	f340 830d 	ble.w	8004e9a <_dtoa_r+0xb72>
 8004880:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004884:	9907      	ldr	r1, [sp, #28]
 8004886:	1e6b      	subs	r3, r5, #1
 8004888:	e004      	b.n	8004894 <_dtoa_r+0x56c>
 800488a:	428b      	cmp	r3, r1
 800488c:	f000 8278 	beq.w	8004d80 <_dtoa_r+0xa58>
 8004890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004894:	2a39      	cmp	r2, #57	; 0x39
 8004896:	f103 0501 	add.w	r5, r3, #1
 800489a:	d0f6      	beq.n	800488a <_dtoa_r+0x562>
 800489c:	3201      	adds	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	4641      	mov	r1, r8
 80048a2:	4648      	mov	r0, r9
 80048a4:	f000 fd06 	bl	80052b4 <_Bfree>
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	f43f af08 	beq.w	80046be <_dtoa_r+0x396>
 80048ae:	f1bb 0f00 	cmp.w	fp, #0
 80048b2:	d005      	beq.n	80048c0 <_dtoa_r+0x598>
 80048b4:	45b3      	cmp	fp, r6
 80048b6:	d003      	beq.n	80048c0 <_dtoa_r+0x598>
 80048b8:	4659      	mov	r1, fp
 80048ba:	4648      	mov	r0, r9
 80048bc:	f000 fcfa 	bl	80052b4 <_Bfree>
 80048c0:	4631      	mov	r1, r6
 80048c2:	4648      	mov	r0, r9
 80048c4:	f000 fcf6 	bl	80052b4 <_Bfree>
 80048c8:	e6f9      	b.n	80046be <_dtoa_r+0x396>
 80048ca:	2301      	movs	r3, #1
 80048cc:	930c      	str	r3, [sp, #48]	; 0x30
 80048ce:	e5e3      	b.n	8004498 <_dtoa_r+0x170>
 80048d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80048d4:	4640      	mov	r0, r8
 80048d6:	f001 fa27 	bl	8005d28 <__aeabi_i2d>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f001 fcef 	bl	80062c4 <__aeabi_dcmpeq>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f47f adc2 	bne.w	8004470 <_dtoa_r+0x148>
 80048ec:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	e5bd      	b.n	8004470 <_dtoa_r+0x148>
 80048f4:	9a05      	ldr	r2, [sp, #20]
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	425b      	negs	r3, r3
 80048fc:	930a      	str	r3, [sp, #40]	; 0x28
 80048fe:	2300      	movs	r3, #0
 8004900:	9205      	str	r2, [sp, #20]
 8004902:	930b      	str	r3, [sp, #44]	; 0x2c
 8004904:	e5da      	b.n	80044bc <_dtoa_r+0x194>
 8004906:	425b      	negs	r3, r3
 8004908:	9305      	str	r3, [sp, #20]
 800490a:	2300      	movs	r3, #0
 800490c:	9302      	str	r3, [sp, #8]
 800490e:	e5ca      	b.n	80044a6 <_dtoa_r+0x17e>
 8004910:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004912:	9d05      	ldr	r5, [sp, #20]
 8004914:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004916:	e705      	b.n	8004724 <_dtoa_r+0x3fc>
 8004918:	f1c3 0820 	rsb	r8, r3, #32
 800491c:	fa0a f008 	lsl.w	r0, sl, r8
 8004920:	e573      	b.n	800440a <_dtoa_r+0xe2>
 8004922:	900c      	str	r0, [sp, #48]	; 0x30
 8004924:	e5b8      	b.n	8004498 <_dtoa_r+0x170>
 8004926:	bf00      	nop
 8004928:	40240000 	.word	0x40240000
 800492c:	2300      	movs	r3, #0
 800492e:	9309      	str	r3, [sp, #36]	; 0x24
 8004930:	9b04      	ldr	r3, [sp, #16]
 8004932:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004934:	4413      	add	r3, r2
 8004936:	930d      	str	r3, [sp, #52]	; 0x34
 8004938:	3301      	adds	r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	9306      	str	r3, [sp, #24]
 800493e:	f340 8283 	ble.w	8004e48 <_dtoa_r+0xb20>
 8004942:	9c06      	ldr	r4, [sp, #24]
 8004944:	4626      	mov	r6, r4
 8004946:	2100      	movs	r1, #0
 8004948:	2e17      	cmp	r6, #23
 800494a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800494e:	d90b      	bls.n	8004968 <_dtoa_r+0x640>
 8004950:	2201      	movs	r2, #1
 8004952:	2304      	movs	r3, #4
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	f103 0014 	add.w	r0, r3, #20
 800495a:	42b0      	cmp	r0, r6
 800495c:	4611      	mov	r1, r2
 800495e:	f102 0201 	add.w	r2, r2, #1
 8004962:	d9f7      	bls.n	8004954 <_dtoa_r+0x62c>
 8004964:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8004968:	4648      	mov	r0, r9
 800496a:	f000 fc7d 	bl	8005268 <_Balloc>
 800496e:	2c0e      	cmp	r4, #14
 8004970:	9007      	str	r0, [sp, #28]
 8004972:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8004976:	f63f ade0 	bhi.w	800453a <_dtoa_r+0x212>
 800497a:	2d00      	cmp	r5, #0
 800497c:	f43f addd 	beq.w	800453a <_dtoa_r+0x212>
 8004980:	9904      	ldr	r1, [sp, #16]
 8004982:	4657      	mov	r7, sl
 8004984:	46d8      	mov	r8, fp
 8004986:	2900      	cmp	r1, #0
 8004988:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
 800498c:	f340 8292 	ble.w	8004eb4 <_dtoa_r+0xb8c>
 8004990:	4b91      	ldr	r3, [pc, #580]	; (8004bd8 <_dtoa_r+0x8b0>)
 8004992:	f001 020f 	and.w	r2, r1, #15
 8004996:	110e      	asrs	r6, r1, #4
 8004998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800499c:	06f0      	lsls	r0, r6, #27
 800499e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80049a2:	f140 824c 	bpl.w	8004e3e <_dtoa_r+0xb16>
 80049a6:	4b8d      	ldr	r3, [pc, #564]	; (8004bdc <_dtoa_r+0x8b4>)
 80049a8:	4650      	mov	r0, sl
 80049aa:	4659      	mov	r1, fp
 80049ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049b0:	f001 fb4a 	bl	8006048 <__aeabi_ddiv>
 80049b4:	f006 060f 	and.w	r6, r6, #15
 80049b8:	4682      	mov	sl, r0
 80049ba:	468b      	mov	fp, r1
 80049bc:	f04f 0803 	mov.w	r8, #3
 80049c0:	b186      	cbz	r6, 80049e4 <_dtoa_r+0x6bc>
 80049c2:	4f86      	ldr	r7, [pc, #536]	; (8004bdc <_dtoa_r+0x8b4>)
 80049c4:	07f1      	lsls	r1, r6, #31
 80049c6:	d509      	bpl.n	80049dc <_dtoa_r+0x6b4>
 80049c8:	4620      	mov	r0, r4
 80049ca:	4629      	mov	r1, r5
 80049cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d0:	f001 fa10 	bl	8005df4 <__aeabi_dmul>
 80049d4:	f108 0801 	add.w	r8, r8, #1
 80049d8:	4604      	mov	r4, r0
 80049da:	460d      	mov	r5, r1
 80049dc:	1076      	asrs	r6, r6, #1
 80049de:	f107 0708 	add.w	r7, r7, #8
 80049e2:	d1ef      	bne.n	80049c4 <_dtoa_r+0x69c>
 80049e4:	4622      	mov	r2, r4
 80049e6:	462b      	mov	r3, r5
 80049e8:	4650      	mov	r0, sl
 80049ea:	4659      	mov	r1, fp
 80049ec:	f001 fb2c 	bl	8006048 <__aeabi_ddiv>
 80049f0:	4606      	mov	r6, r0
 80049f2:	460f      	mov	r7, r1
 80049f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049f6:	b143      	cbz	r3, 8004a0a <_dtoa_r+0x6e2>
 80049f8:	2200      	movs	r2, #0
 80049fa:	4b79      	ldr	r3, [pc, #484]	; (8004be0 <_dtoa_r+0x8b8>)
 80049fc:	4630      	mov	r0, r6
 80049fe:	4639      	mov	r1, r7
 8004a00:	f001 fc6a 	bl	80062d8 <__aeabi_dcmplt>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f040 8320 	bne.w	800504a <_dtoa_r+0xd22>
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f001 f98c 	bl	8005d28 <__aeabi_i2d>
 8004a10:	4632      	mov	r2, r6
 8004a12:	463b      	mov	r3, r7
 8004a14:	f001 f9ee 	bl	8005df4 <__aeabi_dmul>
 8004a18:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <_dtoa_r+0x8bc>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f001 f838 	bl	8005a90 <__adddf3>
 8004a20:	9b06      	ldr	r3, [sp, #24]
 8004a22:	4604      	mov	r4, r0
 8004a24:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 81df 	beq.w	8004dec <_dtoa_r+0xac4>
 8004a2e:	9b04      	ldr	r3, [sp, #16]
 8004a30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004a34:	9311      	str	r3, [sp, #68]	; 0x44
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8297 	beq.w	8004f6c <_dtoa_r+0xc44>
 8004a3e:	4b66      	ldr	r3, [pc, #408]	; (8004bd8 <_dtoa_r+0x8b0>)
 8004a40:	4969      	ldr	r1, [pc, #420]	; (8004be8 <_dtoa_r+0x8c0>)
 8004a42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004a46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f001 fafc 	bl	8006048 <__aeabi_ddiv>
 8004a50:	4622      	mov	r2, r4
 8004a52:	462b      	mov	r3, r5
 8004a54:	f001 f81a 	bl	8005a8c <__aeabi_dsub>
 8004a58:	4682      	mov	sl, r0
 8004a5a:	468b      	mov	fp, r1
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	4639      	mov	r1, r7
 8004a60:	f001 fc62 	bl	8006328 <__aeabi_d2iz>
 8004a64:	4604      	mov	r4, r0
 8004a66:	f001 f95f 	bl	8005d28 <__aeabi_i2d>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4630      	mov	r0, r6
 8004a70:	4639      	mov	r1, r7
 8004a72:	f001 f80b 	bl	8005a8c <__aeabi_dsub>
 8004a76:	3430      	adds	r4, #48	; 0x30
 8004a78:	9d07      	ldr	r5, [sp, #28]
 8004a7a:	b2e4      	uxtb	r4, r4
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	460f      	mov	r7, r1
 8004a80:	702c      	strb	r4, [r5, #0]
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4650      	mov	r0, sl
 8004a88:	4659      	mov	r1, fp
 8004a8a:	3501      	adds	r5, #1
 8004a8c:	f001 fc42 	bl	8006314 <__aeabi_dcmpgt>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d14c      	bne.n	8004b2e <_dtoa_r+0x806>
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	2000      	movs	r0, #0
 8004a9a:	4951      	ldr	r1, [pc, #324]	; (8004be0 <_dtoa_r+0x8b8>)
 8004a9c:	f000 fff6 	bl	8005a8c <__aeabi_dsub>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	4659      	mov	r1, fp
 8004aa8:	f001 fc34 	bl	8006314 <__aeabi_dcmpgt>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	f040 830d 	bne.w	80050cc <_dtoa_r+0xda4>
 8004ab2:	f1b8 0f01 	cmp.w	r8, #1
 8004ab6:	f340 81b3 	ble.w	8004e20 <_dtoa_r+0xaf8>
 8004aba:	9b07      	ldr	r3, [sp, #28]
 8004abc:	4498      	add	r8, r3
 8004abe:	e00d      	b.n	8004adc <_dtoa_r+0x7b4>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	4947      	ldr	r1, [pc, #284]	; (8004be0 <_dtoa_r+0x8b8>)
 8004ac4:	f000 ffe2 	bl	8005a8c <__aeabi_dsub>
 8004ac8:	4652      	mov	r2, sl
 8004aca:	465b      	mov	r3, fp
 8004acc:	f001 fc04 	bl	80062d8 <__aeabi_dcmplt>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f040 82fb 	bne.w	80050cc <_dtoa_r+0xda4>
 8004ad6:	4545      	cmp	r5, r8
 8004ad8:	f000 81a2 	beq.w	8004e20 <_dtoa_r+0xaf8>
 8004adc:	4650      	mov	r0, sl
 8004ade:	4659      	mov	r1, fp
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	4b42      	ldr	r3, [pc, #264]	; (8004bec <_dtoa_r+0x8c4>)
 8004ae4:	f001 f986 	bl	8005df4 <__aeabi_dmul>
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4b40      	ldr	r3, [pc, #256]	; (8004bec <_dtoa_r+0x8c4>)
 8004aec:	4682      	mov	sl, r0
 8004aee:	468b      	mov	fp, r1
 8004af0:	4630      	mov	r0, r6
 8004af2:	4639      	mov	r1, r7
 8004af4:	f001 f97e 	bl	8005df4 <__aeabi_dmul>
 8004af8:	460f      	mov	r7, r1
 8004afa:	4606      	mov	r6, r0
 8004afc:	f001 fc14 	bl	8006328 <__aeabi_d2iz>
 8004b00:	4604      	mov	r4, r0
 8004b02:	f001 f911 	bl	8005d28 <__aeabi_i2d>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	f000 ffbd 	bl	8005a8c <__aeabi_dsub>
 8004b12:	3430      	adds	r4, #48	; 0x30
 8004b14:	b2e4      	uxtb	r4, r4
 8004b16:	4652      	mov	r2, sl
 8004b18:	465b      	mov	r3, fp
 8004b1a:	f805 4b01 	strb.w	r4, [r5], #1
 8004b1e:	4606      	mov	r6, r0
 8004b20:	460f      	mov	r7, r1
 8004b22:	f001 fbd9 	bl	80062d8 <__aeabi_dcmplt>
 8004b26:	4632      	mov	r2, r6
 8004b28:	463b      	mov	r3, r7
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d0c8      	beq.n	8004ac0 <_dtoa_r+0x798>
 8004b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	e5c4      	b.n	80046be <_dtoa_r+0x396>
 8004b34:	2300      	movs	r3, #0
 8004b36:	9309      	str	r3, [sp, #36]	; 0x24
 8004b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f340 8189 	ble.w	8004e52 <_dtoa_r+0xb2a>
 8004b40:	461e      	mov	r6, r3
 8004b42:	461c      	mov	r4, r3
 8004b44:	930d      	str	r3, [sp, #52]	; 0x34
 8004b46:	9306      	str	r3, [sp, #24]
 8004b48:	e6fd      	b.n	8004946 <_dtoa_r+0x61e>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4e:	e7f3      	b.n	8004b38 <_dtoa_r+0x810>
 8004b50:	9408      	str	r4, [sp, #32]
 8004b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b54:	9908      	ldr	r1, [sp, #32]
 8004b56:	4648      	mov	r0, r9
 8004b58:	f000 fce6 	bl	8005528 <__pow5mult>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	e611      	b.n	8004784 <_dtoa_r+0x45c>
 8004b60:	9b06      	ldr	r3, [sp, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f73f acfc 	bgt.w	8004560 <_dtoa_r+0x238>
 8004b68:	f040 82da 	bne.w	8005120 <_dtoa_r+0xdf8>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <_dtoa_r+0x8c8>)
 8004b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b74:	f001 f93e 	bl	8005df4 <__aeabi_dmul>
 8004b78:	4652      	mov	r2, sl
 8004b7a:	465b      	mov	r3, fp
 8004b7c:	f001 fbc0 	bl	8006300 <__aeabi_dcmpge>
 8004b80:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004b84:	4646      	mov	r6, r8
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f000 80f2 	beq.w	8004d70 <_dtoa_r+0xa48>
 8004b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b8e:	9d07      	ldr	r5, [sp, #28]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	4641      	mov	r1, r8
 8004b96:	4648      	mov	r0, r9
 8004b98:	f000 fb8c 	bl	80052b4 <_Bfree>
 8004b9c:	2e00      	cmp	r6, #0
 8004b9e:	f43f ad8e 	beq.w	80046be <_dtoa_r+0x396>
 8004ba2:	e68d      	b.n	80048c0 <_dtoa_r+0x598>
 8004ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	f000 8241 	beq.w	800502e <_dtoa_r+0xd06>
 8004bac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004bb2:	9d05      	ldr	r5, [sp, #20]
 8004bb4:	e5ab      	b.n	800470e <_dtoa_r+0x3e6>
 8004bb6:	201c      	movs	r0, #28
 8004bb8:	9b05      	ldr	r3, [sp, #20]
 8004bba:	4403      	add	r3, r0
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	9b02      	ldr	r3, [sp, #8]
 8004bc0:	4403      	add	r3, r0
 8004bc2:	4405      	add	r5, r0
 8004bc4:	9302      	str	r3, [sp, #8]
 8004bc6:	e60e      	b.n	80047e6 <_dtoa_r+0x4be>
 8004bc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	f340 8282 	ble.w	80050d4 <_dtoa_r+0xdac>
 8004bd0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	e5f3      	b.n	80047be <_dtoa_r+0x496>
 8004bd6:	bf00      	nop
 8004bd8:	08006988 	.word	0x08006988
 8004bdc:	08006a50 	.word	0x08006a50
 8004be0:	3ff00000 	.word	0x3ff00000
 8004be4:	401c0000 	.word	0x401c0000
 8004be8:	3fe00000 	.word	0x3fe00000
 8004bec:	40240000 	.word	0x40240000
 8004bf0:	40140000 	.word	0x40140000
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	220a      	movs	r2, #10
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	f000 fb64 	bl	80052c8 <__multadd>
 8004c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	4606      	mov	r6, r0
 8004c06:	f340 8297 	ble.w	8005138 <_dtoa_r+0xe10>
 8004c0a:	9306      	str	r3, [sp, #24]
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	dd05      	ble.n	8004c1c <_dtoa_r+0x8f4>
 8004c10:	4631      	mov	r1, r6
 8004c12:	462a      	mov	r2, r5
 8004c14:	4648      	mov	r0, r9
 8004c16:	f000 fcd7 	bl	80055c8 <__lshift>
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	2f00      	cmp	r7, #0
 8004c1e:	f040 817c 	bne.w	8004f1a <_dtoa_r+0xbf2>
 8004c22:	9605      	str	r6, [sp, #20]
 8004c24:	9b06      	ldr	r3, [sp, #24]
 8004c26:	9a07      	ldr	r2, [sp, #28]
 8004c28:	f8dd b014 	ldr.w	fp, [sp, #20]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	18d3      	adds	r3, r2, r3
 8004c30:	9308      	str	r3, [sp, #32]
 8004c32:	f00a 0301 	and.w	r3, sl, #1
 8004c36:	9309      	str	r3, [sp, #36]	; 0x24
 8004c38:	4617      	mov	r7, r2
 8004c3a:	46c2      	mov	sl, r8
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff fade 	bl	8004200 <quorem>
 8004c44:	4631      	mov	r1, r6
 8004c46:	4605      	mov	r5, r0
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 fd15 	bl	8005678 <__mcmp>
 8004c4e:	465a      	mov	r2, fp
 8004c50:	9002      	str	r0, [sp, #8]
 8004c52:	4651      	mov	r1, sl
 8004c54:	4648      	mov	r0, r9
 8004c56:	f000 fd2f 	bl	80056b8 <__mdiff>
 8004c5a:	68c2      	ldr	r2, [r0, #12]
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	d149      	bne.n	8004cfa <_dtoa_r+0x9d2>
 8004c66:	4601      	mov	r1, r0
 8004c68:	4620      	mov	r0, r4
 8004c6a:	9306      	str	r3, [sp, #24]
 8004c6c:	f000 fd04 	bl	8005678 <__mcmp>
 8004c70:	4641      	mov	r1, r8
 8004c72:	9005      	str	r0, [sp, #20]
 8004c74:	4648      	mov	r0, r9
 8004c76:	f000 fb1d 	bl	80052b4 <_Bfree>
 8004c7a:	9a05      	ldr	r2, [sp, #20]
 8004c7c:	9b06      	ldr	r3, [sp, #24]
 8004c7e:	b92a      	cbnz	r2, 8004c8c <_dtoa_r+0x964>
 8004c80:	9920      	ldr	r1, [sp, #128]	; 0x80
 8004c82:	b919      	cbnz	r1, 8004c8c <_dtoa_r+0x964>
 8004c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c86:	2900      	cmp	r1, #0
 8004c88:	f000 8236 	beq.w	80050f8 <_dtoa_r+0xdd0>
 8004c8c:	9902      	ldr	r1, [sp, #8]
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	f2c0 80e4 	blt.w	8004e5c <_dtoa_r+0xb34>
 8004c94:	d105      	bne.n	8004ca2 <_dtoa_r+0x97a>
 8004c96:	9920      	ldr	r1, [sp, #128]	; 0x80
 8004c98:	b919      	cbnz	r1, 8004ca2 <_dtoa_r+0x97a>
 8004c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	f000 80dd 	beq.w	8004e5c <_dtoa_r+0xb34>
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	f300 814d 	bgt.w	8004f42 <_dtoa_r+0xc1a>
 8004ca8:	9a08      	ldr	r2, [sp, #32]
 8004caa:	703b      	strb	r3, [r7, #0]
 8004cac:	f107 0801 	add.w	r8, r7, #1
 8004cb0:	4297      	cmp	r7, r2
 8004cb2:	4645      	mov	r5, r8
 8004cb4:	f000 8154 	beq.w	8004f60 <_dtoa_r+0xc38>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	2300      	movs	r3, #0
 8004cbc:	220a      	movs	r2, #10
 8004cbe:	4648      	mov	r0, r9
 8004cc0:	f000 fb02 	bl	80052c8 <__multadd>
 8004cc4:	455e      	cmp	r6, fp
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4631      	mov	r1, r6
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	f04f 020a 	mov.w	r2, #10
 8004cd2:	4648      	mov	r0, r9
 8004cd4:	d00b      	beq.n	8004cee <_dtoa_r+0x9c6>
 8004cd6:	f000 faf7 	bl	80052c8 <__multadd>
 8004cda:	4659      	mov	r1, fp
 8004cdc:	4606      	mov	r6, r0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	220a      	movs	r2, #10
 8004ce2:	4648      	mov	r0, r9
 8004ce4:	f000 faf0 	bl	80052c8 <__multadd>
 8004ce8:	4647      	mov	r7, r8
 8004cea:	4683      	mov	fp, r0
 8004cec:	e7a6      	b.n	8004c3c <_dtoa_r+0x914>
 8004cee:	f000 faeb 	bl	80052c8 <__multadd>
 8004cf2:	4647      	mov	r7, r8
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	4683      	mov	fp, r0
 8004cf8:	e7a0      	b.n	8004c3c <_dtoa_r+0x914>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	4648      	mov	r0, r9
 8004cfe:	9305      	str	r3, [sp, #20]
 8004d00:	f000 fad8 	bl	80052b4 <_Bfree>
 8004d04:	2201      	movs	r2, #1
 8004d06:	9b05      	ldr	r3, [sp, #20]
 8004d08:	e7c0      	b.n	8004c8c <_dtoa_r+0x964>
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f000 fcb3 	bl	8005678 <__mcmp>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f6bf ad7d 	bge.w	8004812 <_dtoa_r+0x4ea>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	9c04      	ldr	r4, [sp, #16]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	3c01      	subs	r4, #1
 8004d20:	220a      	movs	r2, #10
 8004d22:	4648      	mov	r0, r9
 8004d24:	9404      	str	r4, [sp, #16]
 8004d26:	f000 facf 	bl	80052c8 <__multadd>
 8004d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f47f af60 	bne.w	8004bf4 <_dtoa_r+0x8cc>
 8004d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f340 81f6 	ble.w	8005128 <_dtoa_r+0xe00>
 8004d3c:	9306      	str	r3, [sp, #24]
 8004d3e:	e570      	b.n	8004822 <_dtoa_r+0x4fa>
 8004d40:	9c08      	ldr	r4, [sp, #32]
 8004d42:	e51f      	b.n	8004784 <_dtoa_r+0x45c>
 8004d44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	f77f ad67 	ble.w	800481a <_dtoa_r+0x4f2>
 8004d4c:	9b06      	ldr	r3, [sp, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 8179 	bne.w	8005046 <_dtoa_r+0xd1e>
 8004d54:	4641      	mov	r1, r8
 8004d56:	2205      	movs	r2, #5
 8004d58:	4648      	mov	r0, r9
 8004d5a:	f000 fab5 	bl	80052c8 <__multadd>
 8004d5e:	4601      	mov	r1, r0
 8004d60:	4680      	mov	r8, r0
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fc88 	bl	8005678 <__mcmp>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	9408      	str	r4, [sp, #32]
 8004d6c:	f77f af0e 	ble.w	8004b8c <_dtoa_r+0x864>
 8004d70:	9a04      	ldr	r2, [sp, #16]
 8004d72:	9907      	ldr	r1, [sp, #28]
 8004d74:	2331      	movs	r3, #49	; 0x31
 8004d76:	3201      	adds	r2, #1
 8004d78:	9204      	str	r2, [sp, #16]
 8004d7a:	700b      	strb	r3, [r1, #0]
 8004d7c:	1c4d      	adds	r5, r1, #1
 8004d7e:	e709      	b.n	8004b94 <_dtoa_r+0x86c>
 8004d80:	9a04      	ldr	r2, [sp, #16]
 8004d82:	3201      	adds	r2, #1
 8004d84:	9204      	str	r2, [sp, #16]
 8004d86:	9a07      	ldr	r2, [sp, #28]
 8004d88:	2331      	movs	r3, #49	; 0x31
 8004d8a:	7013      	strb	r3, [r2, #0]
 8004d8c:	e588      	b.n	80048a0 <_dtoa_r+0x578>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	9309      	str	r3, [sp, #36]	; 0x24
 8004d92:	e5cd      	b.n	8004930 <_dtoa_r+0x608>
 8004d94:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d98:	e491      	b.n	80046be <_dtoa_r+0x396>
 8004d9a:	f1ba 0f00 	cmp.w	sl, #0
 8004d9e:	f47f ad04 	bne.w	80047aa <_dtoa_r+0x482>
 8004da2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 813f 	bne.w	800502a <_dtoa_r+0xd02>
 8004dac:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8004db0:	0d3f      	lsrs	r7, r7, #20
 8004db2:	053f      	lsls	r7, r7, #20
 8004db4:	b137      	cbz	r7, 8004dc4 <_dtoa_r+0xa9c>
 8004db6:	9b05      	ldr	r3, [sp, #20]
 8004db8:	3301      	adds	r3, #1
 8004dba:	9305      	str	r3, [sp, #20]
 8004dbc:	9b02      	ldr	r3, [sp, #8]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	9302      	str	r3, [sp, #8]
 8004dc2:	2701      	movs	r7, #1
 8004dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f43f acf8 	beq.w	80047be <_dtoa_r+0x496>
 8004dce:	e4ed      	b.n	80047ac <_dtoa_r+0x484>
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f000 ffa9 	bl	8005d28 <__aeabi_i2d>
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	463b      	mov	r3, r7
 8004dda:	f001 f80b 	bl	8005df4 <__aeabi_dmul>
 8004dde:	2200      	movs	r2, #0
 8004de0:	4bbf      	ldr	r3, [pc, #764]	; (80050e0 <_dtoa_r+0xdb8>)
 8004de2:	f000 fe55 	bl	8005a90 <__adddf3>
 8004de6:	4604      	mov	r4, r0
 8004de8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	2200      	movs	r2, #0
 8004df2:	4bbc      	ldr	r3, [pc, #752]	; (80050e4 <_dtoa_r+0xdbc>)
 8004df4:	f000 fe4a 	bl	8005a8c <__aeabi_dsub>
 8004df8:	4622      	mov	r2, r4
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	460f      	mov	r7, r1
 8004e00:	f001 fa88 	bl	8006314 <__aeabi_dcmpgt>
 8004e04:	4680      	mov	r8, r0
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f040 8105 	bne.w	8005016 <_dtoa_r+0xcee>
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004e12:	4630      	mov	r0, r6
 8004e14:	4639      	mov	r1, r7
 8004e16:	f001 fa5f 	bl	80062d8 <__aeabi_dcmplt>
 8004e1a:	b108      	cbz	r0, 8004e20 <_dtoa_r+0xaf8>
 8004e1c:	4646      	mov	r6, r8
 8004e1e:	e6b5      	b.n	8004b8c <_dtoa_r+0x864>
 8004e20:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8004e24:	f7ff bb89 	b.w	800453a <_dtoa_r+0x212>
 8004e28:	9807      	ldr	r0, [sp, #28]
 8004e2a:	f7ff baae 	b.w	800438a <_dtoa_r+0x62>
 8004e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e32:	970a      	str	r7, [sp, #40]	; 0x28
 8004e34:	1afb      	subs	r3, r7, r3
 8004e36:	441a      	add	r2, r3
 8004e38:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e3a:	2700      	movs	r7, #0
 8004e3c:	e461      	b.n	8004702 <_dtoa_r+0x3da>
 8004e3e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8004e42:	f04f 0802 	mov.w	r8, #2
 8004e46:	e5bb      	b.n	80049c0 <_dtoa_r+0x698>
 8004e48:	461c      	mov	r4, r3
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8004e50:	e58a      	b.n	8004968 <_dtoa_r+0x640>
 8004e52:	2401      	movs	r4, #1
 8004e54:	9421      	str	r4, [sp, #132]	; 0x84
 8004e56:	940d      	str	r4, [sp, #52]	; 0x34
 8004e58:	9406      	str	r4, [sp, #24]
 8004e5a:	e7f6      	b.n	8004e4a <_dtoa_r+0xb22>
 8004e5c:	2a00      	cmp	r2, #0
 8004e5e:	46d0      	mov	r8, sl
 8004e60:	f8cd b014 	str.w	fp, [sp, #20]
 8004e64:	469a      	mov	sl, r3
 8004e66:	dd11      	ble.n	8004e8c <_dtoa_r+0xb64>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4648      	mov	r0, r9
 8004e6e:	f000 fbab 	bl	80055c8 <__lshift>
 8004e72:	4641      	mov	r1, r8
 8004e74:	4604      	mov	r4, r0
 8004e76:	f000 fbff 	bl	8005678 <__mcmp>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	f340 8149 	ble.w	8005112 <_dtoa_r+0xdea>
 8004e80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e84:	f000 8106 	beq.w	8005094 <_dtoa_r+0xd6c>
 8004e88:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8004e8c:	46b3      	mov	fp, r6
 8004e8e:	f887 a000 	strb.w	sl, [r7]
 8004e92:	1c7d      	adds	r5, r7, #1
 8004e94:	9e05      	ldr	r6, [sp, #20]
 8004e96:	9408      	str	r4, [sp, #32]
 8004e98:	e502      	b.n	80048a0 <_dtoa_r+0x578>
 8004e9a:	d104      	bne.n	8004ea6 <_dtoa_r+0xb7e>
 8004e9c:	f01a 0f01 	tst.w	sl, #1
 8004ea0:	d001      	beq.n	8004ea6 <_dtoa_r+0xb7e>
 8004ea2:	e4ed      	b.n	8004880 <_dtoa_r+0x558>
 8004ea4:	4615      	mov	r5, r2
 8004ea6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004eaa:	2b30      	cmp	r3, #48	; 0x30
 8004eac:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004eb0:	d0f8      	beq.n	8004ea4 <_dtoa_r+0xb7c>
 8004eb2:	e4f5      	b.n	80048a0 <_dtoa_r+0x578>
 8004eb4:	9b04      	ldr	r3, [sp, #16]
 8004eb6:	425c      	negs	r4, r3
 8004eb8:	2c00      	cmp	r4, #0
 8004eba:	f000 80bf 	beq.w	800503c <_dtoa_r+0xd14>
 8004ebe:	4b8a      	ldr	r3, [pc, #552]	; (80050e8 <_dtoa_r+0xdc0>)
 8004ec0:	f004 020f 	and.w	r2, r4, #15
 8004ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ed0:	f000 ff90 	bl	8005df4 <__aeabi_dmul>
 8004ed4:	1124      	asrs	r4, r4, #4
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	460f      	mov	r7, r1
 8004eda:	f000 812a 	beq.w	8005132 <_dtoa_r+0xe0a>
 8004ede:	4d83      	ldr	r5, [pc, #524]	; (80050ec <_dtoa_r+0xdc4>)
 8004ee0:	f04f 0802 	mov.w	r8, #2
 8004ee4:	07e2      	lsls	r2, r4, #31
 8004ee6:	d509      	bpl.n	8004efc <_dtoa_r+0xbd4>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4639      	mov	r1, r7
 8004eec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ef0:	f000 ff80 	bl	8005df4 <__aeabi_dmul>
 8004ef4:	f108 0801 	add.w	r8, r8, #1
 8004ef8:	4606      	mov	r6, r0
 8004efa:	460f      	mov	r7, r1
 8004efc:	1064      	asrs	r4, r4, #1
 8004efe:	f105 0508 	add.w	r5, r5, #8
 8004f02:	d1ef      	bne.n	8004ee4 <_dtoa_r+0xbbc>
 8004f04:	e576      	b.n	80049f4 <_dtoa_r+0x6cc>
 8004f06:	9907      	ldr	r1, [sp, #28]
 8004f08:	2230      	movs	r2, #48	; 0x30
 8004f0a:	700a      	strb	r2, [r1, #0]
 8004f0c:	9a04      	ldr	r2, [sp, #16]
 8004f0e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8004f12:	3201      	adds	r2, #1
 8004f14:	9204      	str	r2, [sp, #16]
 8004f16:	f7ff bbd0 	b.w	80046ba <_dtoa_r+0x392>
 8004f1a:	6871      	ldr	r1, [r6, #4]
 8004f1c:	4648      	mov	r0, r9
 8004f1e:	f000 f9a3 	bl	8005268 <_Balloc>
 8004f22:	6933      	ldr	r3, [r6, #16]
 8004f24:	1c9a      	adds	r2, r3, #2
 8004f26:	4605      	mov	r5, r0
 8004f28:	0092      	lsls	r2, r2, #2
 8004f2a:	f106 010c 	add.w	r1, r6, #12
 8004f2e:	300c      	adds	r0, #12
 8004f30:	f7fc fb76 	bl	8001620 <memcpy>
 8004f34:	4629      	mov	r1, r5
 8004f36:	2201      	movs	r2, #1
 8004f38:	4648      	mov	r0, r9
 8004f3a:	f000 fb45 	bl	80055c8 <__lshift>
 8004f3e:	9005      	str	r0, [sp, #20]
 8004f40:	e670      	b.n	8004c24 <_dtoa_r+0x8fc>
 8004f42:	2b39      	cmp	r3, #57	; 0x39
 8004f44:	f8cd b014 	str.w	fp, [sp, #20]
 8004f48:	46d0      	mov	r8, sl
 8004f4a:	f000 80a3 	beq.w	8005094 <_dtoa_r+0xd6c>
 8004f4e:	f103 0a01 	add.w	sl, r3, #1
 8004f52:	46b3      	mov	fp, r6
 8004f54:	f887 a000 	strb.w	sl, [r7]
 8004f58:	1c7d      	adds	r5, r7, #1
 8004f5a:	9e05      	ldr	r6, [sp, #20]
 8004f5c:	9408      	str	r4, [sp, #32]
 8004f5e:	e49f      	b.n	80048a0 <_dtoa_r+0x578>
 8004f60:	465a      	mov	r2, fp
 8004f62:	46d0      	mov	r8, sl
 8004f64:	46b3      	mov	fp, r6
 8004f66:	469a      	mov	sl, r3
 8004f68:	4616      	mov	r6, r2
 8004f6a:	e47d      	b.n	8004868 <_dtoa_r+0x540>
 8004f6c:	495e      	ldr	r1, [pc, #376]	; (80050e8 <_dtoa_r+0xdc0>)
 8004f6e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8004f72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004f76:	4622      	mov	r2, r4
 8004f78:	462b      	mov	r3, r5
 8004f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f7e:	f000 ff39 	bl	8005df4 <__aeabi_dmul>
 8004f82:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004f86:	4639      	mov	r1, r7
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f001 f9cd 	bl	8006328 <__aeabi_d2iz>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	f000 feca 	bl	8005d28 <__aeabi_i2d>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4630      	mov	r0, r6
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f000 fd76 	bl	8005a8c <__aeabi_dsub>
 8004fa0:	9a07      	ldr	r2, [sp, #28]
 8004fa2:	3430      	adds	r4, #48	; 0x30
 8004fa4:	f1b8 0f01 	cmp.w	r8, #1
 8004fa8:	4606      	mov	r6, r0
 8004faa:	460f      	mov	r7, r1
 8004fac:	7014      	strb	r4, [r2, #0]
 8004fae:	f102 0501 	add.w	r5, r2, #1
 8004fb2:	d01e      	beq.n	8004ff2 <_dtoa_r+0xcca>
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	eb03 0b08 	add.w	fp, r3, r8
 8004fba:	46a8      	mov	r8, r5
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <_dtoa_r+0xdc8>)
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	f000 ff16 	bl	8005df4 <__aeabi_dmul>
 8004fc8:	460f      	mov	r7, r1
 8004fca:	4606      	mov	r6, r0
 8004fcc:	f001 f9ac 	bl	8006328 <__aeabi_d2iz>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	f000 fea9 	bl	8005d28 <__aeabi_i2d>
 8004fd6:	3430      	adds	r4, #48	; 0x30
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4630      	mov	r0, r6
 8004fde:	4639      	mov	r1, r7
 8004fe0:	f000 fd54 	bl	8005a8c <__aeabi_dsub>
 8004fe4:	f808 4b01 	strb.w	r4, [r8], #1
 8004fe8:	45c3      	cmp	fp, r8
 8004fea:	4606      	mov	r6, r0
 8004fec:	460f      	mov	r7, r1
 8004fee:	d1e5      	bne.n	8004fbc <_dtoa_r+0xc94>
 8004ff0:	4455      	add	r5, sl
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <_dtoa_r+0xdcc>)
 8004ff6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004ffa:	f000 fd49 	bl	8005a90 <__adddf3>
 8004ffe:	4632      	mov	r2, r6
 8005000:	463b      	mov	r3, r7
 8005002:	f001 f969 	bl	80062d8 <__aeabi_dcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	d04c      	beq.n	80050a4 <_dtoa_r+0xd7c>
 800500a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800500c:	9304      	str	r3, [sp, #16]
 800500e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8005012:	f7ff bb46 	b.w	80046a2 <_dtoa_r+0x37a>
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	4646      	mov	r6, r8
 800501c:	e6a8      	b.n	8004d70 <_dtoa_r+0xa48>
 800501e:	9b05      	ldr	r3, [sp, #20]
 8005020:	9a06      	ldr	r2, [sp, #24]
 8005022:	1a9d      	subs	r5, r3, r2
 8005024:	2300      	movs	r3, #0
 8005026:	f7ff bb72 	b.w	800470e <_dtoa_r+0x3e6>
 800502a:	2700      	movs	r7, #0
 800502c:	e6ca      	b.n	8004dc4 <_dtoa_r+0xa9c>
 800502e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005030:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005032:	9d05      	ldr	r5, [sp, #20]
 8005034:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005038:	f7ff bb69 	b.w	800470e <_dtoa_r+0x3e6>
 800503c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8005040:	f04f 0802 	mov.w	r8, #2
 8005044:	e4d6      	b.n	80049f4 <_dtoa_r+0x6cc>
 8005046:	9408      	str	r4, [sp, #32]
 8005048:	e5a0      	b.n	8004b8c <_dtoa_r+0x864>
 800504a:	9b06      	ldr	r3, [sp, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f43f aebf 	beq.w	8004dd0 <_dtoa_r+0xaa8>
 8005052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005054:	2b00      	cmp	r3, #0
 8005056:	f77f aee3 	ble.w	8004e20 <_dtoa_r+0xaf8>
 800505a:	2200      	movs	r2, #0
 800505c:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <_dtoa_r+0xdc8>)
 800505e:	4630      	mov	r0, r6
 8005060:	4639      	mov	r1, r7
 8005062:	f000 fec7 	bl	8005df4 <__aeabi_dmul>
 8005066:	4606      	mov	r6, r0
 8005068:	460f      	mov	r7, r1
 800506a:	f108 0001 	add.w	r0, r8, #1
 800506e:	f000 fe5b 	bl	8005d28 <__aeabi_i2d>
 8005072:	4632      	mov	r2, r6
 8005074:	463b      	mov	r3, r7
 8005076:	f000 febd 	bl	8005df4 <__aeabi_dmul>
 800507a:	2200      	movs	r2, #0
 800507c:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <_dtoa_r+0xdb8>)
 800507e:	f000 fd07 	bl	8005a90 <__adddf3>
 8005082:	9a04      	ldr	r2, [sp, #16]
 8005084:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005088:	3a01      	subs	r2, #1
 800508a:	4604      	mov	r4, r0
 800508c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005090:	9211      	str	r2, [sp, #68]	; 0x44
 8005092:	e4d0      	b.n	8004a36 <_dtoa_r+0x70e>
 8005094:	2239      	movs	r2, #57	; 0x39
 8005096:	46b3      	mov	fp, r6
 8005098:	9408      	str	r4, [sp, #32]
 800509a:	9e05      	ldr	r6, [sp, #20]
 800509c:	703a      	strb	r2, [r7, #0]
 800509e:	1c7d      	adds	r5, r7, #1
 80050a0:	f7ff bbf0 	b.w	8004884 <_dtoa_r+0x55c>
 80050a4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80050a8:	2000      	movs	r0, #0
 80050aa:	4912      	ldr	r1, [pc, #72]	; (80050f4 <_dtoa_r+0xdcc>)
 80050ac:	f000 fcee 	bl	8005a8c <__aeabi_dsub>
 80050b0:	4632      	mov	r2, r6
 80050b2:	463b      	mov	r3, r7
 80050b4:	f001 f92e 	bl	8006314 <__aeabi_dcmpgt>
 80050b8:	b908      	cbnz	r0, 80050be <_dtoa_r+0xd96>
 80050ba:	e6b1      	b.n	8004e20 <_dtoa_r+0xaf8>
 80050bc:	4615      	mov	r5, r2
 80050be:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050c2:	2b30      	cmp	r3, #48	; 0x30
 80050c4:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80050c8:	d0f8      	beq.n	80050bc <_dtoa_r+0xd94>
 80050ca:	e530      	b.n	8004b2e <_dtoa_r+0x806>
 80050cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	f7ff bae7 	b.w	80046a2 <_dtoa_r+0x37a>
 80050d4:	f1ba 0f00 	cmp.w	sl, #0
 80050d8:	f47f ad7a 	bne.w	8004bd0 <_dtoa_r+0x8a8>
 80050dc:	e661      	b.n	8004da2 <_dtoa_r+0xa7a>
 80050de:	bf00      	nop
 80050e0:	401c0000 	.word	0x401c0000
 80050e4:	40140000 	.word	0x40140000
 80050e8:	08006988 	.word	0x08006988
 80050ec:	08006a50 	.word	0x08006a50
 80050f0:	40240000 	.word	0x40240000
 80050f4:	3fe00000 	.word	0x3fe00000
 80050f8:	2b39      	cmp	r3, #57	; 0x39
 80050fa:	f8cd b014 	str.w	fp, [sp, #20]
 80050fe:	46d0      	mov	r8, sl
 8005100:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005104:	469a      	mov	sl, r3
 8005106:	d0c5      	beq.n	8005094 <_dtoa_r+0xd6c>
 8005108:	f1bb 0f00 	cmp.w	fp, #0
 800510c:	f73f aebc 	bgt.w	8004e88 <_dtoa_r+0xb60>
 8005110:	e6bc      	b.n	8004e8c <_dtoa_r+0xb64>
 8005112:	f47f aebb 	bne.w	8004e8c <_dtoa_r+0xb64>
 8005116:	f01a 0f01 	tst.w	sl, #1
 800511a:	f43f aeb7 	beq.w	8004e8c <_dtoa_r+0xb64>
 800511e:	e6af      	b.n	8004e80 <_dtoa_r+0xb58>
 8005120:	f04f 0800 	mov.w	r8, #0
 8005124:	4646      	mov	r6, r8
 8005126:	e531      	b.n	8004b8c <_dtoa_r+0x864>
 8005128:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800512a:	2b02      	cmp	r3, #2
 800512c:	dc21      	bgt.n	8005172 <_dtoa_r+0xe4a>
 800512e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005130:	e604      	b.n	8004d3c <_dtoa_r+0xa14>
 8005132:	f04f 0802 	mov.w	r8, #2
 8005136:	e45d      	b.n	80049f4 <_dtoa_r+0x6cc>
 8005138:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800513a:	2b02      	cmp	r3, #2
 800513c:	dc19      	bgt.n	8005172 <_dtoa_r+0xe4a>
 800513e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005140:	e563      	b.n	8004c0a <_dtoa_r+0x8e2>
 8005142:	2400      	movs	r4, #0
 8005144:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8005148:	4621      	mov	r1, r4
 800514a:	4648      	mov	r0, r9
 800514c:	f000 f88c 	bl	8005268 <_Balloc>
 8005150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005154:	9306      	str	r3, [sp, #24]
 8005156:	930d      	str	r3, [sp, #52]	; 0x34
 8005158:	2301      	movs	r3, #1
 800515a:	9007      	str	r0, [sp, #28]
 800515c:	9421      	str	r4, [sp, #132]	; 0x84
 800515e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8005162:	9309      	str	r3, [sp, #36]	; 0x24
 8005164:	f7ff b9e9 	b.w	800453a <_dtoa_r+0x212>
 8005168:	f43f ab3d 	beq.w	80047e6 <_dtoa_r+0x4be>
 800516c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8005170:	e522      	b.n	8004bb8 <_dtoa_r+0x890>
 8005172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005174:	9306      	str	r3, [sp, #24]
 8005176:	e5e9      	b.n	8004d4c <_dtoa_r+0xa24>
 8005178:	2501      	movs	r5, #1
 800517a:	f7ff b9a8 	b.w	80044ce <_dtoa_r+0x1a6>
 800517e:	bf00      	nop

08005180 <_localeconv_r>:
_localeconv_r():
 8005180:	4800      	ldr	r0, [pc, #0]	; (8005184 <_localeconv_r+0x4>)
 8005182:	4770      	bx	lr
 8005184:	2000085c 	.word	0x2000085c

08005188 <__smakebuf_r>:
__smakebuf_r():
 8005188:	898b      	ldrh	r3, [r1, #12]
 800518a:	b29a      	uxth	r2, r3
 800518c:	f012 0f02 	tst.w	r2, #2
 8005190:	d13c      	bne.n	800520c <__smakebuf_r+0x84>
 8005192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005194:	460c      	mov	r4, r1
 8005196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519a:	2900      	cmp	r1, #0
 800519c:	b091      	sub	sp, #68	; 0x44
 800519e:	4605      	mov	r5, r0
 80051a0:	db19      	blt.n	80051d6 <__smakebuf_r+0x4e>
 80051a2:	aa01      	add	r2, sp, #4
 80051a4:	f000 fc48 	bl	8005a38 <_fstat_r>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	db12      	blt.n	80051d2 <__smakebuf_r+0x4a>
 80051ac:	9b02      	ldr	r3, [sp, #8]
 80051ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051b2:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 80051b6:	fab7 f787 	clz	r7, r7
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80051c2:	d02a      	beq.n	800521a <__smakebuf_r+0x92>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80051d0:	e00b      	b.n	80051ea <__smakebuf_r+0x62>
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80051da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	bf14      	ite	ne
 80051e2:	2640      	movne	r6, #64	; 0x40
 80051e4:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80051e8:	2700      	movs	r7, #0
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	f7fb ff5f 	bl	80010b0 <_malloc_r>
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	b340      	cbz	r0, 8005248 <__smakebuf_r+0xc0>
 80051f6:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <__smakebuf_r+0xd8>)
 80051f8:	63ea      	str	r2, [r5, #60]	; 0x3c
 80051fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	6120      	str	r0, [r4, #16]
 8005204:	6166      	str	r6, [r4, #20]
 8005206:	b99f      	cbnz	r7, 8005230 <__smakebuf_r+0xa8>
 8005208:	b011      	add	sp, #68	; 0x44
 800520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800520c:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8005210:	2201      	movs	r2, #1
 8005212:	600b      	str	r3, [r1, #0]
 8005214:	610b      	str	r3, [r1, #16]
 8005216:	614a      	str	r2, [r1, #20]
 8005218:	4770      	bx	lr
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <__smakebuf_r+0xdc>)
 800521c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800521e:	429a      	cmp	r2, r3
 8005220:	d1d0      	bne.n	80051c4 <__smakebuf_r+0x3c>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005228:	4333      	orrs	r3, r6
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	64e6      	str	r6, [r4, #76]	; 0x4c
 800522e:	e7dc      	b.n	80051ea <__smakebuf_r+0x62>
 8005230:	4628      	mov	r0, r5
 8005232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005236:	f000 fc13 	bl	8005a60 <_isatty_r>
 800523a:	2800      	cmp	r0, #0
 800523c:	d0e4      	beq.n	8005208 <__smakebuf_r+0x80>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	e7df      	b.n	8005208 <__smakebuf_r+0x80>
 8005248:	059a      	lsls	r2, r3, #22
 800524a:	d4dd      	bmi.n	8005208 <__smakebuf_r+0x80>
 800524c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	2101      	movs	r1, #1
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	6022      	str	r2, [r4, #0]
 800525a:	6122      	str	r2, [r4, #16]
 800525c:	6161      	str	r1, [r4, #20]
 800525e:	e7d3      	b.n	8005208 <__smakebuf_r+0x80>
 8005260:	08000f4d 	.word	0x08000f4d
 8005264:	080018ed 	.word	0x080018ed

08005268 <_Balloc>:
_Balloc():
 8005268:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800526a:	b570      	push	{r4, r5, r6, lr}
 800526c:	4605      	mov	r5, r0
 800526e:	460c      	mov	r4, r1
 8005270:	b14b      	cbz	r3, 8005286 <_Balloc+0x1e>
 8005272:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005276:	b180      	cbz	r0, 800529a <_Balloc+0x32>
 8005278:	6802      	ldr	r2, [r0, #0]
 800527a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800527e:	2300      	movs	r3, #0
 8005280:	6103      	str	r3, [r0, #16]
 8005282:	60c3      	str	r3, [r0, #12]
 8005284:	bd70      	pop	{r4, r5, r6, pc}
 8005286:	2221      	movs	r2, #33	; 0x21
 8005288:	2104      	movs	r1, #4
 800528a:	f000 fba5 	bl	80059d8 <_calloc_r>
 800528e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005290:	4603      	mov	r3, r0
 8005292:	2800      	cmp	r0, #0
 8005294:	d1ed      	bne.n	8005272 <_Balloc+0xa>
 8005296:	2000      	movs	r0, #0
 8005298:	bd70      	pop	{r4, r5, r6, pc}
 800529a:	2101      	movs	r1, #1
 800529c:	fa01 f604 	lsl.w	r6, r1, r4
 80052a0:	1d72      	adds	r2, r6, #5
 80052a2:	4628      	mov	r0, r5
 80052a4:	0092      	lsls	r2, r2, #2
 80052a6:	f000 fb97 	bl	80059d8 <_calloc_r>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d0f3      	beq.n	8005296 <_Balloc+0x2e>
 80052ae:	6044      	str	r4, [r0, #4]
 80052b0:	6086      	str	r6, [r0, #8]
 80052b2:	e7e4      	b.n	800527e <_Balloc+0x16>

080052b4 <_Bfree>:
_Bfree():
 80052b4:	b131      	cbz	r1, 80052c4 <_Bfree+0x10>
 80052b6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80052b8:	684a      	ldr	r2, [r1, #4]
 80052ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052be:	6008      	str	r0, [r1, #0]
 80052c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop

080052c8 <__multadd>:
__multadd():
 80052c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ca:	690c      	ldr	r4, [r1, #16]
 80052cc:	b083      	sub	sp, #12
 80052ce:	460d      	mov	r5, r1
 80052d0:	4606      	mov	r6, r0
 80052d2:	f101 0e14 	add.w	lr, r1, #20
 80052d6:	2700      	movs	r7, #0
 80052d8:	f8de 0000 	ldr.w	r0, [lr]
 80052dc:	b281      	uxth	r1, r0
 80052de:	fb02 3101 	mla	r1, r2, r1, r3
 80052e2:	0c0b      	lsrs	r3, r1, #16
 80052e4:	0c00      	lsrs	r0, r0, #16
 80052e6:	fb02 3300 	mla	r3, r2, r0, r3
 80052ea:	b289      	uxth	r1, r1
 80052ec:	3701      	adds	r7, #1
 80052ee:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80052f2:	42bc      	cmp	r4, r7
 80052f4:	f84e 1b04 	str.w	r1, [lr], #4
 80052f8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80052fc:	dcec      	bgt.n	80052d8 <__multadd+0x10>
 80052fe:	b13b      	cbz	r3, 8005310 <__multadd+0x48>
 8005300:	68aa      	ldr	r2, [r5, #8]
 8005302:	4294      	cmp	r4, r2
 8005304:	da07      	bge.n	8005316 <__multadd+0x4e>
 8005306:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800530a:	3401      	adds	r4, #1
 800530c:	6153      	str	r3, [r2, #20]
 800530e:	612c      	str	r4, [r5, #16]
 8005310:	4628      	mov	r0, r5
 8005312:	b003      	add	sp, #12
 8005314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005316:	6869      	ldr	r1, [r5, #4]
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	3101      	adds	r1, #1
 800531c:	4630      	mov	r0, r6
 800531e:	f7ff ffa3 	bl	8005268 <_Balloc>
 8005322:	692a      	ldr	r2, [r5, #16]
 8005324:	3202      	adds	r2, #2
 8005326:	f105 010c 	add.w	r1, r5, #12
 800532a:	4607      	mov	r7, r0
 800532c:	0092      	lsls	r2, r2, #2
 800532e:	300c      	adds	r0, #12
 8005330:	f7fc f976 	bl	8001620 <memcpy>
 8005334:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005336:	6869      	ldr	r1, [r5, #4]
 8005338:	9b01      	ldr	r3, [sp, #4]
 800533a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800533e:	6028      	str	r0, [r5, #0]
 8005340:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005344:	463d      	mov	r5, r7
 8005346:	e7de      	b.n	8005306 <__multadd+0x3e>

08005348 <__hi0bits>:
__hi0bits():
 8005348:	0c03      	lsrs	r3, r0, #16
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	b9b3      	cbnz	r3, 800537c <__hi0bits+0x34>
 800534e:	0400      	lsls	r0, r0, #16
 8005350:	2310      	movs	r3, #16
 8005352:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005356:	bf04      	itt	eq
 8005358:	0200      	lsleq	r0, r0, #8
 800535a:	3308      	addeq	r3, #8
 800535c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005360:	bf04      	itt	eq
 8005362:	0100      	lsleq	r0, r0, #4
 8005364:	3304      	addeq	r3, #4
 8005366:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800536a:	bf04      	itt	eq
 800536c:	0080      	lsleq	r0, r0, #2
 800536e:	3302      	addeq	r3, #2
 8005370:	2800      	cmp	r0, #0
 8005372:	db07      	blt.n	8005384 <__hi0bits+0x3c>
 8005374:	0042      	lsls	r2, r0, #1
 8005376:	d403      	bmi.n	8005380 <__hi0bits+0x38>
 8005378:	2020      	movs	r0, #32
 800537a:	4770      	bx	lr
 800537c:	2300      	movs	r3, #0
 800537e:	e7e8      	b.n	8005352 <__hi0bits+0xa>
 8005380:	1c58      	adds	r0, r3, #1
 8005382:	4770      	bx	lr
 8005384:	4618      	mov	r0, r3
 8005386:	4770      	bx	lr

08005388 <__lo0bits>:
__lo0bits():
 8005388:	6803      	ldr	r3, [r0, #0]
 800538a:	f013 0207 	ands.w	r2, r3, #7
 800538e:	d007      	beq.n	80053a0 <__lo0bits+0x18>
 8005390:	07d9      	lsls	r1, r3, #31
 8005392:	d420      	bmi.n	80053d6 <__lo0bits+0x4e>
 8005394:	079a      	lsls	r2, r3, #30
 8005396:	d420      	bmi.n	80053da <__lo0bits+0x52>
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	6003      	str	r3, [r0, #0]
 800539c:	2002      	movs	r0, #2
 800539e:	4770      	bx	lr
 80053a0:	b299      	uxth	r1, r3
 80053a2:	b909      	cbnz	r1, 80053a8 <__lo0bits+0x20>
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	2210      	movs	r2, #16
 80053a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80053ac:	bf04      	itt	eq
 80053ae:	0a1b      	lsreq	r3, r3, #8
 80053b0:	3208      	addeq	r2, #8
 80053b2:	0719      	lsls	r1, r3, #28
 80053b4:	bf04      	itt	eq
 80053b6:	091b      	lsreq	r3, r3, #4
 80053b8:	3204      	addeq	r2, #4
 80053ba:	0799      	lsls	r1, r3, #30
 80053bc:	bf04      	itt	eq
 80053be:	089b      	lsreq	r3, r3, #2
 80053c0:	3202      	addeq	r2, #2
 80053c2:	07d9      	lsls	r1, r3, #31
 80053c4:	d404      	bmi.n	80053d0 <__lo0bits+0x48>
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	d101      	bne.n	80053ce <__lo0bits+0x46>
 80053ca:	2020      	movs	r0, #32
 80053cc:	4770      	bx	lr
 80053ce:	3201      	adds	r2, #1
 80053d0:	6003      	str	r3, [r0, #0]
 80053d2:	4610      	mov	r0, r2
 80053d4:	4770      	bx	lr
 80053d6:	2000      	movs	r0, #0
 80053d8:	4770      	bx	lr
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	6003      	str	r3, [r0, #0]
 80053de:	2001      	movs	r0, #1
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <__i2b>:
__i2b():
 80053e4:	b510      	push	{r4, lr}
 80053e6:	460c      	mov	r4, r1
 80053e8:	2101      	movs	r1, #1
 80053ea:	f7ff ff3d 	bl	8005268 <_Balloc>
 80053ee:	2201      	movs	r2, #1
 80053f0:	6144      	str	r4, [r0, #20]
 80053f2:	6102      	str	r2, [r0, #16]
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	bf00      	nop

080053f8 <__multiply>:
__multiply():
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	690d      	ldr	r5, [r1, #16]
 80053fe:	6917      	ldr	r7, [r2, #16]
 8005400:	42bd      	cmp	r5, r7
 8005402:	b083      	sub	sp, #12
 8005404:	460c      	mov	r4, r1
 8005406:	4616      	mov	r6, r2
 8005408:	da04      	bge.n	8005414 <__multiply+0x1c>
 800540a:	462a      	mov	r2, r5
 800540c:	4634      	mov	r4, r6
 800540e:	463d      	mov	r5, r7
 8005410:	460e      	mov	r6, r1
 8005412:	4617      	mov	r7, r2
 8005414:	68a3      	ldr	r3, [r4, #8]
 8005416:	6861      	ldr	r1, [r4, #4]
 8005418:	eb05 0807 	add.w	r8, r5, r7
 800541c:	4598      	cmp	r8, r3
 800541e:	bfc8      	it	gt
 8005420:	3101      	addgt	r1, #1
 8005422:	f7ff ff21 	bl	8005268 <_Balloc>
 8005426:	f100 0c14 	add.w	ip, r0, #20
 800542a:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800542e:	45cc      	cmp	ip, r9
 8005430:	9000      	str	r0, [sp, #0]
 8005432:	d205      	bcs.n	8005440 <__multiply+0x48>
 8005434:	4663      	mov	r3, ip
 8005436:	2100      	movs	r1, #0
 8005438:	f843 1b04 	str.w	r1, [r3], #4
 800543c:	4599      	cmp	r9, r3
 800543e:	d8fb      	bhi.n	8005438 <__multiply+0x40>
 8005440:	f106 0214 	add.w	r2, r6, #20
 8005444:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8005448:	f104 0314 	add.w	r3, r4, #20
 800544c:	4552      	cmp	r2, sl
 800544e:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8005452:	d254      	bcs.n	80054fe <__multiply+0x106>
 8005454:	f8cd 9004 	str.w	r9, [sp, #4]
 8005458:	4699      	mov	r9, r3
 800545a:	f852 3b04 	ldr.w	r3, [r2], #4
 800545e:	fa1f fb83 	uxth.w	fp, r3
 8005462:	f1bb 0f00 	cmp.w	fp, #0
 8005466:	d020      	beq.n	80054aa <__multiply+0xb2>
 8005468:	2000      	movs	r0, #0
 800546a:	464f      	mov	r7, r9
 800546c:	4666      	mov	r6, ip
 800546e:	4605      	mov	r5, r0
 8005470:	e000      	b.n	8005474 <__multiply+0x7c>
 8005472:	461e      	mov	r6, r3
 8005474:	f857 4b04 	ldr.w	r4, [r7], #4
 8005478:	6830      	ldr	r0, [r6, #0]
 800547a:	b2a1      	uxth	r1, r4
 800547c:	b283      	uxth	r3, r0
 800547e:	fb0b 3101 	mla	r1, fp, r1, r3
 8005482:	0c24      	lsrs	r4, r4, #16
 8005484:	0c00      	lsrs	r0, r0, #16
 8005486:	194b      	adds	r3, r1, r5
 8005488:	fb0b 0004 	mla	r0, fp, r4, r0
 800548c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005490:	b299      	uxth	r1, r3
 8005492:	4633      	mov	r3, r6
 8005494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005498:	45be      	cmp	lr, r7
 800549a:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800549e:	f843 1b04 	str.w	r1, [r3], #4
 80054a2:	d8e6      	bhi.n	8005472 <__multiply+0x7a>
 80054a4:	6075      	str	r5, [r6, #4]
 80054a6:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80054aa:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 80054ae:	d020      	beq.n	80054f2 <__multiply+0xfa>
 80054b0:	f8dc 3000 	ldr.w	r3, [ip]
 80054b4:	4667      	mov	r7, ip
 80054b6:	4618      	mov	r0, r3
 80054b8:	464d      	mov	r5, r9
 80054ba:	2100      	movs	r1, #0
 80054bc:	e000      	b.n	80054c0 <__multiply+0xc8>
 80054be:	4637      	mov	r7, r6
 80054c0:	882c      	ldrh	r4, [r5, #0]
 80054c2:	0c00      	lsrs	r0, r0, #16
 80054c4:	fb0b 0004 	mla	r0, fp, r4, r0
 80054c8:	4401      	add	r1, r0
 80054ca:	b29c      	uxth	r4, r3
 80054cc:	463e      	mov	r6, r7
 80054ce:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 80054d2:	f846 3b04 	str.w	r3, [r6], #4
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f855 4b04 	ldr.w	r4, [r5], #4
 80054dc:	b283      	uxth	r3, r0
 80054de:	0c24      	lsrs	r4, r4, #16
 80054e0:	fb0b 3404 	mla	r4, fp, r4, r3
 80054e4:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 80054e8:	45ae      	cmp	lr, r5
 80054ea:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80054ee:	d8e6      	bhi.n	80054be <__multiply+0xc6>
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	4592      	cmp	sl, r2
 80054f4:	f10c 0c04 	add.w	ip, ip, #4
 80054f8:	d8af      	bhi.n	800545a <__multiply+0x62>
 80054fa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80054fe:	f1b8 0f00 	cmp.w	r8, #0
 8005502:	dd0b      	ble.n	800551c <__multiply+0x124>
 8005504:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8005508:	f1a9 0904 	sub.w	r9, r9, #4
 800550c:	b11b      	cbz	r3, 8005516 <__multiply+0x11e>
 800550e:	e005      	b.n	800551c <__multiply+0x124>
 8005510:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8005514:	b913      	cbnz	r3, 800551c <__multiply+0x124>
 8005516:	f1b8 0801 	subs.w	r8, r8, #1
 800551a:	d1f9      	bne.n	8005510 <__multiply+0x118>
 800551c:	9800      	ldr	r0, [sp, #0]
 800551e:	f8c0 8010 	str.w	r8, [r0, #16]
 8005522:	b003      	add	sp, #12
 8005524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005528 <__pow5mult>:
__pow5mult():
 8005528:	f012 0303 	ands.w	r3, r2, #3
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	4614      	mov	r4, r2
 8005532:	4607      	mov	r7, r0
 8005534:	d12e      	bne.n	8005594 <__pow5mult+0x6c>
 8005536:	460e      	mov	r6, r1
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	d01c      	beq.n	8005576 <__pow5mult+0x4e>
 800553c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800553e:	b395      	cbz	r5, 80055a6 <__pow5mult+0x7e>
 8005540:	07e3      	lsls	r3, r4, #31
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	d406      	bmi.n	8005556 <__pow5mult+0x2e>
 8005548:	1064      	asrs	r4, r4, #1
 800554a:	d014      	beq.n	8005576 <__pow5mult+0x4e>
 800554c:	6828      	ldr	r0, [r5, #0]
 800554e:	b1a8      	cbz	r0, 800557c <__pow5mult+0x54>
 8005550:	4605      	mov	r5, r0
 8005552:	07e3      	lsls	r3, r4, #31
 8005554:	d5f8      	bpl.n	8005548 <__pow5mult+0x20>
 8005556:	462a      	mov	r2, r5
 8005558:	4631      	mov	r1, r6
 800555a:	4638      	mov	r0, r7
 800555c:	f7ff ff4c 	bl	80053f8 <__multiply>
 8005560:	b1b6      	cbz	r6, 8005590 <__pow5mult+0x68>
 8005562:	6872      	ldr	r2, [r6, #4]
 8005564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005566:	1064      	asrs	r4, r4, #1
 8005568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800556c:	6031      	str	r1, [r6, #0]
 800556e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005572:	4606      	mov	r6, r0
 8005574:	d1ea      	bne.n	800554c <__pow5mult+0x24>
 8005576:	4630      	mov	r0, r6
 8005578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800557c:	462a      	mov	r2, r5
 800557e:	4629      	mov	r1, r5
 8005580:	4638      	mov	r0, r7
 8005582:	f7ff ff39 	bl	80053f8 <__multiply>
 8005586:	6028      	str	r0, [r5, #0]
 8005588:	f8c0 8000 	str.w	r8, [r0]
 800558c:	4605      	mov	r5, r0
 800558e:	e7e0      	b.n	8005552 <__pow5mult+0x2a>
 8005590:	4606      	mov	r6, r0
 8005592:	e7d9      	b.n	8005548 <__pow5mult+0x20>
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	4d0b      	ldr	r5, [pc, #44]	; (80055c4 <__pow5mult+0x9c>)
 8005598:	2300      	movs	r3, #0
 800559a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800559e:	f7ff fe93 	bl	80052c8 <__multadd>
 80055a2:	4606      	mov	r6, r0
 80055a4:	e7c8      	b.n	8005538 <__pow5mult+0x10>
 80055a6:	2101      	movs	r1, #1
 80055a8:	4638      	mov	r0, r7
 80055aa:	f7ff fe5d 	bl	8005268 <_Balloc>
 80055ae:	f240 2171 	movw	r1, #625	; 0x271
 80055b2:	2201      	movs	r2, #1
 80055b4:	2300      	movs	r3, #0
 80055b6:	6141      	str	r1, [r0, #20]
 80055b8:	6102      	str	r2, [r0, #16]
 80055ba:	4605      	mov	r5, r0
 80055bc:	64b8      	str	r0, [r7, #72]	; 0x48
 80055be:	6003      	str	r3, [r0, #0]
 80055c0:	e7be      	b.n	8005540 <__pow5mult+0x18>
 80055c2:	bf00      	nop
 80055c4:	0800697c 	.word	0x0800697c

080055c8 <__lshift>:
__lshift():
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	4691      	mov	r9, r2
 80055ce:	690a      	ldr	r2, [r1, #16]
 80055d0:	688b      	ldr	r3, [r1, #8]
 80055d2:	ea4f 1469 	mov.w	r4, r9, asr #5
 80055d6:	eb04 0802 	add.w	r8, r4, r2
 80055da:	f108 0501 	add.w	r5, r8, #1
 80055de:	429d      	cmp	r5, r3
 80055e0:	460e      	mov	r6, r1
 80055e2:	4682      	mov	sl, r0
 80055e4:	6849      	ldr	r1, [r1, #4]
 80055e6:	dd04      	ble.n	80055f2 <__lshift+0x2a>
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	429d      	cmp	r5, r3
 80055ec:	f101 0101 	add.w	r1, r1, #1
 80055f0:	dcfa      	bgt.n	80055e8 <__lshift+0x20>
 80055f2:	4650      	mov	r0, sl
 80055f4:	f7ff fe38 	bl	8005268 <_Balloc>
 80055f8:	2c00      	cmp	r4, #0
 80055fa:	f100 0214 	add.w	r2, r0, #20
 80055fe:	dd38      	ble.n	8005672 <__lshift+0xaa>
 8005600:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8005604:	2100      	movs	r1, #0
 8005606:	f842 1b04 	str.w	r1, [r2], #4
 800560a:	4293      	cmp	r3, r2
 800560c:	d1fb      	bne.n	8005606 <__lshift+0x3e>
 800560e:	6934      	ldr	r4, [r6, #16]
 8005610:	f106 0114 	add.w	r1, r6, #20
 8005614:	f019 091f 	ands.w	r9, r9, #31
 8005618:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800561c:	d021      	beq.n	8005662 <__lshift+0x9a>
 800561e:	f1c9 0220 	rsb	r2, r9, #32
 8005622:	2400      	movs	r4, #0
 8005624:	680f      	ldr	r7, [r1, #0]
 8005626:	fa07 fc09 	lsl.w	ip, r7, r9
 800562a:	ea4c 0404 	orr.w	r4, ip, r4
 800562e:	469c      	mov	ip, r3
 8005630:	f843 4b04 	str.w	r4, [r3], #4
 8005634:	f851 4b04 	ldr.w	r4, [r1], #4
 8005638:	458e      	cmp	lr, r1
 800563a:	fa24 f402 	lsr.w	r4, r4, r2
 800563e:	d8f1      	bhi.n	8005624 <__lshift+0x5c>
 8005640:	f8cc 4004 	str.w	r4, [ip, #4]
 8005644:	b10c      	cbz	r4, 800564a <__lshift+0x82>
 8005646:	f108 0502 	add.w	r5, r8, #2
 800564a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800564e:	6872      	ldr	r2, [r6, #4]
 8005650:	3d01      	subs	r5, #1
 8005652:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005656:	6105      	str	r5, [r0, #16]
 8005658:	6031      	str	r1, [r6, #0]
 800565a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005662:	3b04      	subs	r3, #4
 8005664:	f851 2b04 	ldr.w	r2, [r1], #4
 8005668:	f843 2f04 	str.w	r2, [r3, #4]!
 800566c:	458e      	cmp	lr, r1
 800566e:	d8f9      	bhi.n	8005664 <__lshift+0x9c>
 8005670:	e7eb      	b.n	800564a <__lshift+0x82>
 8005672:	4613      	mov	r3, r2
 8005674:	e7cb      	b.n	800560e <__lshift+0x46>
 8005676:	bf00      	nop

08005678 <__mcmp>:
__mcmp():
 8005678:	6902      	ldr	r2, [r0, #16]
 800567a:	690b      	ldr	r3, [r1, #16]
 800567c:	1ad2      	subs	r2, r2, r3
 800567e:	d112      	bne.n	80056a6 <__mcmp+0x2e>
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	3014      	adds	r0, #20
 8005684:	3114      	adds	r1, #20
 8005686:	4419      	add	r1, r3
 8005688:	b410      	push	{r4}
 800568a:	4403      	add	r3, r0
 800568c:	e001      	b.n	8005692 <__mcmp+0x1a>
 800568e:	4298      	cmp	r0, r3
 8005690:	d20b      	bcs.n	80056aa <__mcmp+0x32>
 8005692:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005696:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800569a:	4294      	cmp	r4, r2
 800569c:	d0f7      	beq.n	800568e <__mcmp+0x16>
 800569e:	d307      	bcc.n	80056b0 <__mcmp+0x38>
 80056a0:	2001      	movs	r0, #1
 80056a2:	bc10      	pop	{r4}
 80056a4:	4770      	bx	lr
 80056a6:	4610      	mov	r0, r2
 80056a8:	4770      	bx	lr
 80056aa:	2000      	movs	r0, #0
 80056ac:	bc10      	pop	{r4}
 80056ae:	4770      	bx	lr
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b4:	e7f5      	b.n	80056a2 <__mcmp+0x2a>
 80056b6:	bf00      	nop

080056b8 <__mdiff>:
__mdiff():
 80056b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056bc:	690b      	ldr	r3, [r1, #16]
 80056be:	460f      	mov	r7, r1
 80056c0:	6911      	ldr	r1, [r2, #16]
 80056c2:	1a5b      	subs	r3, r3, r1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	4690      	mov	r8, r2
 80056c8:	d117      	bne.n	80056fa <__mdiff+0x42>
 80056ca:	0089      	lsls	r1, r1, #2
 80056cc:	f107 0214 	add.w	r2, r7, #20
 80056d0:	f108 0514 	add.w	r5, r8, #20
 80056d4:	1853      	adds	r3, r2, r1
 80056d6:	4429      	add	r1, r5
 80056d8:	e001      	b.n	80056de <__mdiff+0x26>
 80056da:	429a      	cmp	r2, r3
 80056dc:	d25e      	bcs.n	800579c <__mdiff+0xe4>
 80056de:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 80056e2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d0f7      	beq.n	80056da <__mdiff+0x22>
 80056ea:	d260      	bcs.n	80057ae <__mdiff+0xf6>
 80056ec:	463b      	mov	r3, r7
 80056ee:	4614      	mov	r4, r2
 80056f0:	4647      	mov	r7, r8
 80056f2:	f04f 0901 	mov.w	r9, #1
 80056f6:	4698      	mov	r8, r3
 80056f8:	e006      	b.n	8005708 <__mdiff+0x50>
 80056fa:	db5d      	blt.n	80057b8 <__mdiff+0x100>
 80056fc:	f107 0514 	add.w	r5, r7, #20
 8005700:	f102 0414 	add.w	r4, r2, #20
 8005704:	f04f 0900 	mov.w	r9, #0
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	f7ff fdad 	bl	8005268 <_Balloc>
 800570e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005712:	693e      	ldr	r6, [r7, #16]
 8005714:	f8c0 900c 	str.w	r9, [r0, #12]
 8005718:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800571c:	46a6      	mov	lr, r4
 800571e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8005722:	f100 0414 	add.w	r4, r0, #20
 8005726:	2300      	movs	r3, #0
 8005728:	f85e 1b04 	ldr.w	r1, [lr], #4
 800572c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005730:	b28a      	uxth	r2, r1
 8005732:	fa13 f388 	uxtah	r3, r3, r8
 8005736:	0c09      	lsrs	r1, r1, #16
 8005738:	1a9a      	subs	r2, r3, r2
 800573a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800573e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005742:	b292      	uxth	r2, r2
 8005744:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005748:	45f4      	cmp	ip, lr
 800574a:	f844 2b04 	str.w	r2, [r4], #4
 800574e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005752:	d8e9      	bhi.n	8005728 <__mdiff+0x70>
 8005754:	42af      	cmp	r7, r5
 8005756:	d917      	bls.n	8005788 <__mdiff+0xd0>
 8005758:	46a4      	mov	ip, r4
 800575a:	4629      	mov	r1, r5
 800575c:	f851 eb04 	ldr.w	lr, [r1], #4
 8005760:	fa13 f28e 	uxtah	r2, r3, lr
 8005764:	1413      	asrs	r3, r2, #16
 8005766:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800576a:	b292      	uxth	r2, r2
 800576c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005770:	428f      	cmp	r7, r1
 8005772:	f84c 2b04 	str.w	r2, [ip], #4
 8005776:	ea4f 4323 	mov.w	r3, r3, asr #16
 800577a:	d8ef      	bhi.n	800575c <__mdiff+0xa4>
 800577c:	43ed      	mvns	r5, r5
 800577e:	443d      	add	r5, r7
 8005780:	f025 0503 	bic.w	r5, r5, #3
 8005784:	3504      	adds	r5, #4
 8005786:	442c      	add	r4, r5
 8005788:	3c04      	subs	r4, #4
 800578a:	b922      	cbnz	r2, 8005796 <__mdiff+0xde>
 800578c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8005790:	3e01      	subs	r6, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0fa      	beq.n	800578c <__mdiff+0xd4>
 8005796:	6106      	str	r6, [r0, #16]
 8005798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800579c:	2100      	movs	r1, #0
 800579e:	f7ff fd63 	bl	8005268 <_Balloc>
 80057a2:	2201      	movs	r2, #1
 80057a4:	2300      	movs	r3, #0
 80057a6:	6102      	str	r2, [r0, #16]
 80057a8:	6143      	str	r3, [r0, #20]
 80057aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ae:	462c      	mov	r4, r5
 80057b0:	f04f 0900 	mov.w	r9, #0
 80057b4:	4615      	mov	r5, r2
 80057b6:	e7a7      	b.n	8005708 <__mdiff+0x50>
 80057b8:	463b      	mov	r3, r7
 80057ba:	f107 0414 	add.w	r4, r7, #20
 80057be:	f108 0514 	add.w	r5, r8, #20
 80057c2:	4647      	mov	r7, r8
 80057c4:	f04f 0901 	mov.w	r9, #1
 80057c8:	4698      	mov	r8, r3
 80057ca:	e79d      	b.n	8005708 <__mdiff+0x50>

080057cc <__d2b>:
__d2b():
 80057cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	2101      	movs	r1, #1
 80057d4:	461c      	mov	r4, r3
 80057d6:	f3c3 570a 	ubfx	r7, r3, #20, #11
 80057da:	4615      	mov	r5, r2
 80057dc:	9e08      	ldr	r6, [sp, #32]
 80057de:	f7ff fd43 	bl	8005268 <_Balloc>
 80057e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80057e6:	4680      	mov	r8, r0
 80057e8:	b10f      	cbz	r7, 80057ee <__d2b+0x22>
 80057ea:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80057ee:	9401      	str	r4, [sp, #4]
 80057f0:	b31d      	cbz	r5, 800583a <__d2b+0x6e>
 80057f2:	a802      	add	r0, sp, #8
 80057f4:	f840 5d08 	str.w	r5, [r0, #-8]!
 80057f8:	f7ff fdc6 	bl	8005388 <__lo0bits>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d134      	bne.n	800586a <__d2b+0x9e>
 8005800:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8005804:	f8c8 2014 	str.w	r2, [r8, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2101      	moveq	r1, #1
 800580e:	2102      	movne	r1, #2
 8005810:	f8c8 3018 	str.w	r3, [r8, #24]
 8005814:	f8c8 1010 	str.w	r1, [r8, #16]
 8005818:	b9df      	cbnz	r7, 8005852 <__d2b+0x86>
 800581a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 800581e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005822:	6030      	str	r0, [r6, #0]
 8005824:	6918      	ldr	r0, [r3, #16]
 8005826:	f7ff fd8f 	bl	8005348 <__hi0bits>
 800582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005830:	6018      	str	r0, [r3, #0]
 8005832:	4640      	mov	r0, r8
 8005834:	b002      	add	sp, #8
 8005836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583a:	a801      	add	r0, sp, #4
 800583c:	f7ff fda4 	bl	8005388 <__lo0bits>
 8005840:	9b01      	ldr	r3, [sp, #4]
 8005842:	f8c8 3014 	str.w	r3, [r8, #20]
 8005846:	2101      	movs	r1, #1
 8005848:	3020      	adds	r0, #32
 800584a:	f8c8 1010 	str.w	r1, [r8, #16]
 800584e:	2f00      	cmp	r7, #0
 8005850:	d0e3      	beq.n	800581a <__d2b+0x4e>
 8005852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005854:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8005858:	4407      	add	r7, r0
 800585a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800585e:	6037      	str	r7, [r6, #0]
 8005860:	6018      	str	r0, [r3, #0]
 8005862:	4640      	mov	r0, r8
 8005864:	b002      	add	sp, #8
 8005866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800586a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800586e:	f1c0 0120 	rsb	r1, r0, #32
 8005872:	fa03 f101 	lsl.w	r1, r3, r1
 8005876:	430a      	orrs	r2, r1
 8005878:	40c3      	lsrs	r3, r0
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	f8c8 2014 	str.w	r2, [r8, #20]
 8005880:	e7c2      	b.n	8005808 <__d2b+0x3c>
 8005882:	bf00      	nop

08005884 <__fpclassifyd>:
__fpclassifyd():
 8005884:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005888:	b410      	push	{r4}
 800588a:	d007      	beq.n	800589c <__fpclassifyd+0x18>
 800588c:	4a10      	ldr	r2, [pc, #64]	; (80058d0 <__fpclassifyd+0x4c>)
 800588e:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8005892:	4294      	cmp	r4, r2
 8005894:	d806      	bhi.n	80058a4 <__fpclassifyd+0x20>
 8005896:	2004      	movs	r0, #4
 8005898:	bc10      	pop	{r4}
 800589a:	4770      	bx	lr
 800589c:	b910      	cbnz	r0, 80058a4 <__fpclassifyd+0x20>
 800589e:	2002      	movs	r0, #2
 80058a0:	bc10      	pop	{r4}
 80058a2:	4770      	bx	lr
 80058a4:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <__fpclassifyd+0x4c>)
 80058aa:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 80058ae:	4291      	cmp	r1, r2
 80058b0:	d9f1      	bls.n	8005896 <__fpclassifyd+0x12>
 80058b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b6:	d201      	bcs.n	80058bc <__fpclassifyd+0x38>
 80058b8:	2003      	movs	r0, #3
 80058ba:	e7ed      	b.n	8005898 <__fpclassifyd+0x14>
 80058bc:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <__fpclassifyd+0x50>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d001      	beq.n	80058c6 <__fpclassifyd+0x42>
 80058c2:	2000      	movs	r0, #0
 80058c4:	e7e8      	b.n	8005898 <__fpclassifyd+0x14>
 80058c6:	fab0 f080 	clz	r0, r0
 80058ca:	0940      	lsrs	r0, r0, #5
 80058cc:	e7e4      	b.n	8005898 <__fpclassifyd+0x14>
 80058ce:	bf00      	nop
 80058d0:	7fdfffff 	.word	0x7fdfffff
 80058d4:	7ff00000 	.word	0x7ff00000

080058d8 <__ssprint_r>:
__ssprint_r():
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	6893      	ldr	r3, [r2, #8]
 80058de:	b083      	sub	sp, #12
 80058e0:	4690      	mov	r8, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d072      	beq.n	80059cc <__ssprint_r+0xf4>
 80058e6:	4683      	mov	fp, r0
 80058e8:	f04f 0900 	mov.w	r9, #0
 80058ec:	6816      	ldr	r6, [r2, #0]
 80058ee:	6808      	ldr	r0, [r1, #0]
 80058f0:	688b      	ldr	r3, [r1, #8]
 80058f2:	460d      	mov	r5, r1
 80058f4:	464c      	mov	r4, r9
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	d045      	beq.n	8005986 <__ssprint_r+0xae>
 80058fa:	429c      	cmp	r4, r3
 80058fc:	461f      	mov	r7, r3
 80058fe:	469a      	mov	sl, r3
 8005900:	d346      	bcc.n	8005990 <__ssprint_r+0xb8>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8005908:	d02d      	beq.n	8005966 <__ssprint_r+0x8e>
 800590a:	696f      	ldr	r7, [r5, #20]
 800590c:	6929      	ldr	r1, [r5, #16]
 800590e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005912:	ebc1 0a00 	rsb	sl, r1, r0
 8005916:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800591a:	1c60      	adds	r0, r4, #1
 800591c:	107f      	asrs	r7, r7, #1
 800591e:	4450      	add	r0, sl
 8005920:	42b8      	cmp	r0, r7
 8005922:	463a      	mov	r2, r7
 8005924:	bf84      	itt	hi
 8005926:	4607      	movhi	r7, r0
 8005928:	463a      	movhi	r2, r7
 800592a:	055b      	lsls	r3, r3, #21
 800592c:	d533      	bpl.n	8005996 <__ssprint_r+0xbe>
 800592e:	4611      	mov	r1, r2
 8005930:	4658      	mov	r0, fp
 8005932:	f7fb fbbd 	bl	80010b0 <_malloc_r>
 8005936:	2800      	cmp	r0, #0
 8005938:	d037      	beq.n	80059aa <__ssprint_r+0xd2>
 800593a:	4652      	mov	r2, sl
 800593c:	6929      	ldr	r1, [r5, #16]
 800593e:	9001      	str	r0, [sp, #4]
 8005940:	f7fb fe6e 	bl	8001620 <memcpy>
 8005944:	89aa      	ldrh	r2, [r5, #12]
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800594c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005950:	81aa      	strh	r2, [r5, #12]
 8005952:	ebca 0207 	rsb	r2, sl, r7
 8005956:	eb03 000a 	add.w	r0, r3, sl
 800595a:	616f      	str	r7, [r5, #20]
 800595c:	612b      	str	r3, [r5, #16]
 800595e:	6028      	str	r0, [r5, #0]
 8005960:	60aa      	str	r2, [r5, #8]
 8005962:	4627      	mov	r7, r4
 8005964:	46a2      	mov	sl, r4
 8005966:	4652      	mov	r2, sl
 8005968:	4649      	mov	r1, r9
 800596a:	f7fc fe41 	bl	80025f0 <memmove>
 800596e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005972:	68ab      	ldr	r3, [r5, #8]
 8005974:	6828      	ldr	r0, [r5, #0]
 8005976:	1bdb      	subs	r3, r3, r7
 8005978:	4450      	add	r0, sl
 800597a:	1b14      	subs	r4, r2, r4
 800597c:	60ab      	str	r3, [r5, #8]
 800597e:	6028      	str	r0, [r5, #0]
 8005980:	f8c8 4008 	str.w	r4, [r8, #8]
 8005984:	b314      	cbz	r4, 80059cc <__ssprint_r+0xf4>
 8005986:	f8d6 9000 	ldr.w	r9, [r6]
 800598a:	6874      	ldr	r4, [r6, #4]
 800598c:	3608      	adds	r6, #8
 800598e:	e7b2      	b.n	80058f6 <__ssprint_r+0x1e>
 8005990:	4627      	mov	r7, r4
 8005992:	46a2      	mov	sl, r4
 8005994:	e7e7      	b.n	8005966 <__ssprint_r+0x8e>
 8005996:	4658      	mov	r0, fp
 8005998:	f7fc fea4 	bl	80026e4 <_realloc_r>
 800599c:	4603      	mov	r3, r0
 800599e:	2800      	cmp	r0, #0
 80059a0:	d1d7      	bne.n	8005952 <__ssprint_r+0x7a>
 80059a2:	6929      	ldr	r1, [r5, #16]
 80059a4:	4658      	mov	r0, fp
 80059a6:	f7fc fb55 	bl	8002054 <_free_r>
 80059aa:	230c      	movs	r3, #12
 80059ac:	f8cb 3000 	str.w	r3, [fp]
 80059b0:	89ab      	ldrh	r3, [r5, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059bc:	81ab      	strh	r3, [r5, #12]
 80059be:	f8c8 2008 	str.w	r2, [r8, #8]
 80059c2:	f8c8 2004 	str.w	r2, [r8, #4]
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	2000      	movs	r0, #0
 80059ce:	f8c8 0004 	str.w	r0, [r8, #4]
 80059d2:	b003      	add	sp, #12
 80059d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059d8 <_calloc_r>:
_calloc_r():
 80059d8:	b510      	push	{r4, lr}
 80059da:	fb02 f101 	mul.w	r1, r2, r1
 80059de:	f7fb fb67 	bl	80010b0 <_malloc_r>
 80059e2:	4604      	mov	r4, r0
 80059e4:	b1d8      	cbz	r0, 8005a1e <_calloc_r+0x46>
 80059e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80059ea:	f022 0203 	bic.w	r2, r2, #3
 80059ee:	3a04      	subs	r2, #4
 80059f0:	2a24      	cmp	r2, #36	; 0x24
 80059f2:	d818      	bhi.n	8005a26 <_calloc_r+0x4e>
 80059f4:	2a13      	cmp	r2, #19
 80059f6:	d914      	bls.n	8005a22 <_calloc_r+0x4a>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2a1b      	cmp	r2, #27
 80059fc:	6003      	str	r3, [r0, #0]
 80059fe:	6043      	str	r3, [r0, #4]
 8005a00:	d916      	bls.n	8005a30 <_calloc_r+0x58>
 8005a02:	2a24      	cmp	r2, #36	; 0x24
 8005a04:	6083      	str	r3, [r0, #8]
 8005a06:	60c3      	str	r3, [r0, #12]
 8005a08:	bf11      	iteee	ne
 8005a0a:	f100 0210 	addne.w	r2, r0, #16
 8005a0e:	6103      	streq	r3, [r0, #16]
 8005a10:	6143      	streq	r3, [r0, #20]
 8005a12:	f100 0218 	addeq.w	r2, r0, #24
 8005a16:	2300      	movs	r3, #0
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	6053      	str	r3, [r2, #4]
 8005a1c:	6093      	str	r3, [r2, #8]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	4602      	mov	r2, r0
 8005a24:	e7f7      	b.n	8005a16 <_calloc_r+0x3e>
 8005a26:	2100      	movs	r1, #0
 8005a28:	f7fb fe94 	bl	8001754 <memset>
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	bd10      	pop	{r4, pc}
 8005a30:	f100 0208 	add.w	r2, r0, #8
 8005a34:	e7ef      	b.n	8005a16 <_calloc_r+0x3e>
 8005a36:	bf00      	nop

08005a38 <_fstat_r>:
_fstat_r():
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4c07      	ldr	r4, [pc, #28]	; (8005a5c <_fstat_r+0x24>)
 8005a3e:	4605      	mov	r5, r0
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	2300      	movs	r3, #0
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	f7fa ff26 	bl	8000898 <_fstat>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d000      	beq.n	8005a52 <_fstat_r+0x1a>
 8005a50:	bd38      	pop	{r3, r4, r5, pc}
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0fb      	beq.n	8005a50 <_fstat_r+0x18>
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	20000b2c 	.word	0x20000b2c

08005a60 <_isatty_r>:
_isatty_r():
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4c07      	ldr	r4, [pc, #28]	; (8005a80 <_isatty_r+0x20>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4605      	mov	r5, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	f7fa ff22 	bl	80008b4 <_isatty>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d000      	beq.n	8005a76 <_isatty_r+0x16>
 8005a74:	bd38      	pop	{r3, r4, r5, pc}
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0fb      	beq.n	8005a74 <_isatty_r+0x14>
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	20000b2c 	.word	0x20000b2c

08005a84 <__aeabi_drsub>:
__aeabi_drsub():
 8005a84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005a88:	e002      	b.n	8005a90 <__adddf3>
 8005a8a:	bf00      	nop

08005a8c <__aeabi_dsub>:
__subdf3():
 8005a8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005a90 <__adddf3>:
__aeabi_dadd():
 8005a90:	b530      	push	{r4, r5, lr}
 8005a92:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005a96:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005a9a:	ea94 0f05 	teq	r4, r5
 8005a9e:	bf08      	it	eq
 8005aa0:	ea90 0f02 	teqeq	r0, r2
 8005aa4:	bf1f      	itttt	ne
 8005aa6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005aaa:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005aae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005ab2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005ab6:	f000 80e2 	beq.w	8005c7e <__adddf3+0x1ee>
 8005aba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005abe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005ac2:	bfb8      	it	lt
 8005ac4:	426d      	neglt	r5, r5
 8005ac6:	dd0c      	ble.n	8005ae2 <__adddf3+0x52>
 8005ac8:	442c      	add	r4, r5
 8005aca:	ea80 0202 	eor.w	r2, r0, r2
 8005ace:	ea81 0303 	eor.w	r3, r1, r3
 8005ad2:	ea82 0000 	eor.w	r0, r2, r0
 8005ad6:	ea83 0101 	eor.w	r1, r3, r1
 8005ada:	ea80 0202 	eor.w	r2, r0, r2
 8005ade:	ea81 0303 	eor.w	r3, r1, r3
 8005ae2:	2d36      	cmp	r5, #54	; 0x36
 8005ae4:	bf88      	it	hi
 8005ae6:	bd30      	pophi	{r4, r5, pc}
 8005ae8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005aec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005af0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005af4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005af8:	d002      	beq.n	8005b00 <__adddf3+0x70>
 8005afa:	4240      	negs	r0, r0
 8005afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005b00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005b04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005b08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005b0c:	d002      	beq.n	8005b14 <__adddf3+0x84>
 8005b0e:	4252      	negs	r2, r2
 8005b10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005b14:	ea94 0f05 	teq	r4, r5
 8005b18:	f000 80a7 	beq.w	8005c6a <__adddf3+0x1da>
 8005b1c:	f1a4 0401 	sub.w	r4, r4, #1
 8005b20:	f1d5 0e20 	rsbs	lr, r5, #32
 8005b24:	db0d      	blt.n	8005b42 <__adddf3+0xb2>
 8005b26:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005b2a:	fa22 f205 	lsr.w	r2, r2, r5
 8005b2e:	1880      	adds	r0, r0, r2
 8005b30:	f141 0100 	adc.w	r1, r1, #0
 8005b34:	fa03 f20e 	lsl.w	r2, r3, lr
 8005b38:	1880      	adds	r0, r0, r2
 8005b3a:	fa43 f305 	asr.w	r3, r3, r5
 8005b3e:	4159      	adcs	r1, r3
 8005b40:	e00e      	b.n	8005b60 <__adddf3+0xd0>
 8005b42:	f1a5 0520 	sub.w	r5, r5, #32
 8005b46:	f10e 0e20 	add.w	lr, lr, #32
 8005b4a:	2a01      	cmp	r2, #1
 8005b4c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005b50:	bf28      	it	cs
 8005b52:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005b56:	fa43 f305 	asr.w	r3, r3, r5
 8005b5a:	18c0      	adds	r0, r0, r3
 8005b5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005b60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005b64:	d507      	bpl.n	8005b76 <__adddf3+0xe6>
 8005b66:	f04f 0e00 	mov.w	lr, #0
 8005b6a:	f1dc 0c00 	rsbs	ip, ip, #0
 8005b6e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005b72:	eb6e 0101 	sbc.w	r1, lr, r1
 8005b76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005b7a:	d31b      	bcc.n	8005bb4 <__adddf3+0x124>
 8005b7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005b80:	d30c      	bcc.n	8005b9c <__adddf3+0x10c>
 8005b82:	0849      	lsrs	r1, r1, #1
 8005b84:	ea5f 0030 	movs.w	r0, r0, rrx
 8005b88:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005b8c:	f104 0401 	add.w	r4, r4, #1
 8005b90:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005b94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005b98:	f080 809a 	bcs.w	8005cd0 <__adddf3+0x240>
 8005b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005ba0:	bf08      	it	eq
 8005ba2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005ba6:	f150 0000 	adcs.w	r0, r0, #0
 8005baa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005bae:	ea41 0105 	orr.w	r1, r1, r5
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005bb8:	4140      	adcs	r0, r0
 8005bba:	eb41 0101 	adc.w	r1, r1, r1
 8005bbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005bc2:	f1a4 0401 	sub.w	r4, r4, #1
 8005bc6:	d1e9      	bne.n	8005b9c <__adddf3+0x10c>
 8005bc8:	f091 0f00 	teq	r1, #0
 8005bcc:	bf04      	itt	eq
 8005bce:	4601      	moveq	r1, r0
 8005bd0:	2000      	moveq	r0, #0
 8005bd2:	fab1 f381 	clz	r3, r1
 8005bd6:	bf08      	it	eq
 8005bd8:	3320      	addeq	r3, #32
 8005bda:	f1a3 030b 	sub.w	r3, r3, #11
 8005bde:	f1b3 0220 	subs.w	r2, r3, #32
 8005be2:	da0c      	bge.n	8005bfe <__adddf3+0x16e>
 8005be4:	320c      	adds	r2, #12
 8005be6:	dd08      	ble.n	8005bfa <__adddf3+0x16a>
 8005be8:	f102 0c14 	add.w	ip, r2, #20
 8005bec:	f1c2 020c 	rsb	r2, r2, #12
 8005bf0:	fa01 f00c 	lsl.w	r0, r1, ip
 8005bf4:	fa21 f102 	lsr.w	r1, r1, r2
 8005bf8:	e00c      	b.n	8005c14 <__adddf3+0x184>
 8005bfa:	f102 0214 	add.w	r2, r2, #20
 8005bfe:	bfd8      	it	le
 8005c00:	f1c2 0c20 	rsble	ip, r2, #32
 8005c04:	fa01 f102 	lsl.w	r1, r1, r2
 8005c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005c0c:	bfdc      	itt	le
 8005c0e:	ea41 010c 	orrle.w	r1, r1, ip
 8005c12:	4090      	lslle	r0, r2
 8005c14:	1ae4      	subs	r4, r4, r3
 8005c16:	bfa2      	ittt	ge
 8005c18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005c1c:	4329      	orrge	r1, r5
 8005c1e:	bd30      	popge	{r4, r5, pc}
 8005c20:	ea6f 0404 	mvn.w	r4, r4
 8005c24:	3c1f      	subs	r4, #31
 8005c26:	da1c      	bge.n	8005c62 <__adddf3+0x1d2>
 8005c28:	340c      	adds	r4, #12
 8005c2a:	dc0e      	bgt.n	8005c4a <__adddf3+0x1ba>
 8005c2c:	f104 0414 	add.w	r4, r4, #20
 8005c30:	f1c4 0220 	rsb	r2, r4, #32
 8005c34:	fa20 f004 	lsr.w	r0, r0, r4
 8005c38:	fa01 f302 	lsl.w	r3, r1, r2
 8005c3c:	ea40 0003 	orr.w	r0, r0, r3
 8005c40:	fa21 f304 	lsr.w	r3, r1, r4
 8005c44:	ea45 0103 	orr.w	r1, r5, r3
 8005c48:	bd30      	pop	{r4, r5, pc}
 8005c4a:	f1c4 040c 	rsb	r4, r4, #12
 8005c4e:	f1c4 0220 	rsb	r2, r4, #32
 8005c52:	fa20 f002 	lsr.w	r0, r0, r2
 8005c56:	fa01 f304 	lsl.w	r3, r1, r4
 8005c5a:	ea40 0003 	orr.w	r0, r0, r3
 8005c5e:	4629      	mov	r1, r5
 8005c60:	bd30      	pop	{r4, r5, pc}
 8005c62:	fa21 f004 	lsr.w	r0, r1, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	bd30      	pop	{r4, r5, pc}
 8005c6a:	f094 0f00 	teq	r4, #0
 8005c6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005c72:	bf06      	itte	eq
 8005c74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005c78:	3401      	addeq	r4, #1
 8005c7a:	3d01      	subne	r5, #1
 8005c7c:	e74e      	b.n	8005b1c <__adddf3+0x8c>
 8005c7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005c82:	bf18      	it	ne
 8005c84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005c88:	d029      	beq.n	8005cde <__adddf3+0x24e>
 8005c8a:	ea94 0f05 	teq	r4, r5
 8005c8e:	bf08      	it	eq
 8005c90:	ea90 0f02 	teqeq	r0, r2
 8005c94:	d005      	beq.n	8005ca2 <__adddf3+0x212>
 8005c96:	ea54 0c00 	orrs.w	ip, r4, r0
 8005c9a:	bf04      	itt	eq
 8005c9c:	4619      	moveq	r1, r3
 8005c9e:	4610      	moveq	r0, r2
 8005ca0:	bd30      	pop	{r4, r5, pc}
 8005ca2:	ea91 0f03 	teq	r1, r3
 8005ca6:	bf1e      	ittt	ne
 8005ca8:	2100      	movne	r1, #0
 8005caa:	2000      	movne	r0, #0
 8005cac:	bd30      	popne	{r4, r5, pc}
 8005cae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005cb2:	d105      	bne.n	8005cc0 <__adddf3+0x230>
 8005cb4:	0040      	lsls	r0, r0, #1
 8005cb6:	4149      	adcs	r1, r1
 8005cb8:	bf28      	it	cs
 8005cba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005cbe:	bd30      	pop	{r4, r5, pc}
 8005cc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005cc4:	bf3c      	itt	cc
 8005cc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005cca:	bd30      	popcc	{r4, r5, pc}
 8005ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005cd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005cd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cd8:	f04f 0000 	mov.w	r0, #0
 8005cdc:	bd30      	pop	{r4, r5, pc}
 8005cde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005ce2:	bf1a      	itte	ne
 8005ce4:	4619      	movne	r1, r3
 8005ce6:	4610      	movne	r0, r2
 8005ce8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005cec:	bf1c      	itt	ne
 8005cee:	460b      	movne	r3, r1
 8005cf0:	4602      	movne	r2, r0
 8005cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005cf6:	bf06      	itte	eq
 8005cf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005cfc:	ea91 0f03 	teqeq	r1, r3
 8005d00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005d04:	bd30      	pop	{r4, r5, pc}
 8005d06:	bf00      	nop

08005d08 <__aeabi_ui2d>:
__floatunsidf():
 8005d08:	f090 0f00 	teq	r0, #0
 8005d0c:	bf04      	itt	eq
 8005d0e:	2100      	moveq	r1, #0
 8005d10:	4770      	bxeq	lr
 8005d12:	b530      	push	{r4, r5, lr}
 8005d14:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005d18:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005d1c:	f04f 0500 	mov.w	r5, #0
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	e750      	b.n	8005bc8 <__adddf3+0x138>
 8005d26:	bf00      	nop

08005d28 <__aeabi_i2d>:
__aeabi_i2d():
 8005d28:	f090 0f00 	teq	r0, #0
 8005d2c:	bf04      	itt	eq
 8005d2e:	2100      	moveq	r1, #0
 8005d30:	4770      	bxeq	lr
 8005d32:	b530      	push	{r4, r5, lr}
 8005d34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005d38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005d3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005d40:	bf48      	it	mi
 8005d42:	4240      	negmi	r0, r0
 8005d44:	f04f 0100 	mov.w	r1, #0
 8005d48:	e73e      	b.n	8005bc8 <__adddf3+0x138>
 8005d4a:	bf00      	nop

08005d4c <__aeabi_f2d>:
__aeabi_f2d():
 8005d4c:	0042      	lsls	r2, r0, #1
 8005d4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005d52:	ea4f 0131 	mov.w	r1, r1, rrx
 8005d56:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005d5a:	bf1f      	itttt	ne
 8005d5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005d60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005d64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005d68:	4770      	bxne	lr
 8005d6a:	f092 0f00 	teq	r2, #0
 8005d6e:	bf14      	ite	ne
 8005d70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005d74:	4770      	bxeq	lr
 8005d76:	b530      	push	{r4, r5, lr}
 8005d78:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005d7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005d80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005d84:	e720      	b.n	8005bc8 <__adddf3+0x138>
 8005d86:	bf00      	nop

08005d88 <__aeabi_ul2d>:
__floatundidf():
 8005d88:	ea50 0201 	orrs.w	r2, r0, r1
 8005d8c:	bf08      	it	eq
 8005d8e:	4770      	bxeq	lr
 8005d90:	b530      	push	{r4, r5, lr}
 8005d92:	f04f 0500 	mov.w	r5, #0
 8005d96:	e00a      	b.n	8005dae <__aeabi_l2d+0x16>

08005d98 <__aeabi_l2d>:
__aeabi_l2d():
 8005d98:	ea50 0201 	orrs.w	r2, r0, r1
 8005d9c:	bf08      	it	eq
 8005d9e:	4770      	bxeq	lr
 8005da0:	b530      	push	{r4, r5, lr}
 8005da2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005da6:	d502      	bpl.n	8005dae <__aeabi_l2d+0x16>
 8005da8:	4240      	negs	r0, r0
 8005daa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005dae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005db2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005db6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005dba:	f43f aedc 	beq.w	8005b76 <__adddf3+0xe6>
 8005dbe:	f04f 0203 	mov.w	r2, #3
 8005dc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005dc6:	bf18      	it	ne
 8005dc8:	3203      	addne	r2, #3
 8005dca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005dce:	bf18      	it	ne
 8005dd0:	3203      	addne	r2, #3
 8005dd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005dd6:	f1c2 0320 	rsb	r3, r2, #32
 8005dda:	fa00 fc03 	lsl.w	ip, r0, r3
 8005dde:	fa20 f002 	lsr.w	r0, r0, r2
 8005de2:	fa01 fe03 	lsl.w	lr, r1, r3
 8005de6:	ea40 000e 	orr.w	r0, r0, lr
 8005dea:	fa21 f102 	lsr.w	r1, r1, r2
 8005dee:	4414      	add	r4, r2
 8005df0:	e6c1      	b.n	8005b76 <__adddf3+0xe6>
 8005df2:	bf00      	nop

08005df4 <__aeabi_dmul>:
__muldf3():
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005dfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005dfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005e02:	bf1d      	ittte	ne
 8005e04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005e08:	ea94 0f0c 	teqne	r4, ip
 8005e0c:	ea95 0f0c 	teqne	r5, ip
 8005e10:	f000 f8de 	bleq	8005fd0 <__aeabi_dmul+0x1dc>
 8005e14:	442c      	add	r4, r5
 8005e16:	ea81 0603 	eor.w	r6, r1, r3
 8005e1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005e1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005e22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005e26:	bf18      	it	ne
 8005e28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005e2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e34:	d038      	beq.n	8005ea8 <__aeabi_dmul+0xb4>
 8005e36:	fba0 ce02 	umull	ip, lr, r0, r2
 8005e3a:	f04f 0500 	mov.w	r5, #0
 8005e3e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005e42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005e46:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005e4a:	f04f 0600 	mov.w	r6, #0
 8005e4e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005e52:	f09c 0f00 	teq	ip, #0
 8005e56:	bf18      	it	ne
 8005e58:	f04e 0e01 	orrne.w	lr, lr, #1
 8005e5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005e60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005e64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005e68:	d204      	bcs.n	8005e74 <__aeabi_dmul+0x80>
 8005e6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005e6e:	416d      	adcs	r5, r5
 8005e70:	eb46 0606 	adc.w	r6, r6, r6
 8005e74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005e78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005e7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005e80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005e84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005e88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005e8c:	bf88      	it	hi
 8005e8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005e92:	d81e      	bhi.n	8005ed2 <__aeabi_dmul+0xde>
 8005e94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005e98:	bf08      	it	eq
 8005e9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005e9e:	f150 0000 	adcs.w	r0, r0, #0
 8005ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005eac:	ea46 0101 	orr.w	r1, r6, r1
 8005eb0:	ea40 0002 	orr.w	r0, r0, r2
 8005eb4:	ea81 0103 	eor.w	r1, r1, r3
 8005eb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005ebc:	bfc2      	ittt	gt
 8005ebe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005ec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005ec6:	bd70      	popgt	{r4, r5, r6, pc}
 8005ec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ecc:	f04f 0e00 	mov.w	lr, #0
 8005ed0:	3c01      	subs	r4, #1
 8005ed2:	f300 80ab 	bgt.w	800602c <__aeabi_dmul+0x238>
 8005ed6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005eda:	bfde      	ittt	le
 8005edc:	2000      	movle	r0, #0
 8005ede:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005ee2:	bd70      	pople	{r4, r5, r6, pc}
 8005ee4:	f1c4 0400 	rsb	r4, r4, #0
 8005ee8:	3c20      	subs	r4, #32
 8005eea:	da35      	bge.n	8005f58 <__aeabi_dmul+0x164>
 8005eec:	340c      	adds	r4, #12
 8005eee:	dc1b      	bgt.n	8005f28 <__aeabi_dmul+0x134>
 8005ef0:	f104 0414 	add.w	r4, r4, #20
 8005ef4:	f1c4 0520 	rsb	r5, r4, #32
 8005ef8:	fa00 f305 	lsl.w	r3, r0, r5
 8005efc:	fa20 f004 	lsr.w	r0, r0, r4
 8005f00:	fa01 f205 	lsl.w	r2, r1, r5
 8005f04:	ea40 0002 	orr.w	r0, r0, r2
 8005f08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005f0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005f10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005f14:	fa21 f604 	lsr.w	r6, r1, r4
 8005f18:	eb42 0106 	adc.w	r1, r2, r6
 8005f1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005f20:	bf08      	it	eq
 8005f22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	f1c4 040c 	rsb	r4, r4, #12
 8005f2c:	f1c4 0520 	rsb	r5, r4, #32
 8005f30:	fa00 f304 	lsl.w	r3, r0, r4
 8005f34:	fa20 f005 	lsr.w	r0, r0, r5
 8005f38:	fa01 f204 	lsl.w	r2, r1, r4
 8005f3c:	ea40 0002 	orr.w	r0, r0, r2
 8005f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005f44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005f48:	f141 0100 	adc.w	r1, r1, #0
 8005f4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005f50:	bf08      	it	eq
 8005f52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	f1c4 0520 	rsb	r5, r4, #32
 8005f5c:	fa00 f205 	lsl.w	r2, r0, r5
 8005f60:	ea4e 0e02 	orr.w	lr, lr, r2
 8005f64:	fa20 f304 	lsr.w	r3, r0, r4
 8005f68:	fa01 f205 	lsl.w	r2, r1, r5
 8005f6c:	ea43 0302 	orr.w	r3, r3, r2
 8005f70:	fa21 f004 	lsr.w	r0, r1, r4
 8005f74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005f78:	fa21 f204 	lsr.w	r2, r1, r4
 8005f7c:	ea20 0002 	bic.w	r0, r0, r2
 8005f80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005f84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005f88:	bf08      	it	eq
 8005f8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f094 0f00 	teq	r4, #0
 8005f94:	d10f      	bne.n	8005fb6 <__aeabi_dmul+0x1c2>
 8005f96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005f9a:	0040      	lsls	r0, r0, #1
 8005f9c:	eb41 0101 	adc.w	r1, r1, r1
 8005fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005fa4:	bf08      	it	eq
 8005fa6:	3c01      	subeq	r4, #1
 8005fa8:	d0f7      	beq.n	8005f9a <__aeabi_dmul+0x1a6>
 8005faa:	ea41 0106 	orr.w	r1, r1, r6
 8005fae:	f095 0f00 	teq	r5, #0
 8005fb2:	bf18      	it	ne
 8005fb4:	4770      	bxne	lr
 8005fb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005fba:	0052      	lsls	r2, r2, #1
 8005fbc:	eb43 0303 	adc.w	r3, r3, r3
 8005fc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005fc4:	bf08      	it	eq
 8005fc6:	3d01      	subeq	r5, #1
 8005fc8:	d0f7      	beq.n	8005fba <__aeabi_dmul+0x1c6>
 8005fca:	ea43 0306 	orr.w	r3, r3, r6
 8005fce:	4770      	bx	lr
 8005fd0:	ea94 0f0c 	teq	r4, ip
 8005fd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005fd8:	bf18      	it	ne
 8005fda:	ea95 0f0c 	teqne	r5, ip
 8005fde:	d00c      	beq.n	8005ffa <__aeabi_dmul+0x206>
 8005fe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005fe4:	bf18      	it	ne
 8005fe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005fea:	d1d1      	bne.n	8005f90 <__aeabi_dmul+0x19c>
 8005fec:	ea81 0103 	eor.w	r1, r1, r3
 8005ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ff4:	f04f 0000 	mov.w	r0, #0
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}
 8005ffa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005ffe:	bf06      	itte	eq
 8006000:	4610      	moveq	r0, r2
 8006002:	4619      	moveq	r1, r3
 8006004:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006008:	d019      	beq.n	800603e <__aeabi_dmul+0x24a>
 800600a:	ea94 0f0c 	teq	r4, ip
 800600e:	d102      	bne.n	8006016 <__aeabi_dmul+0x222>
 8006010:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006014:	d113      	bne.n	800603e <__aeabi_dmul+0x24a>
 8006016:	ea95 0f0c 	teq	r5, ip
 800601a:	d105      	bne.n	8006028 <__aeabi_dmul+0x234>
 800601c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006020:	bf1c      	itt	ne
 8006022:	4610      	movne	r0, r2
 8006024:	4619      	movne	r1, r3
 8006026:	d10a      	bne.n	800603e <__aeabi_dmul+0x24a>
 8006028:	ea81 0103 	eor.w	r1, r1, r3
 800602c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006030:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006038:	f04f 0000 	mov.w	r0, #0
 800603c:	bd70      	pop	{r4, r5, r6, pc}
 800603e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006042:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006046:	bd70      	pop	{r4, r5, r6, pc}

08006048 <__aeabi_ddiv>:
__divdf3():
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800604e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006056:	bf1d      	ittte	ne
 8006058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800605c:	ea94 0f0c 	teqne	r4, ip
 8006060:	ea95 0f0c 	teqne	r5, ip
 8006064:	f000 f8a7 	bleq	80061b6 <__aeabi_ddiv+0x16e>
 8006068:	eba4 0405 	sub.w	r4, r4, r5
 800606c:	ea81 0e03 	eor.w	lr, r1, r3
 8006070:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006074:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006078:	f000 8088 	beq.w	800618c <__aeabi_ddiv+0x144>
 800607c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006080:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006084:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006088:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800608c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006090:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006094:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006098:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800609c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80060a0:	429d      	cmp	r5, r3
 80060a2:	bf08      	it	eq
 80060a4:	4296      	cmpeq	r6, r2
 80060a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80060aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80060ae:	d202      	bcs.n	80060b6 <__aeabi_ddiv+0x6e>
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80060b6:	1ab6      	subs	r6, r6, r2
 80060b8:	eb65 0503 	sbc.w	r5, r5, r3
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	ea4f 0232 	mov.w	r2, r2, rrx
 80060c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80060c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80060ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80060ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80060d2:	bf22      	ittt	cs
 80060d4:	1ab6      	subcs	r6, r6, r2
 80060d6:	4675      	movcs	r5, lr
 80060d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	ea4f 0232 	mov.w	r2, r2, rrx
 80060e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80060e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80060ea:	bf22      	ittt	cs
 80060ec:	1ab6      	subcs	r6, r6, r2
 80060ee:	4675      	movcs	r5, lr
 80060f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80060fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80060fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006102:	bf22      	ittt	cs
 8006104:	1ab6      	subcs	r6, r6, r2
 8006106:	4675      	movcs	r5, lr
 8006108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006112:	ebb6 0e02 	subs.w	lr, r6, r2
 8006116:	eb75 0e03 	sbcs.w	lr, r5, r3
 800611a:	bf22      	ittt	cs
 800611c:	1ab6      	subcs	r6, r6, r2
 800611e:	4675      	movcs	r5, lr
 8006120:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006124:	ea55 0e06 	orrs.w	lr, r5, r6
 8006128:	d018      	beq.n	800615c <__aeabi_ddiv+0x114>
 800612a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800612e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006132:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800613a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800613e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006142:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006146:	d1c0      	bne.n	80060ca <__aeabi_ddiv+0x82>
 8006148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800614c:	d10b      	bne.n	8006166 <__aeabi_ddiv+0x11e>
 800614e:	ea41 0100 	orr.w	r1, r1, r0
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800615a:	e7b6      	b.n	80060ca <__aeabi_ddiv+0x82>
 800615c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006160:	bf04      	itt	eq
 8006162:	4301      	orreq	r1, r0
 8006164:	2000      	moveq	r0, #0
 8006166:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800616a:	bf88      	it	hi
 800616c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006170:	f63f aeaf 	bhi.w	8005ed2 <__aeabi_dmul+0xde>
 8006174:	ebb5 0c03 	subs.w	ip, r5, r3
 8006178:	bf04      	itt	eq
 800617a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800617e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006182:	f150 0000 	adcs.w	r0, r0, #0
 8006186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006190:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006194:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006198:	bfc2      	ittt	gt
 800619a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800619e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80061a2:	bd70      	popgt	{r4, r5, r6, pc}
 80061a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80061a8:	f04f 0e00 	mov.w	lr, #0
 80061ac:	3c01      	subs	r4, #1
 80061ae:	e690      	b.n	8005ed2 <__aeabi_dmul+0xde>
 80061b0:	ea45 0e06 	orr.w	lr, r5, r6
 80061b4:	e68d      	b.n	8005ed2 <__aeabi_dmul+0xde>
 80061b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80061ba:	ea94 0f0c 	teq	r4, ip
 80061be:	bf08      	it	eq
 80061c0:	ea95 0f0c 	teqeq	r5, ip
 80061c4:	f43f af3b 	beq.w	800603e <__aeabi_dmul+0x24a>
 80061c8:	ea94 0f0c 	teq	r4, ip
 80061cc:	d10a      	bne.n	80061e4 <__aeabi_ddiv+0x19c>
 80061ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80061d2:	f47f af34 	bne.w	800603e <__aeabi_dmul+0x24a>
 80061d6:	ea95 0f0c 	teq	r5, ip
 80061da:	f47f af25 	bne.w	8006028 <__aeabi_dmul+0x234>
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	e72c      	b.n	800603e <__aeabi_dmul+0x24a>
 80061e4:	ea95 0f0c 	teq	r5, ip
 80061e8:	d106      	bne.n	80061f8 <__aeabi_ddiv+0x1b0>
 80061ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80061ee:	f43f aefd 	beq.w	8005fec <__aeabi_dmul+0x1f8>
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	e722      	b.n	800603e <__aeabi_dmul+0x24a>
 80061f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80061fc:	bf18      	it	ne
 80061fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006202:	f47f aec5 	bne.w	8005f90 <__aeabi_dmul+0x19c>
 8006206:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800620a:	f47f af0d 	bne.w	8006028 <__aeabi_dmul+0x234>
 800620e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006212:	f47f aeeb 	bne.w	8005fec <__aeabi_dmul+0x1f8>
 8006216:	e712      	b.n	800603e <__aeabi_dmul+0x24a>

08006218 <__gedf2>:
__gedf2():
 8006218:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800621c:	e006      	b.n	800622c <__cmpdf2+0x4>
 800621e:	bf00      	nop

08006220 <__ledf2>:
__ledf2():
 8006220:	f04f 0c01 	mov.w	ip, #1
 8006224:	e002      	b.n	800622c <__cmpdf2+0x4>
 8006226:	bf00      	nop

08006228 <__cmpdf2>:
__nedf2():
 8006228:	f04f 0c01 	mov.w	ip, #1
 800622c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006230:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006238:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800623c:	bf18      	it	ne
 800623e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006242:	d01b      	beq.n	800627c <__cmpdf2+0x54>
 8006244:	b001      	add	sp, #4
 8006246:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800624a:	bf0c      	ite	eq
 800624c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006250:	ea91 0f03 	teqne	r1, r3
 8006254:	bf02      	ittt	eq
 8006256:	ea90 0f02 	teqeq	r0, r2
 800625a:	2000      	moveq	r0, #0
 800625c:	4770      	bxeq	lr
 800625e:	f110 0f00 	cmn.w	r0, #0
 8006262:	ea91 0f03 	teq	r1, r3
 8006266:	bf58      	it	pl
 8006268:	4299      	cmppl	r1, r3
 800626a:	bf08      	it	eq
 800626c:	4290      	cmpeq	r0, r2
 800626e:	bf2c      	ite	cs
 8006270:	17d8      	asrcs	r0, r3, #31
 8006272:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006276:	f040 0001 	orr.w	r0, r0, #1
 800627a:	4770      	bx	lr
 800627c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006284:	d102      	bne.n	800628c <__cmpdf2+0x64>
 8006286:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800628a:	d107      	bne.n	800629c <__cmpdf2+0x74>
 800628c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006294:	d1d6      	bne.n	8006244 <__cmpdf2+0x1c>
 8006296:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800629a:	d0d3      	beq.n	8006244 <__cmpdf2+0x1c>
 800629c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop

080062a4 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
 80062a4:	4684      	mov	ip, r0
 80062a6:	4610      	mov	r0, r2
 80062a8:	4662      	mov	r2, ip
 80062aa:	468c      	mov	ip, r1
 80062ac:	4619      	mov	r1, r3
 80062ae:	4663      	mov	r3, ip
 80062b0:	e000      	b.n	80062b4 <__aeabi_cdcmpeq>
 80062b2:	bf00      	nop

080062b4 <__aeabi_cdcmpeq>:
__aeabi_cdcmpeq():
 80062b4:	b501      	push	{r0, lr}
 80062b6:	f7ff ffb7 	bl	8006228 <__cmpdf2>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	bf48      	it	mi
 80062be:	f110 0f00 	cmnmi.w	r0, #0
 80062c2:	bd01      	pop	{r0, pc}

080062c4 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
 80062c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80062c8:	f7ff fff4 	bl	80062b4 <__aeabi_cdcmpeq>
 80062cc:	bf0c      	ite	eq
 80062ce:	2001      	moveq	r0, #1
 80062d0:	2000      	movne	r0, #0
 80062d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80062d6:	bf00      	nop

080062d8 <__aeabi_dcmplt>:
__aeabi_dcmplt():
 80062d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80062dc:	f7ff ffea 	bl	80062b4 <__aeabi_cdcmpeq>
 80062e0:	bf34      	ite	cc
 80062e2:	2001      	movcc	r0, #1
 80062e4:	2000      	movcs	r0, #0
 80062e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80062ea:	bf00      	nop

080062ec <__aeabi_dcmple>:
__aeabi_dcmple():
 80062ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80062f0:	f7ff ffe0 	bl	80062b4 <__aeabi_cdcmpeq>
 80062f4:	bf94      	ite	ls
 80062f6:	2001      	movls	r0, #1
 80062f8:	2000      	movhi	r0, #0
 80062fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80062fe:	bf00      	nop

08006300 <__aeabi_dcmpge>:
__aeabi_dcmpge():
 8006300:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006304:	f7ff ffce 	bl	80062a4 <__aeabi_cdrcmple>
 8006308:	bf94      	ite	ls
 800630a:	2001      	movls	r0, #1
 800630c:	2000      	movhi	r0, #0
 800630e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006312:	bf00      	nop

08006314 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
 8006314:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006318:	f7ff ffc4 	bl	80062a4 <__aeabi_cdrcmple>
 800631c:	bf34      	ite	cc
 800631e:	2001      	movcc	r0, #1
 8006320:	2000      	movcs	r0, #0
 8006322:	f85d fb08 	ldr.w	pc, [sp], #8
 8006326:	bf00      	nop

08006328 <__aeabi_d2iz>:
__aeabi_d2iz():
 8006328:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800632c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006330:	d215      	bcs.n	800635e <__aeabi_d2iz+0x36>
 8006332:	d511      	bpl.n	8006358 <__aeabi_d2iz+0x30>
 8006334:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006338:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800633c:	d912      	bls.n	8006364 <__aeabi_d2iz+0x3c>
 800633e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006346:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800634a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800634e:	fa23 f002 	lsr.w	r0, r3, r2
 8006352:	bf18      	it	ne
 8006354:	4240      	negne	r0, r0
 8006356:	4770      	bx	lr
 8006358:	f04f 0000 	mov.w	r0, #0
 800635c:	4770      	bx	lr
 800635e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006362:	d105      	bne.n	8006370 <__aeabi_d2iz+0x48>
 8006364:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006368:	bf08      	it	eq
 800636a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800636e:	4770      	bx	lr
 8006370:	f04f 0000 	mov.w	r0, #0
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <__aeabi_uldivmod>:
__aeabi_uldivmod():
 8006378:	b953      	cbnz	r3, 8006390 <__aeabi_uldivmod+0x18>
 800637a:	b94a      	cbnz	r2, 8006390 <__aeabi_uldivmod+0x18>
 800637c:	2900      	cmp	r1, #0
 800637e:	bf08      	it	eq
 8006380:	2800      	cmpeq	r0, #0
 8006382:	bf1c      	itt	ne
 8006384:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006388:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800638c:	f000 b97e 	b.w	800668c <__aeabi_idiv0>
 8006390:	f1ad 0c08 	sub.w	ip, sp, #8
 8006394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006398:	f000 f806 	bl	80063a8 <__udivmoddi4>
 800639c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80063a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063a4:	b004      	add	sp, #16
 80063a6:	4770      	bx	lr

080063a8 <__udivmoddi4>:
__udivmoddi4():
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	468c      	mov	ip, r1
 80063ae:	460e      	mov	r6, r1
 80063b0:	4604      	mov	r4, r0
 80063b2:	9d08      	ldr	r5, [sp, #32]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d150      	bne.n	800645a <__udivmoddi4+0xb2>
 80063b8:	428a      	cmp	r2, r1
 80063ba:	4617      	mov	r7, r2
 80063bc:	d96c      	bls.n	8006498 <__udivmoddi4+0xf0>
 80063be:	fab2 fe82 	clz	lr, r2
 80063c2:	f1be 0f00 	cmp.w	lr, #0
 80063c6:	d00b      	beq.n	80063e0 <__udivmoddi4+0x38>
 80063c8:	f1ce 0420 	rsb	r4, lr, #32
 80063cc:	fa20 f404 	lsr.w	r4, r0, r4
 80063d0:	fa01 f60e 	lsl.w	r6, r1, lr
 80063d4:	ea44 0c06 	orr.w	ip, r4, r6
 80063d8:	fa02 f70e 	lsl.w	r7, r2, lr
 80063dc:	fa00 f40e 	lsl.w	r4, r0, lr
 80063e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80063e4:	0c22      	lsrs	r2, r4, #16
 80063e6:	fbbc f0f9 	udiv	r0, ip, r9
 80063ea:	fa1f f887 	uxth.w	r8, r7
 80063ee:	fb09 c610 	mls	r6, r9, r0, ip
 80063f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80063f6:	fb00 f308 	mul.w	r3, r0, r8
 80063fa:	42b3      	cmp	r3, r6
 80063fc:	d909      	bls.n	8006412 <__udivmoddi4+0x6a>
 80063fe:	19f6      	adds	r6, r6, r7
 8006400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006404:	f080 8122 	bcs.w	800664c <__udivmoddi4+0x2a4>
 8006408:	42b3      	cmp	r3, r6
 800640a:	f240 811f 	bls.w	800664c <__udivmoddi4+0x2a4>
 800640e:	3802      	subs	r0, #2
 8006410:	443e      	add	r6, r7
 8006412:	1af6      	subs	r6, r6, r3
 8006414:	b2a2      	uxth	r2, r4
 8006416:	fbb6 f3f9 	udiv	r3, r6, r9
 800641a:	fb09 6613 	mls	r6, r9, r3, r6
 800641e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8006422:	fb03 f808 	mul.w	r8, r3, r8
 8006426:	45a0      	cmp	r8, r4
 8006428:	d909      	bls.n	800643e <__udivmoddi4+0x96>
 800642a:	19e4      	adds	r4, r4, r7
 800642c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006430:	f080 810a 	bcs.w	8006648 <__udivmoddi4+0x2a0>
 8006434:	45a0      	cmp	r8, r4
 8006436:	f240 8107 	bls.w	8006648 <__udivmoddi4+0x2a0>
 800643a:	3b02      	subs	r3, #2
 800643c:	443c      	add	r4, r7
 800643e:	ebc8 0404 	rsb	r4, r8, r4
 8006442:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006446:	2100      	movs	r1, #0
 8006448:	2d00      	cmp	r5, #0
 800644a:	d062      	beq.n	8006512 <__udivmoddi4+0x16a>
 800644c:	fa24 f40e 	lsr.w	r4, r4, lr
 8006450:	2300      	movs	r3, #0
 8006452:	602c      	str	r4, [r5, #0]
 8006454:	606b      	str	r3, [r5, #4]
 8006456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645a:	428b      	cmp	r3, r1
 800645c:	d907      	bls.n	800646e <__udivmoddi4+0xc6>
 800645e:	2d00      	cmp	r5, #0
 8006460:	d055      	beq.n	800650e <__udivmoddi4+0x166>
 8006462:	2100      	movs	r1, #0
 8006464:	e885 0041 	stmia.w	r5, {r0, r6}
 8006468:	4608      	mov	r0, r1
 800646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646e:	fab3 f183 	clz	r1, r3
 8006472:	2900      	cmp	r1, #0
 8006474:	f040 8090 	bne.w	8006598 <__udivmoddi4+0x1f0>
 8006478:	42b3      	cmp	r3, r6
 800647a:	d302      	bcc.n	8006482 <__udivmoddi4+0xda>
 800647c:	4282      	cmp	r2, r0
 800647e:	f200 80f8 	bhi.w	8006672 <__udivmoddi4+0x2ca>
 8006482:	1a84      	subs	r4, r0, r2
 8006484:	eb66 0603 	sbc.w	r6, r6, r3
 8006488:	2001      	movs	r0, #1
 800648a:	46b4      	mov	ip, r6
 800648c:	2d00      	cmp	r5, #0
 800648e:	d040      	beq.n	8006512 <__udivmoddi4+0x16a>
 8006490:	e885 1010 	stmia.w	r5, {r4, ip}
 8006494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006498:	b912      	cbnz	r2, 80064a0 <__udivmoddi4+0xf8>
 800649a:	2701      	movs	r7, #1
 800649c:	fbb7 f7f2 	udiv	r7, r7, r2
 80064a0:	fab7 fe87 	clz	lr, r7
 80064a4:	f1be 0f00 	cmp.w	lr, #0
 80064a8:	d135      	bne.n	8006516 <__udivmoddi4+0x16e>
 80064aa:	1bf3      	subs	r3, r6, r7
 80064ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80064b0:	fa1f fc87 	uxth.w	ip, r7
 80064b4:	2101      	movs	r1, #1
 80064b6:	fbb3 f0f8 	udiv	r0, r3, r8
 80064ba:	0c22      	lsrs	r2, r4, #16
 80064bc:	fb08 3610 	mls	r6, r8, r0, r3
 80064c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80064c4:	fb0c f300 	mul.w	r3, ip, r0
 80064c8:	42b3      	cmp	r3, r6
 80064ca:	d907      	bls.n	80064dc <__udivmoddi4+0x134>
 80064cc:	19f6      	adds	r6, r6, r7
 80064ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80064d2:	d202      	bcs.n	80064da <__udivmoddi4+0x132>
 80064d4:	42b3      	cmp	r3, r6
 80064d6:	f200 80ce 	bhi.w	8006676 <__udivmoddi4+0x2ce>
 80064da:	4610      	mov	r0, r2
 80064dc:	1af6      	subs	r6, r6, r3
 80064de:	b2a2      	uxth	r2, r4
 80064e0:	fbb6 f3f8 	udiv	r3, r6, r8
 80064e4:	fb08 6613 	mls	r6, r8, r3, r6
 80064e8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80064ec:	fb0c fc03 	mul.w	ip, ip, r3
 80064f0:	45a4      	cmp	ip, r4
 80064f2:	d907      	bls.n	8006504 <__udivmoddi4+0x15c>
 80064f4:	19e4      	adds	r4, r4, r7
 80064f6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80064fa:	d202      	bcs.n	8006502 <__udivmoddi4+0x15a>
 80064fc:	45a4      	cmp	ip, r4
 80064fe:	f200 80b5 	bhi.w	800666c <__udivmoddi4+0x2c4>
 8006502:	4613      	mov	r3, r2
 8006504:	ebcc 0404 	rsb	r4, ip, r4
 8006508:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800650c:	e79c      	b.n	8006448 <__udivmoddi4+0xa0>
 800650e:	4629      	mov	r1, r5
 8006510:	4628      	mov	r0, r5
 8006512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006516:	f1ce 0120 	rsb	r1, lr, #32
 800651a:	fa06 f30e 	lsl.w	r3, r6, lr
 800651e:	fa07 f70e 	lsl.w	r7, r7, lr
 8006522:	fa20 f901 	lsr.w	r9, r0, r1
 8006526:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800652a:	40ce      	lsrs	r6, r1
 800652c:	ea49 0903 	orr.w	r9, r9, r3
 8006530:	fbb6 faf8 	udiv	sl, r6, r8
 8006534:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8006538:	fb08 661a 	mls	r6, r8, sl, r6
 800653c:	fa1f fc87 	uxth.w	ip, r7
 8006540:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8006544:	fb0a f20c 	mul.w	r2, sl, ip
 8006548:	429a      	cmp	r2, r3
 800654a:	fa00 f40e 	lsl.w	r4, r0, lr
 800654e:	d90a      	bls.n	8006566 <__udivmoddi4+0x1be>
 8006550:	19db      	adds	r3, r3, r7
 8006552:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 8006556:	f080 8087 	bcs.w	8006668 <__udivmoddi4+0x2c0>
 800655a:	429a      	cmp	r2, r3
 800655c:	f240 8084 	bls.w	8006668 <__udivmoddi4+0x2c0>
 8006560:	f1aa 0a02 	sub.w	sl, sl, #2
 8006564:	443b      	add	r3, r7
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	fa1f f989 	uxth.w	r9, r9
 800656c:	fbb3 f1f8 	udiv	r1, r3, r8
 8006570:	fb08 3311 	mls	r3, r8, r1, r3
 8006574:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8006578:	fb01 f60c 	mul.w	r6, r1, ip
 800657c:	429e      	cmp	r6, r3
 800657e:	d907      	bls.n	8006590 <__udivmoddi4+0x1e8>
 8006580:	19db      	adds	r3, r3, r7
 8006582:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8006586:	d26b      	bcs.n	8006660 <__udivmoddi4+0x2b8>
 8006588:	429e      	cmp	r6, r3
 800658a:	d969      	bls.n	8006660 <__udivmoddi4+0x2b8>
 800658c:	3902      	subs	r1, #2
 800658e:	443b      	add	r3, r7
 8006590:	1b9b      	subs	r3, r3, r6
 8006592:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006596:	e78e      	b.n	80064b6 <__udivmoddi4+0x10e>
 8006598:	f1c1 0e20 	rsb	lr, r1, #32
 800659c:	fa22 f40e 	lsr.w	r4, r2, lr
 80065a0:	408b      	lsls	r3, r1
 80065a2:	4323      	orrs	r3, r4
 80065a4:	fa20 f70e 	lsr.w	r7, r0, lr
 80065a8:	fa06 f401 	lsl.w	r4, r6, r1
 80065ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80065b0:	fa26 f60e 	lsr.w	r6, r6, lr
 80065b4:	433c      	orrs	r4, r7
 80065b6:	fbb6 f9fc 	udiv	r9, r6, ip
 80065ba:	0c27      	lsrs	r7, r4, #16
 80065bc:	fb0c 6619 	mls	r6, ip, r9, r6
 80065c0:	fa1f f883 	uxth.w	r8, r3
 80065c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80065c8:	fb09 f708 	mul.w	r7, r9, r8
 80065cc:	42b7      	cmp	r7, r6
 80065ce:	fa02 f201 	lsl.w	r2, r2, r1
 80065d2:	fa00 fa01 	lsl.w	sl, r0, r1
 80065d6:	d908      	bls.n	80065ea <__udivmoddi4+0x242>
 80065d8:	18f6      	adds	r6, r6, r3
 80065da:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80065de:	d241      	bcs.n	8006664 <__udivmoddi4+0x2bc>
 80065e0:	42b7      	cmp	r7, r6
 80065e2:	d93f      	bls.n	8006664 <__udivmoddi4+0x2bc>
 80065e4:	f1a9 0902 	sub.w	r9, r9, #2
 80065e8:	441e      	add	r6, r3
 80065ea:	1bf6      	subs	r6, r6, r7
 80065ec:	b2a0      	uxth	r0, r4
 80065ee:	fbb6 f4fc 	udiv	r4, r6, ip
 80065f2:	fb0c 6614 	mls	r6, ip, r4, r6
 80065f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80065fa:	fb04 f808 	mul.w	r8, r4, r8
 80065fe:	45b8      	cmp	r8, r7
 8006600:	d907      	bls.n	8006612 <__udivmoddi4+0x26a>
 8006602:	18ff      	adds	r7, r7, r3
 8006604:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
 8006608:	d228      	bcs.n	800665c <__udivmoddi4+0x2b4>
 800660a:	45b8      	cmp	r8, r7
 800660c:	d926      	bls.n	800665c <__udivmoddi4+0x2b4>
 800660e:	3c02      	subs	r4, #2
 8006610:	441f      	add	r7, r3
 8006612:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8006616:	ebc8 0707 	rsb	r7, r8, r7
 800661a:	fba0 8902 	umull	r8, r9, r0, r2
 800661e:	454f      	cmp	r7, r9
 8006620:	4644      	mov	r4, r8
 8006622:	464e      	mov	r6, r9
 8006624:	d314      	bcc.n	8006650 <__udivmoddi4+0x2a8>
 8006626:	d029      	beq.n	800667c <__udivmoddi4+0x2d4>
 8006628:	b365      	cbz	r5, 8006684 <__udivmoddi4+0x2dc>
 800662a:	ebba 0304 	subs.w	r3, sl, r4
 800662e:	eb67 0706 	sbc.w	r7, r7, r6
 8006632:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006636:	40cb      	lsrs	r3, r1
 8006638:	40cf      	lsrs	r7, r1
 800663a:	ea4e 0303 	orr.w	r3, lr, r3
 800663e:	e885 0088 	stmia.w	r5, {r3, r7}
 8006642:	2100      	movs	r1, #0
 8006644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006648:	4613      	mov	r3, r2
 800664a:	e6f8      	b.n	800643e <__udivmoddi4+0x96>
 800664c:	4610      	mov	r0, r2
 800664e:	e6e0      	b.n	8006412 <__udivmoddi4+0x6a>
 8006650:	ebb8 0402 	subs.w	r4, r8, r2
 8006654:	eb69 0603 	sbc.w	r6, r9, r3
 8006658:	3801      	subs	r0, #1
 800665a:	e7e5      	b.n	8006628 <__udivmoddi4+0x280>
 800665c:	4604      	mov	r4, r0
 800665e:	e7d8      	b.n	8006612 <__udivmoddi4+0x26a>
 8006660:	4611      	mov	r1, r2
 8006662:	e795      	b.n	8006590 <__udivmoddi4+0x1e8>
 8006664:	4681      	mov	r9, r0
 8006666:	e7c0      	b.n	80065ea <__udivmoddi4+0x242>
 8006668:	468a      	mov	sl, r1
 800666a:	e77c      	b.n	8006566 <__udivmoddi4+0x1be>
 800666c:	3b02      	subs	r3, #2
 800666e:	443c      	add	r4, r7
 8006670:	e748      	b.n	8006504 <__udivmoddi4+0x15c>
 8006672:	4608      	mov	r0, r1
 8006674:	e70a      	b.n	800648c <__udivmoddi4+0xe4>
 8006676:	3802      	subs	r0, #2
 8006678:	443e      	add	r6, r7
 800667a:	e72f      	b.n	80064dc <__udivmoddi4+0x134>
 800667c:	45c2      	cmp	sl, r8
 800667e:	d3e7      	bcc.n	8006650 <__udivmoddi4+0x2a8>
 8006680:	463e      	mov	r6, r7
 8006682:	e7d1      	b.n	8006628 <__udivmoddi4+0x280>
 8006684:	4629      	mov	r1, r5
 8006686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668a:	bf00      	nop

0800668c <__aeabi_idiv0>:
__aeabi_idiv0():
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	0074743a 	.word	0x0074743a
 8006694:	706d742f 	.word	0x706d742f
 8006698:	00000000 	.word	0x00000000
 800669c:	63617453 	.word	0x63617453
 80066a0:	7266206b 	.word	0x7266206b
 80066a4:	3a656d61 	.word	0x3a656d61
 80066a8:	0000000a 	.word	0x0000000a
 80066ac:	20305220 	.word	0x20305220
 80066b0:	2520203d 	.word	0x2520203d
 80066b4:	0a583830 	.word	0x0a583830
 80066b8:	00000000 	.word	0x00000000
 80066bc:	20315220 	.word	0x20315220
 80066c0:	2520203d 	.word	0x2520203d
 80066c4:	0a583830 	.word	0x0a583830
 80066c8:	00000000 	.word	0x00000000
 80066cc:	20325220 	.word	0x20325220
 80066d0:	2520203d 	.word	0x2520203d
 80066d4:	0a583830 	.word	0x0a583830
 80066d8:	00000000 	.word	0x00000000
 80066dc:	20335220 	.word	0x20335220
 80066e0:	2520203d 	.word	0x2520203d
 80066e4:	0a583830 	.word	0x0a583830
 80066e8:	00000000 	.word	0x00000000
 80066ec:	32315220 	.word	0x32315220
 80066f0:	25203d20 	.word	0x25203d20
 80066f4:	0a583830 	.word	0x0a583830
 80066f8:	00000000 	.word	0x00000000
 80066fc:	20524c20 	.word	0x20524c20
 8006700:	2520203d 	.word	0x2520203d
 8006704:	0a583830 	.word	0x0a583830
 8006708:	00000000 	.word	0x00000000
 800670c:	20435020 	.word	0x20435020
 8006710:	2520203d 	.word	0x2520203d
 8006714:	0a583830 	.word	0x0a583830
 8006718:	00000000 	.word	0x00000000
 800671c:	52535020 	.word	0x52535020
 8006720:	25203d20 	.word	0x25203d20
 8006724:	0a583830 	.word	0x0a583830
 8006728:	00000000 	.word	0x00000000
 800672c:	2f525346 	.word	0x2f525346
 8006730:	3a524146 	.word	0x3a524146
 8006734:	0000000a 	.word	0x0000000a
 8006738:	53464320 	.word	0x53464320
 800673c:	203d2052 	.word	0x203d2052
 8006740:	38302520 	.word	0x38302520
 8006744:	00000a58 	.word	0x00000a58
 8006748:	53464820 	.word	0x53464820
 800674c:	203d2052 	.word	0x203d2052
 8006750:	38302520 	.word	0x38302520
 8006754:	00000a58 	.word	0x00000a58
 8006758:	53464420 	.word	0x53464420
 800675c:	203d2052 	.word	0x203d2052
 8006760:	38302520 	.word	0x38302520
 8006764:	00000a58 	.word	0x00000a58
 8006768:	53464120 	.word	0x53464120
 800676c:	203d2052 	.word	0x203d2052
 8006770:	38302520 	.word	0x38302520
 8006774:	00000a58 	.word	0x00000a58
 8006778:	464d4d20 	.word	0x464d4d20
 800677c:	3d205241 	.word	0x3d205241
 8006780:	38302520 	.word	0x38302520
 8006784:	00000a58 	.word	0x00000a58
 8006788:	41464220 	.word	0x41464220
 800678c:	203d2052 	.word	0x203d2052
 8006790:	38302520 	.word	0x38302520
 8006794:	00000a58 	.word	0x00000a58
 8006798:	6373694d 	.word	0x6373694d
 800679c:	0000000a 	.word	0x0000000a
 80067a0:	2f524c20 	.word	0x2f524c20
 80067a4:	5f435845 	.word	0x5f435845
 80067a8:	55544552 	.word	0x55544552
 80067ac:	203d4e52 	.word	0x203d4e52
 80067b0:	58383025 	.word	0x58383025
 80067b4:	0000000a 	.word	0x0000000a
 80067b8:	7261485b 	.word	0x7261485b
 80067bc:	75614664 	.word	0x75614664
 80067c0:	0a5d746c 	.word	0x0a5d746c
 80067c4:	00000000 	.word	0x00000000
 80067c8:	7375425b 	.word	0x7375425b
 80067cc:	6c756146 	.word	0x6c756146
 80067d0:	000a5d74 	.word	0x000a5d74
 80067d4:	6173555b 	.word	0x6173555b
 80067d8:	61466567 	.word	0x61466567
 80067dc:	5d746c75 	.word	0x5d746c75
 80067e0:	0000000a 	.word	0x0000000a
 80067e4:	6c6c6548 	.word	0x6c6c6548
 80067e8:	6546206f 	.word	0x6546206f
 80067ec:	61686261 	.word	0x61686261
 80067f0:	00000073 	.word	0x00000073

080067f4 <_ctype_>:
 80067f4:	20202000 20202020 28282020 20282828     .         ((((( 
 8006804:	20202020 20202020 20202020 20202020                     
 8006814:	10108820 10101010 10101010 10101010      ...............
 8006824:	04040410 04040404 10040404 10101010     ................
 8006834:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8006844:	01010101 01010101 01010101 10101010     ................
 8006854:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8006864:	02020202 02020202 02020202 10101010     ................
 8006874:	00000020 00000000 00000000 00000000      ...............
	...
 80068f8:	00000043                                C...

080068fc <blanks.7007>:
 80068fc:	20202020 20202020 20202020 20202020                     
 800690c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800691c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800692c:	00000000 33323130 37363534 62613938     ....0123456789ab
 800693c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800694c:	00000030                                0...

08006950 <zeroes.7008>:
 8006950:	30303030 30303030 30303030 30303030     0000000000000000
 8006960:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8006970:	49534f50 00000058 0000002e              POSIX.......

0800697c <p05.5402>:
 800697c:	00000005 00000019 0000007d              ........}...

08006988 <__mprec_tens>:
 8006988:	00000000 3ff00000 00000000 40240000     .......?......$@
 8006998:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80069a8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80069b8:	00000000 412e8480 00000000 416312d0     .......A......cA
 80069c8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80069d8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80069e8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80069f8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8006a08:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8006a18:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8006a28:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8006a38:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8006a48:	79d99db4 44ea7843                       ...yCx.D

08006a50 <__mprec_bigtens>:
 8006a50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8006a60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8006a70:	7f73bf3c 75154fdd                       <.s..O.u
